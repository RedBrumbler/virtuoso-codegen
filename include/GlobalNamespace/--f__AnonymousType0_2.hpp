// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: <>f__AnonymousType0`2<$Value$j__TPar, $Index$j__TPar>
  template<typename $Value$j__TPar, typename $Index$j__TPar>
  class $$f__AnonymousType0_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::$$f__AnonymousType0_2, "", "<>f__AnonymousType0`2");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: <>f__AnonymousType0`2
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  template<typename $Value$j__TPar, typename $Index$j__TPar>
  class $$f__AnonymousType0_2 : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // [DebuggerBrowsableAttribute] Offset: 0x536BAC
    // private readonly <Value>j__TPar <Value>i__Field
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    $Value$j__TPar $Value$i__Field;
    // [DebuggerBrowsableAttribute] Offset: 0x536BC0
    // private readonly <Index>j__TPar <Index>i__Field
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    $Index$j__TPar $Index$i__Field;
    public:
    // Autogenerated instance field getter
    // Get instance field: private readonly <Value>j__TPar <Value>i__Field
    $Value$j__TPar& dyn_$Value$i__Field() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType0_2::dyn_$Value$i__Field");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Value>i__Field"))->offset;
      return *reinterpret_cast<$Value$j__TPar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly <Index>j__TPar <Index>i__Field
    $Index$j__TPar& dyn_$Index$i__Field() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType0_2::dyn_$Index$i__Field");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Index>i__Field"))->offset;
      return *reinterpret_cast<$Index$j__TPar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public <Value>j__TPar get_Value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    $Value$j__TPar get_Value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType0_2::get_Value");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<$Value$j__TPar, false>(this, ___internal__method);
    }
    // public <Index>j__TPar get_Index()
    // Offset: 0xFFFFFFFFFFFFFFFF
    $Index$j__TPar get_Index() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType0_2::get_Index");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Index", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<$Index$j__TPar, false>(this, ___internal__method);
    }
    // public System.Void .ctor(<Value>j__TPar Value, <Index>j__TPar Index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static $$f__AnonymousType0_2<$Value$j__TPar, $Index$j__TPar>* New_ctor($Value$j__TPar Value, $Index$j__TPar Index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType0_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<$$f__AnonymousType0_2<$Value$j__TPar, $Index$j__TPar>*, creationType>(Value, Index)));
    }
    // public override System.Boolean Equals(System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object value)
    bool Equals(::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType0_2::Equals");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType0_2::GetHashCode");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public override System.String ToString()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType0_2::ToString");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
  }; // <>f__AnonymousType0`2
  // Could not write size check! Type: <>f__AnonymousType0`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
