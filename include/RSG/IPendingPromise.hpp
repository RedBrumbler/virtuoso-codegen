// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RSG.IRejectable
#include "RSG/IRejectable.hpp"
// Completed includes
// Type namespace: RSG
namespace RSG {
  // Forward declaring type: IPendingPromise
  class IPendingPromise;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RSG::IPendingPromise);
DEFINE_IL2CPP_ARG_TYPE(::RSG::IPendingPromise*, "RSG", "IPendingPromise");
// Type namespace: RSG
namespace RSG {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: RSG.IPendingPromise
  // [TokenAttribute] Offset: FFFFFFFF
  class IPendingPromise/*, public ::RSG::IRejectable*/ {
    public:
    // Creating interface conversion operator: operator ::RSG::IRejectable
    operator ::RSG::IRejectable() noexcept {
      return *reinterpret_cast<::RSG::IRejectable*>(this);
    }
    // public System.Int32 get_Id()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Id();
    // public System.Void Resolve()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Resolve();
    // public System.Void ReportProgress(System.Single progress)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ReportProgress(float progress);
  }; // RSG.IPendingPromise
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RSG::IPendingPromise::get_Id
// Il2CppName: get_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (RSG::IPendingPromise::*)()>(&RSG::IPendingPromise::get_Id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RSG::IPendingPromise*), "get_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RSG::IPendingPromise::Resolve
// Il2CppName: Resolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::IPendingPromise::*)()>(&RSG::IPendingPromise::Resolve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RSG::IPendingPromise*), "Resolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RSG::IPendingPromise::ReportProgress
// Il2CppName: ReportProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::IPendingPromise::*)(float)>(&RSG::IPendingPromise::ReportProgress)> {
  static const MethodInfo* get() {
    static auto* progress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::IPendingPromise*), "ReportProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{progress});
  }
};
