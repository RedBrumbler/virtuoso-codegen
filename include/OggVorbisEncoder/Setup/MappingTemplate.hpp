// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OggVorbisEncoder.Setup.IMappingTemplate
#include "OggVorbisEncoder/Setup/IMappingTemplate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OggVorbisEncoder::Setup
namespace OggVorbisEncoder::Setup {
  // Forward declaring type: Mapping
  class Mapping;
  // Forward declaring type: IResidueTemplate
  class IResidueTemplate;
}
// Completed forward declares
// Type namespace: OggVorbisEncoder.Setup
namespace OggVorbisEncoder::Setup {
  // Forward declaring type: MappingTemplate
  class MappingTemplate;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::Setup::MappingTemplate);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::Setup::MappingTemplate*, "OggVorbisEncoder.Setup", "MappingTemplate");
// Type namespace: OggVorbisEncoder.Setup
namespace OggVorbisEncoder::Setup {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.Setup.MappingTemplate
  // [TokenAttribute] Offset: FFFFFFFF
  class MappingTemplate : public ::Il2CppObject/*, public ::OggVorbisEncoder::Setup::IMappingTemplate*/ {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly OggVorbisEncoder.Setup.Mapping[] <Mapping>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::OggVorbisEncoder::Setup::Mapping*> Mapping;
    // Field size check
    static_assert(sizeof(::ArrayW<::OggVorbisEncoder::Setup::Mapping*>) == 0x8);
    // private readonly OggVorbisEncoder.Setup.IResidueTemplate[] <ResidueTemplate>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::OggVorbisEncoder::Setup::IResidueTemplate*> ResidueTemplate;
    // Field size check
    static_assert(sizeof(::ArrayW<::OggVorbisEncoder::Setup::IResidueTemplate*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::OggVorbisEncoder::Setup::IMappingTemplate
    operator ::OggVorbisEncoder::Setup::IMappingTemplate() noexcept {
      return *reinterpret_cast<::OggVorbisEncoder::Setup::IMappingTemplate*>(this);
    }
    // Get instance field reference: private readonly OggVorbisEncoder.Setup.Mapping[] <Mapping>k__BackingField
    ::ArrayW<::OggVorbisEncoder::Setup::Mapping*>& dyn_$Mapping$k__BackingField();
    // Get instance field reference: private readonly OggVorbisEncoder.Setup.IResidueTemplate[] <ResidueTemplate>k__BackingField
    ::ArrayW<::OggVorbisEncoder::Setup::IResidueTemplate*>& dyn_$ResidueTemplate$k__BackingField();
    // public OggVorbisEncoder.Setup.Mapping[] get_Mapping()
    // Offset: 0x76B820
    ::ArrayW<::OggVorbisEncoder::Setup::Mapping*> get_Mapping();
    // public OggVorbisEncoder.Setup.IResidueTemplate[] get_ResidueTemplate()
    // Offset: 0x76B828
    ::ArrayW<::OggVorbisEncoder::Setup::IResidueTemplate*> get_ResidueTemplate();
    // public System.Void .ctor(OggVorbisEncoder.Setup.Mapping[] mapping, OggVorbisEncoder.Setup.IResidueTemplate[] residueTemplate)
    // Offset: 0x76B7E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MappingTemplate* New_ctor(::ArrayW<::OggVorbisEncoder::Setup::Mapping*> mapping, ::ArrayW<::OggVorbisEncoder::Setup::IResidueTemplate*> residueTemplate) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::Setup::MappingTemplate::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MappingTemplate*, creationType>(mapping, residueTemplate)));
    }
  }; // OggVorbisEncoder.Setup.MappingTemplate
  #pragma pack(pop)
  static check_size<sizeof(MappingTemplate), 24 + sizeof(::ArrayW<::OggVorbisEncoder::Setup::IResidueTemplate*>)> __OggVorbisEncoder_Setup_MappingTemplateSizeCheck;
  static_assert(sizeof(MappingTemplate) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::MappingTemplate::get_Mapping
// Il2CppName: get_Mapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::OggVorbisEncoder::Setup::Mapping*> (OggVorbisEncoder::Setup::MappingTemplate::*)()>(&OggVorbisEncoder::Setup::MappingTemplate::get_Mapping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::MappingTemplate*), "get_Mapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::MappingTemplate::get_ResidueTemplate
// Il2CppName: get_ResidueTemplate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::OggVorbisEncoder::Setup::IResidueTemplate*> (OggVorbisEncoder::Setup::MappingTemplate::*)()>(&OggVorbisEncoder::Setup::MappingTemplate::get_ResidueTemplate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::MappingTemplate*), "get_ResidueTemplate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::MappingTemplate::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
