// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OggVorbisEncoder::Setup
namespace OggVorbisEncoder::Setup {
}
// Completed forward declares
// Type namespace: OggVorbisEncoder.Setup
namespace OggVorbisEncoder::Setup {
  // Forward declaring type: Floor
  class Floor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::Setup::Floor);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::Setup::Floor*, "OggVorbisEncoder.Setup", "Floor");
// Type namespace: OggVorbisEncoder.Setup
namespace OggVorbisEncoder::Setup {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.Setup.Floor
  // [TokenAttribute] Offset: FFFFFFFF
  class Floor : public ::Il2CppObject {
    public:
    // Nested type: ::OggVorbisEncoder::Setup::Floor::$$c
    class $$c;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.Int32[] <PartitionClass>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<int> PartitionClass;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Int32[] <ClassDimensions>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> ClassDimensions;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Int32[] <ClassSubs>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<int> ClassSubs;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Int32[] <ClassBook>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<int> ClassBook;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Int32[][] <ClassSubBook>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::ArrayW<int>> ClassSubBook;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<int>>) == 0x8);
    // private readonly System.Int32 <Mult>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    int Mult;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Mult and: PostList
    char __padding5[0x4] = {};
    // private readonly System.Int32[] <PostList>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<int> PostList;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Single <MaxOver>k__BackingField
    // Size: 0x4
    // Offset: 0x48
    float MaxOver;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Single <MaxUnder>k__BackingField
    // Size: 0x4
    // Offset: 0x4C
    float MaxUnder;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Single <MaxError>k__BackingField
    // Size: 0x4
    // Offset: 0x50
    float MaxError;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Single <TwoFitWeight>k__BackingField
    // Size: 0x4
    // Offset: 0x54
    float TwoFitWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Single <TwoFitAtten>k__BackingField
    // Size: 0x4
    // Offset: 0x58
    float TwoFitAtten;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 <N>k__BackingField
    // Size: 0x4
    // Offset: 0x5C
    int N;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private readonly System.Int32[] <PartitionClass>k__BackingField
    ::ArrayW<int>& dyn_$PartitionClass$k__BackingField();
    // Get instance field reference: private readonly System.Int32[] <ClassDimensions>k__BackingField
    ::ArrayW<int>& dyn_$ClassDimensions$k__BackingField();
    // Get instance field reference: private readonly System.Int32[] <ClassSubs>k__BackingField
    ::ArrayW<int>& dyn_$ClassSubs$k__BackingField();
    // Get instance field reference: private readonly System.Int32[] <ClassBook>k__BackingField
    ::ArrayW<int>& dyn_$ClassBook$k__BackingField();
    // Get instance field reference: private readonly System.Int32[][] <ClassSubBook>k__BackingField
    ::ArrayW<::ArrayW<int>>& dyn_$ClassSubBook$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <Mult>k__BackingField
    int& dyn_$Mult$k__BackingField();
    // Get instance field reference: private readonly System.Int32[] <PostList>k__BackingField
    ::ArrayW<int>& dyn_$PostList$k__BackingField();
    // Get instance field reference: private readonly System.Single <MaxOver>k__BackingField
    float& dyn_$MaxOver$k__BackingField();
    // Get instance field reference: private readonly System.Single <MaxUnder>k__BackingField
    float& dyn_$MaxUnder$k__BackingField();
    // Get instance field reference: private readonly System.Single <MaxError>k__BackingField
    float& dyn_$MaxError$k__BackingField();
    // Get instance field reference: private readonly System.Single <TwoFitWeight>k__BackingField
    float& dyn_$TwoFitWeight$k__BackingField();
    // Get instance field reference: private readonly System.Single <TwoFitAtten>k__BackingField
    float& dyn_$TwoFitAtten$k__BackingField();
    // Get instance field reference: private System.Int32 <N>k__BackingField
    int& dyn_$N$k__BackingField();
    // public System.Int32[] get_PartitionClass()
    // Offset: 0x75CD08
    ::ArrayW<int> get_PartitionClass();
    // public System.Int32[] get_ClassDimensions()
    // Offset: 0x75CD10
    ::ArrayW<int> get_ClassDimensions();
    // public System.Int32[] get_ClassSubs()
    // Offset: 0x75CD18
    ::ArrayW<int> get_ClassSubs();
    // public System.Int32[] get_ClassBook()
    // Offset: 0x75CD20
    ::ArrayW<int> get_ClassBook();
    // public System.Int32[][] get_ClassSubBook()
    // Offset: 0x75CD28
    ::ArrayW<::ArrayW<int>> get_ClassSubBook();
    // public System.Int32 get_Mult()
    // Offset: 0x75CD30
    int get_Mult();
    // public System.Int32[] get_PostList()
    // Offset: 0x75CD38
    ::ArrayW<int> get_PostList();
    // public System.Single get_MaxOver()
    // Offset: 0x75CD40
    float get_MaxOver();
    // public System.Single get_MaxUnder()
    // Offset: 0x75CD48
    float get_MaxUnder();
    // public System.Single get_MaxError()
    // Offset: 0x75CD50
    float get_MaxError();
    // public System.Single get_TwoFitWeight()
    // Offset: 0x75CD58
    float get_TwoFitWeight();
    // public System.Single get_TwoFitAtten()
    // Offset: 0x75CD60
    float get_TwoFitAtten();
    // public System.Int32 get_N()
    // Offset: 0x75CD68
    int get_N();
    // public System.Void set_N(System.Int32 value)
    // Offset: 0x75CD70
    void set_N(int value);
    // public System.Void .ctor(System.Int32[] partitionClass, System.Int32[] classDimensions, System.Int32[] classSubs, System.Int32[] classBook, System.Int32[][] classSubBook, System.Int32 mult, System.Int32[] postList, System.Single maxOver, System.Single maxUnder, System.Single maxError, System.Single twoFitWeight, System.Single twoFitAtten, System.Int32 n)
    // Offset: 0x75CC54
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Floor* New_ctor(::ArrayW<int> partitionClass, ::ArrayW<int> classDimensions, ::ArrayW<int> classSubs, ::ArrayW<int> classBook, ::ArrayW<::ArrayW<int>> classSubBook, int mult, ::ArrayW<int> postList, float maxOver, float maxUnder, float maxError, float twoFitWeight, float twoFitAtten, int n) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::Setup::Floor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Floor*, creationType>(partitionClass, classDimensions, classSubs, classBook, classSubBook, mult, postList, maxOver, maxUnder, maxError, twoFitWeight, twoFitAtten, n)));
    }
    // public OggVorbisEncoder.Setup.Floor Clone()
    // Offset: 0x75CD78
    ::OggVorbisEncoder::Setup::Floor* Clone();
  }; // OggVorbisEncoder.Setup.Floor
  #pragma pack(pop)
  static check_size<sizeof(Floor), 92 + sizeof(int)> __OggVorbisEncoder_Setup_FloorSizeCheck;
  static_assert(sizeof(Floor) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Floor::get_PartitionClass
// Il2CppName: get_PartitionClass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (OggVorbisEncoder::Setup::Floor::*)()>(&OggVorbisEncoder::Setup::Floor::get_PartitionClass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Floor*), "get_PartitionClass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Floor::get_ClassDimensions
// Il2CppName: get_ClassDimensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (OggVorbisEncoder::Setup::Floor::*)()>(&OggVorbisEncoder::Setup::Floor::get_ClassDimensions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Floor*), "get_ClassDimensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Floor::get_ClassSubs
// Il2CppName: get_ClassSubs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (OggVorbisEncoder::Setup::Floor::*)()>(&OggVorbisEncoder::Setup::Floor::get_ClassSubs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Floor*), "get_ClassSubs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Floor::get_ClassBook
// Il2CppName: get_ClassBook
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (OggVorbisEncoder::Setup::Floor::*)()>(&OggVorbisEncoder::Setup::Floor::get_ClassBook)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Floor*), "get_ClassBook", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Floor::get_ClassSubBook
// Il2CppName: get_ClassSubBook
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::ArrayW<int>> (OggVorbisEncoder::Setup::Floor::*)()>(&OggVorbisEncoder::Setup::Floor::get_ClassSubBook)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Floor*), "get_ClassSubBook", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Floor::get_Mult
// Il2CppName: get_Mult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::Floor::*)()>(&OggVorbisEncoder::Setup::Floor::get_Mult)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Floor*), "get_Mult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Floor::get_PostList
// Il2CppName: get_PostList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (OggVorbisEncoder::Setup::Floor::*)()>(&OggVorbisEncoder::Setup::Floor::get_PostList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Floor*), "get_PostList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Floor::get_MaxOver
// Il2CppName: get_MaxOver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OggVorbisEncoder::Setup::Floor::*)()>(&OggVorbisEncoder::Setup::Floor::get_MaxOver)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Floor*), "get_MaxOver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Floor::get_MaxUnder
// Il2CppName: get_MaxUnder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OggVorbisEncoder::Setup::Floor::*)()>(&OggVorbisEncoder::Setup::Floor::get_MaxUnder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Floor*), "get_MaxUnder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Floor::get_MaxError
// Il2CppName: get_MaxError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OggVorbisEncoder::Setup::Floor::*)()>(&OggVorbisEncoder::Setup::Floor::get_MaxError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Floor*), "get_MaxError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Floor::get_TwoFitWeight
// Il2CppName: get_TwoFitWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OggVorbisEncoder::Setup::Floor::*)()>(&OggVorbisEncoder::Setup::Floor::get_TwoFitWeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Floor*), "get_TwoFitWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Floor::get_TwoFitAtten
// Il2CppName: get_TwoFitAtten
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OggVorbisEncoder::Setup::Floor::*)()>(&OggVorbisEncoder::Setup::Floor::get_TwoFitAtten)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Floor*), "get_TwoFitAtten", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Floor::get_N
// Il2CppName: get_N
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::Floor::*)()>(&OggVorbisEncoder::Setup::Floor::get_N)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Floor*), "get_N", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Floor::set_N
// Il2CppName: set_N
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::Floor::*)(int)>(&OggVorbisEncoder::Setup::Floor::set_N)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Floor*), "set_N", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Floor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Floor::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OggVorbisEncoder::Setup::Floor* (OggVorbisEncoder::Setup::Floor::*)()>(&OggVorbisEncoder::Setup::Floor::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Floor*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
