// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: OggVorbisEncoder.Setup
namespace OggVorbisEncoder::Setup {
  // Forward declaring type: AdjStereo
  class AdjStereo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::Setup::AdjStereo);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::Setup::AdjStereo*, "OggVorbisEncoder.Setup", "AdjStereo");
// Type namespace: OggVorbisEncoder.Setup
namespace OggVorbisEncoder::Setup {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.Setup.AdjStereo
  // [TokenAttribute] Offset: FFFFFFFF
  class AdjStereo : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.Int32[] <Pre>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<int> Pre;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Int32[] <Post>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> Post;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Single[] <Kilohertz>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<float> Kilohertz;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private readonly System.Single[] <LowPassKilohertz>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<float> LowPassKilohertz;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Get instance field reference: private readonly System.Int32[] <Pre>k__BackingField
    ::ArrayW<int>& dyn_$Pre$k__BackingField();
    // Get instance field reference: private readonly System.Int32[] <Post>k__BackingField
    ::ArrayW<int>& dyn_$Post$k__BackingField();
    // Get instance field reference: private readonly System.Single[] <Kilohertz>k__BackingField
    ::ArrayW<float>& dyn_$Kilohertz$k__BackingField();
    // Get instance field reference: private readonly System.Single[] <LowPassKilohertz>k__BackingField
    ::ArrayW<float>& dyn_$LowPassKilohertz$k__BackingField();
    // public System.Int32[] get_Pre()
    // Offset: 0x743640
    ::ArrayW<int> get_Pre();
    // public System.Int32[] get_Post()
    // Offset: 0x743648
    ::ArrayW<int> get_Post();
    // public System.Single[] get_Kilohertz()
    // Offset: 0x743650
    ::ArrayW<float> get_Kilohertz();
    // public System.Single[] get_LowPassKilohertz()
    // Offset: 0x743658
    ::ArrayW<float> get_LowPassKilohertz();
    // public System.Void .ctor(System.Int32[] pre, System.Int32[] post, System.Single[] kilohertz, System.Single[] lowPassKilohertz)
    // Offset: 0x7435F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdjStereo* New_ctor(::ArrayW<int> pre, ::ArrayW<int> post, ::ArrayW<float> kilohertz, ::ArrayW<float> lowPassKilohertz) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::Setup::AdjStereo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdjStereo*, creationType>(pre, post, kilohertz, lowPassKilohertz)));
    }
  }; // OggVorbisEncoder.Setup.AdjStereo
  #pragma pack(pop)
  static check_size<sizeof(AdjStereo), 40 + sizeof(::ArrayW<float>)> __OggVorbisEncoder_Setup_AdjStereoSizeCheck;
  static_assert(sizeof(AdjStereo) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::AdjStereo::get_Pre
// Il2CppName: get_Pre
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (OggVorbisEncoder::Setup::AdjStereo::*)()>(&OggVorbisEncoder::Setup::AdjStereo::get_Pre)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::AdjStereo*), "get_Pre", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::AdjStereo::get_Post
// Il2CppName: get_Post
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (OggVorbisEncoder::Setup::AdjStereo::*)()>(&OggVorbisEncoder::Setup::AdjStereo::get_Post)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::AdjStereo*), "get_Post", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::AdjStereo::get_Kilohertz
// Il2CppName: get_Kilohertz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (OggVorbisEncoder::Setup::AdjStereo::*)()>(&OggVorbisEncoder::Setup::AdjStereo::get_Kilohertz)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::AdjStereo*), "get_Kilohertz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::AdjStereo::get_LowPassKilohertz
// Il2CppName: get_LowPassKilohertz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (OggVorbisEncoder::Setup::AdjStereo::*)()>(&OggVorbisEncoder::Setup::AdjStereo::get_LowPassKilohertz)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::AdjStereo*), "get_LowPassKilohertz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::AdjStereo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
