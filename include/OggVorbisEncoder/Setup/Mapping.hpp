// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: OggVorbisEncoder.Setup
namespace OggVorbisEncoder::Setup {
  // Forward declaring type: Mapping
  class Mapping;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::Setup::Mapping);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::Setup::Mapping*, "OggVorbisEncoder.Setup", "Mapping");
// Type namespace: OggVorbisEncoder.Setup
namespace OggVorbisEncoder::Setup {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.Setup.Mapping
  // [TokenAttribute] Offset: FFFFFFFF
  class Mapping : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.Int32[] <ChannelMuxList>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<int> ChannelMuxList;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Int32[] <FloorSubMap>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> FloorSubMap;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Int32[] <ResidueSubMap>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<int> ResidueSubMap;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Int32[] <CouplingMag>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<int> CouplingMag;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Int32[] <CouplingAng>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<int> CouplingAng;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    public:
    // Get instance field reference: private readonly System.Int32[] <ChannelMuxList>k__BackingField
    ::ArrayW<int>& dyn_$ChannelMuxList$k__BackingField();
    // Get instance field reference: private readonly System.Int32[] <FloorSubMap>k__BackingField
    ::ArrayW<int>& dyn_$FloorSubMap$k__BackingField();
    // Get instance field reference: private readonly System.Int32[] <ResidueSubMap>k__BackingField
    ::ArrayW<int>& dyn_$ResidueSubMap$k__BackingField();
    // Get instance field reference: private readonly System.Int32[] <CouplingMag>k__BackingField
    ::ArrayW<int>& dyn_$CouplingMag$k__BackingField();
    // Get instance field reference: private readonly System.Int32[] <CouplingAng>k__BackingField
    ::ArrayW<int>& dyn_$CouplingAng$k__BackingField();
    // public System.Int32 get_SubMaps()
    // Offset: 0x764068
    int get_SubMaps();
    // public System.Int32[] get_ChannelMuxList()
    // Offset: 0x76B6CC
    ::ArrayW<int> get_ChannelMuxList();
    // public System.Int32[] get_FloorSubMap()
    // Offset: 0x76B6D4
    ::ArrayW<int> get_FloorSubMap();
    // public System.Int32[] get_ResidueSubMap()
    // Offset: 0x76B6DC
    ::ArrayW<int> get_ResidueSubMap();
    // public System.Int32 get_CouplingSteps()
    // Offset: 0x764084
    int get_CouplingSteps();
    // public System.Int32[] get_CouplingMag()
    // Offset: 0x76B6E4
    ::ArrayW<int> get_CouplingMag();
    // public System.Int32[] get_CouplingAng()
    // Offset: 0x76B6EC
    ::ArrayW<int> get_CouplingAng();
    // public System.Void .ctor(System.Int32[] channelMuxList, System.Int32[] floorSubMap, System.Int32[] residueSubMap, System.Int32[] couplingMag, System.Int32[] couplingAng)
    // Offset: 0x76B4DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Mapping* New_ctor(::ArrayW<int> channelMuxList, ::ArrayW<int> floorSubMap, ::ArrayW<int> residueSubMap, ::ArrayW<int> couplingMag, ::ArrayW<int> couplingAng) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::Setup::Mapping::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Mapping*, creationType>(channelMuxList, floorSubMap, residueSubMap, couplingMag, couplingAng)));
    }
    // public OggVorbisEncoder.Setup.Mapping Clone()
    // Offset: 0x76B6F4
    ::OggVorbisEncoder::Setup::Mapping* Clone();
  }; // OggVorbisEncoder.Setup.Mapping
  #pragma pack(pop)
  static check_size<sizeof(Mapping), 48 + sizeof(::ArrayW<int>)> __OggVorbisEncoder_Setup_MappingSizeCheck;
  static_assert(sizeof(Mapping) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Mapping::get_SubMaps
// Il2CppName: get_SubMaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::Mapping::*)()>(&OggVorbisEncoder::Setup::Mapping::get_SubMaps)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Mapping*), "get_SubMaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Mapping::get_ChannelMuxList
// Il2CppName: get_ChannelMuxList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (OggVorbisEncoder::Setup::Mapping::*)()>(&OggVorbisEncoder::Setup::Mapping::get_ChannelMuxList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Mapping*), "get_ChannelMuxList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Mapping::get_FloorSubMap
// Il2CppName: get_FloorSubMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (OggVorbisEncoder::Setup::Mapping::*)()>(&OggVorbisEncoder::Setup::Mapping::get_FloorSubMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Mapping*), "get_FloorSubMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Mapping::get_ResidueSubMap
// Il2CppName: get_ResidueSubMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (OggVorbisEncoder::Setup::Mapping::*)()>(&OggVorbisEncoder::Setup::Mapping::get_ResidueSubMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Mapping*), "get_ResidueSubMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Mapping::get_CouplingSteps
// Il2CppName: get_CouplingSteps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::Mapping::*)()>(&OggVorbisEncoder::Setup::Mapping::get_CouplingSteps)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Mapping*), "get_CouplingSteps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Mapping::get_CouplingMag
// Il2CppName: get_CouplingMag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (OggVorbisEncoder::Setup::Mapping::*)()>(&OggVorbisEncoder::Setup::Mapping::get_CouplingMag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Mapping*), "get_CouplingMag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Mapping::get_CouplingAng
// Il2CppName: get_CouplingAng
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (OggVorbisEncoder::Setup::Mapping::*)()>(&OggVorbisEncoder::Setup::Mapping::get_CouplingAng)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Mapping*), "get_CouplingAng", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Mapping::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Mapping::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OggVorbisEncoder::Setup::Mapping* (OggVorbisEncoder::Setup::Mapping::*)()>(&OggVorbisEncoder::Setup::Mapping::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Mapping*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
