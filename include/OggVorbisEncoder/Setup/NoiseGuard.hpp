// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: OggVorbisEncoder.Setup
namespace OggVorbisEncoder::Setup {
  // Forward declaring type: NoiseGuard
  class NoiseGuard;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::Setup::NoiseGuard);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::Setup::NoiseGuard*, "OggVorbisEncoder.Setup", "NoiseGuard");
// Type namespace: OggVorbisEncoder.Setup
namespace OggVorbisEncoder::Setup {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.Setup.NoiseGuard
  // [TokenAttribute] Offset: FFFFFFFF
  class NoiseGuard : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.Int32 <Low>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int Low;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <High>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int High;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <Fixed>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int Fixed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private readonly System.Int32 <Low>k__BackingField
    int& dyn_$Low$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <High>k__BackingField
    int& dyn_$High$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <Fixed>k__BackingField
    int& dyn_$Fixed$k__BackingField();
    // public System.Int32 get_Low()
    // Offset: 0x7746C0
    int get_Low();
    // public System.Int32 get_High()
    // Offset: 0x7746C8
    int get_High();
    // public System.Int32 get_Fixed()
    // Offset: 0x7746D0
    int get_Fixed();
    // public System.Void .ctor(System.Int32 low, System.Int32 high, System.Int32 fix)
    // Offset: 0x774680
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoiseGuard* New_ctor(int low, int high, int fix) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::Setup::NoiseGuard::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoiseGuard*, creationType>(low, high, fix)));
    }
  }; // OggVorbisEncoder.Setup.NoiseGuard
  #pragma pack(pop)
  static check_size<sizeof(NoiseGuard), 24 + sizeof(int)> __OggVorbisEncoder_Setup_NoiseGuardSizeCheck;
  static_assert(sizeof(NoiseGuard) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::NoiseGuard::get_Low
// Il2CppName: get_Low
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::NoiseGuard::*)()>(&OggVorbisEncoder::Setup::NoiseGuard::get_Low)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::NoiseGuard*), "get_Low", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::NoiseGuard::get_High
// Il2CppName: get_High
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::NoiseGuard::*)()>(&OggVorbisEncoder::Setup::NoiseGuard::get_High)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::NoiseGuard*), "get_High", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::NoiseGuard::get_Fixed
// Il2CppName: get_Fixed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::NoiseGuard::*)()>(&OggVorbisEncoder::Setup::NoiseGuard::get_Fixed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::NoiseGuard*), "get_Fixed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::NoiseGuard::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
