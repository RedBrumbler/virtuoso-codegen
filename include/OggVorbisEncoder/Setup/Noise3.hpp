// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: OggVorbisEncoder.Setup
namespace OggVorbisEncoder::Setup {
  // Forward declaring type: Noise3
  class Noise3;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::Setup::Noise3);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::Setup::Noise3*, "OggVorbisEncoder.Setup", "Noise3");
// Type namespace: OggVorbisEncoder.Setup
namespace OggVorbisEncoder::Setup {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.Setup.Noise3
  // [TokenAttribute] Offset: FFFFFFFF
  class Noise3 : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.Int32[][] <Data>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::ArrayW<int>> Data;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<int>>) == 0x8);
    public:
    // Creating conversion operator: operator ::ArrayW<::ArrayW<int>>
    constexpr operator ::ArrayW<::ArrayW<int>>() const noexcept {
      return Data;
    }
    // Get instance field reference: private readonly System.Int32[][] <Data>k__BackingField
    ::ArrayW<::ArrayW<int>>& dyn_$Data$k__BackingField();
    // public System.Int32[][] get_Data()
    // Offset: 0x774678
    ::ArrayW<::ArrayW<int>> get_Data();
    // public System.Void .ctor(System.Int32[][] data)
    // Offset: 0x77464C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Noise3* New_ctor(::ArrayW<::ArrayW<int>> data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::Setup::Noise3::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Noise3*, creationType>(data)));
    }
  }; // OggVorbisEncoder.Setup.Noise3
  #pragma pack(pop)
  static check_size<sizeof(Noise3), 16 + sizeof(::ArrayW<::ArrayW<int>>)> __OggVorbisEncoder_Setup_Noise3SizeCheck;
  static_assert(sizeof(Noise3) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Noise3::get_Data
// Il2CppName: get_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::ArrayW<int>> (OggVorbisEncoder::Setup::Noise3::*)()>(&OggVorbisEncoder::Setup::Noise3::get_Data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::Noise3*), "get_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::Noise3::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
