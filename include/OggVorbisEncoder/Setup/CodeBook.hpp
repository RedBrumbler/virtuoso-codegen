// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OggVorbisEncoder::Setup
namespace OggVorbisEncoder::Setup {
  // Forward declaring type: IStaticCodeBook
  class IStaticCodeBook;
}
// Completed forward declares
// Type namespace: OggVorbisEncoder.Setup
namespace OggVorbisEncoder::Setup {
  // Forward declaring type: CodeBook
  class CodeBook;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::Setup::CodeBook);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::Setup::CodeBook*, "OggVorbisEncoder.Setup", "CodeBook");
// Type namespace: OggVorbisEncoder.Setup
namespace OggVorbisEncoder::Setup {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.Setup.CodeBook
  // [TokenAttribute] Offset: FFFFFFFF
  class CodeBook : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.Int32 <Dimensions>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int Dimensions;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <Entries>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int Entries;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <UsedEntries>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int UsedEntries;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: UsedEntries and: StaticBook
    char __padding2[0x4] = {};
    // private readonly OggVorbisEncoder.Setup.IStaticCodeBook <StaticBook>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::OggVorbisEncoder::Setup::IStaticCodeBook* StaticBook;
    // Field size check
    static_assert(sizeof(::OggVorbisEncoder::Setup::IStaticCodeBook*) == 0x8);
    // private readonly System.Single[] <ValueList>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<float> ValueList;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private readonly System.UInt32[] <CodeList>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<uint> CodeList;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // private readonly System.Int32[] <DecIndex>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<int> DecIndex;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Byte[] <DecCodeLengths>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<uint8_t> DecCodeLengths;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private readonly System.UInt32[] <DecFirstTable>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<uint> DecFirstTable;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // private readonly System.Int32 <DecFirstTableN>k__BackingField
    // Size: 0x4
    // Offset: 0x50
    int DecFirstTableN;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <DecMaxLength>k__BackingField
    // Size: 0x4
    // Offset: 0x54
    int DecMaxLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <QuantValues>k__BackingField
    // Size: 0x4
    // Offset: 0x58
    int QuantValues;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <MinVal>k__BackingField
    // Size: 0x4
    // Offset: 0x5C
    int MinVal;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <Delta>k__BackingField
    // Size: 0x4
    // Offset: 0x60
    int Delta;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private readonly System.Int32 <Dimensions>k__BackingField
    int& dyn_$Dimensions$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <Entries>k__BackingField
    int& dyn_$Entries$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <UsedEntries>k__BackingField
    int& dyn_$UsedEntries$k__BackingField();
    // Get instance field reference: private readonly OggVorbisEncoder.Setup.IStaticCodeBook <StaticBook>k__BackingField
    ::OggVorbisEncoder::Setup::IStaticCodeBook*& dyn_$StaticBook$k__BackingField();
    // Get instance field reference: private readonly System.Single[] <ValueList>k__BackingField
    ::ArrayW<float>& dyn_$ValueList$k__BackingField();
    // Get instance field reference: private readonly System.UInt32[] <CodeList>k__BackingField
    ::ArrayW<uint>& dyn_$CodeList$k__BackingField();
    // Get instance field reference: private readonly System.Int32[] <DecIndex>k__BackingField
    ::ArrayW<int>& dyn_$DecIndex$k__BackingField();
    // Get instance field reference: private readonly System.Byte[] <DecCodeLengths>k__BackingField
    ::ArrayW<uint8_t>& dyn_$DecCodeLengths$k__BackingField();
    // Get instance field reference: private readonly System.UInt32[] <DecFirstTable>k__BackingField
    ::ArrayW<uint>& dyn_$DecFirstTable$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <DecFirstTableN>k__BackingField
    int& dyn_$DecFirstTableN$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <DecMaxLength>k__BackingField
    int& dyn_$DecMaxLength$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <QuantValues>k__BackingField
    int& dyn_$QuantValues$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <MinVal>k__BackingField
    int& dyn_$MinVal$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <Delta>k__BackingField
    int& dyn_$Delta$k__BackingField();
    // public System.Int32 get_Dimensions()
    // Offset: 0x749F68
    int get_Dimensions();
    // public System.Int32 get_Entries()
    // Offset: 0x749F70
    int get_Entries();
    // public System.Int32 get_UsedEntries()
    // Offset: 0x749F78
    int get_UsedEntries();
    // public OggVorbisEncoder.Setup.IStaticCodeBook get_StaticBook()
    // Offset: 0x749F80
    ::OggVorbisEncoder::Setup::IStaticCodeBook* get_StaticBook();
    // public System.Single[] get_ValueList()
    // Offset: 0x749F88
    ::ArrayW<float> get_ValueList();
    // public System.UInt32[] get_CodeList()
    // Offset: 0x749F90
    ::ArrayW<uint> get_CodeList();
    // public System.Int32[] get_DecIndex()
    // Offset: 0x749F98
    ::ArrayW<int> get_DecIndex();
    // public System.Byte[] get_DecCodeLengths()
    // Offset: 0x749FA0
    ::ArrayW<uint8_t> get_DecCodeLengths();
    // public System.UInt32[] get_DecFirstTable()
    // Offset: 0x749FA8
    ::ArrayW<uint> get_DecFirstTable();
    // public System.Int32 get_DecFirstTableN()
    // Offset: 0x749FB0
    int get_DecFirstTableN();
    // public System.Int32 get_DecMaxLength()
    // Offset: 0x749FB8
    int get_DecMaxLength();
    // public System.Int32 get_QuantValues()
    // Offset: 0x749FC0
    int get_QuantValues();
    // public System.Int32 get_MinVal()
    // Offset: 0x749FC8
    int get_MinVal();
    // public System.Int32 get_Delta()
    // Offset: 0x749FD0
    int get_Delta();
    // public System.Void .ctor(System.Int32 dimensions, System.Int32 entries, System.Int32 usedEntries, OggVorbisEncoder.Setup.IStaticCodeBook staticBook, System.Single[] valueList, System.UInt32[] codeList, System.Int32[] decIndex, System.Byte[] decCodeLengths, System.UInt32[] decFirstTable, System.Int32 decFirstTableN, System.Int32 decMaxLength, System.Int32 quantValues, System.Int32 minVal, System.Int32 delta)
    // Offset: 0x749EA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CodeBook* New_ctor(int dimensions, int entries, int usedEntries, ::OggVorbisEncoder::Setup::IStaticCodeBook* staticBook, ::ArrayW<float> valueList, ::ArrayW<uint> codeList, ::ArrayW<int> decIndex, ::ArrayW<uint8_t> decCodeLengths, ::ArrayW<uint> decFirstTable, int decFirstTableN, int decMaxLength, int quantValues, int minVal, int delta) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::Setup::CodeBook::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CodeBook*, creationType>(dimensions, entries, usedEntries, staticBook, valueList, codeList, decIndex, decCodeLengths, decFirstTable, decFirstTableN, decMaxLength, quantValues, minVal, delta)));
    }
    // static public OggVorbisEncoder.Setup.CodeBook InitEncode(OggVorbisEncoder.Setup.IStaticCodeBook source)
    // Offset: 0x749FD8
    static ::OggVorbisEncoder::Setup::CodeBook* InitEncode(::OggVorbisEncoder::Setup::IStaticCodeBook* source);
  }; // OggVorbisEncoder.Setup.CodeBook
  #pragma pack(pop)
  static check_size<sizeof(CodeBook), 96 + sizeof(int)> __OggVorbisEncoder_Setup_CodeBookSizeCheck;
  static_assert(sizeof(CodeBook) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::CodeBook::get_Dimensions
// Il2CppName: get_Dimensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::CodeBook::*)()>(&OggVorbisEncoder::Setup::CodeBook::get_Dimensions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::CodeBook*), "get_Dimensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::CodeBook::get_Entries
// Il2CppName: get_Entries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::CodeBook::*)()>(&OggVorbisEncoder::Setup::CodeBook::get_Entries)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::CodeBook*), "get_Entries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::CodeBook::get_UsedEntries
// Il2CppName: get_UsedEntries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::CodeBook::*)()>(&OggVorbisEncoder::Setup::CodeBook::get_UsedEntries)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::CodeBook*), "get_UsedEntries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::CodeBook::get_StaticBook
// Il2CppName: get_StaticBook
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OggVorbisEncoder::Setup::IStaticCodeBook* (OggVorbisEncoder::Setup::CodeBook::*)()>(&OggVorbisEncoder::Setup::CodeBook::get_StaticBook)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::CodeBook*), "get_StaticBook", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::CodeBook::get_ValueList
// Il2CppName: get_ValueList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (OggVorbisEncoder::Setup::CodeBook::*)()>(&OggVorbisEncoder::Setup::CodeBook::get_ValueList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::CodeBook*), "get_ValueList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::CodeBook::get_CodeList
// Il2CppName: get_CodeList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (OggVorbisEncoder::Setup::CodeBook::*)()>(&OggVorbisEncoder::Setup::CodeBook::get_CodeList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::CodeBook*), "get_CodeList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::CodeBook::get_DecIndex
// Il2CppName: get_DecIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (OggVorbisEncoder::Setup::CodeBook::*)()>(&OggVorbisEncoder::Setup::CodeBook::get_DecIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::CodeBook*), "get_DecIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::CodeBook::get_DecCodeLengths
// Il2CppName: get_DecCodeLengths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (OggVorbisEncoder::Setup::CodeBook::*)()>(&OggVorbisEncoder::Setup::CodeBook::get_DecCodeLengths)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::CodeBook*), "get_DecCodeLengths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::CodeBook::get_DecFirstTable
// Il2CppName: get_DecFirstTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (OggVorbisEncoder::Setup::CodeBook::*)()>(&OggVorbisEncoder::Setup::CodeBook::get_DecFirstTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::CodeBook*), "get_DecFirstTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::CodeBook::get_DecFirstTableN
// Il2CppName: get_DecFirstTableN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::CodeBook::*)()>(&OggVorbisEncoder::Setup::CodeBook::get_DecFirstTableN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::CodeBook*), "get_DecFirstTableN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::CodeBook::get_DecMaxLength
// Il2CppName: get_DecMaxLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::CodeBook::*)()>(&OggVorbisEncoder::Setup::CodeBook::get_DecMaxLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::CodeBook*), "get_DecMaxLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::CodeBook::get_QuantValues
// Il2CppName: get_QuantValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::CodeBook::*)()>(&OggVorbisEncoder::Setup::CodeBook::get_QuantValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::CodeBook*), "get_QuantValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::CodeBook::get_MinVal
// Il2CppName: get_MinVal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::CodeBook::*)()>(&OggVorbisEncoder::Setup::CodeBook::get_MinVal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::CodeBook*), "get_MinVal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::CodeBook::get_Delta
// Il2CppName: get_Delta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::CodeBook::*)()>(&OggVorbisEncoder::Setup::CodeBook::get_Delta)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::CodeBook*), "get_Delta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::CodeBook::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::CodeBook::InitEncode
// Il2CppName: InitEncode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OggVorbisEncoder::Setup::CodeBook* (*)(::OggVorbisEncoder::Setup::IStaticCodeBook*)>(&OggVorbisEncoder::Setup::CodeBook::InitEncode)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("OggVorbisEncoder.Setup", "IStaticCodeBook")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::CodeBook*), "InitEncode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
