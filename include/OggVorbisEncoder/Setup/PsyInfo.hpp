// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OggVorbisEncoder::Setup
namespace OggVorbisEncoder::Setup {
}
// Completed forward declares
// Type namespace: OggVorbisEncoder.Setup
namespace OggVorbisEncoder::Setup {
  // Forward declaring type: PsyInfo
  class PsyInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::Setup::PsyInfo);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::Setup::PsyInfo*, "OggVorbisEncoder.Setup", "PsyInfo");
// Type namespace: OggVorbisEncoder.Setup
namespace OggVorbisEncoder::Setup {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.Setup.PsyInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class PsyInfo : public ::Il2CppObject {
    public:
    // Nested type: ::OggVorbisEncoder::Setup::PsyInfo::$$c
    class $$c;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Single[] _noiseCompand
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<float> noiseCompand;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single[][] _noiseOffset
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::ArrayW<float>> noiseOffset;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<float>>) == 0x8);
    // private System.Single[] _toneAtt
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<float> toneAtt;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single[] _toneMasterAtt
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<float> toneMasterAtt;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Int32 <BlockFlag>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    int BlockFlag;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single <AthAdjAtt>k__BackingField
    // Size: 0x4
    // Offset: 0x34
    float AthAdjAtt;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <AthMaxAtt>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    float AthMaxAtt;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <ToneCenterBoost>k__BackingField
    // Size: 0x4
    // Offset: 0x3C
    float ToneCenterBoost;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <ToneDecay>k__BackingField
    // Size: 0x4
    // Offset: 0x40
    float ToneDecay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <ToneAbsLimit>k__BackingField
    // Size: 0x4
    // Offset: 0x44
    float ToneAbsLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Int32 <NoiseMaskP>k__BackingField
    // Size: 0x4
    // Offset: 0x48
    int NoiseMaskP;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single <NoiseMaxSuppress>k__BackingField
    // Size: 0x4
    // Offset: 0x4C
    float NoiseMaxSuppress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Single <NoiseWindowLow>k__BackingField
    // Size: 0x4
    // Offset: 0x50
    float NoiseWindowLow;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Single <NoiseWindowHigh>k__BackingField
    // Size: 0x4
    // Offset: 0x54
    float NoiseWindowHigh;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 <NoiseWindowLowMin>k__BackingField
    // Size: 0x4
    // Offset: 0x58
    int NoiseWindowLowMin;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <NoiseWindowHighMin>k__BackingField
    // Size: 0x4
    // Offset: 0x5C
    int NoiseWindowHighMin;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <NoiseWindowFixed>k__BackingField
    // Size: 0x4
    // Offset: 0x60
    int NoiseWindowFixed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single <MaxCurveDecibel>k__BackingField
    // Size: 0x4
    // Offset: 0x64
    float MaxCurveDecibel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <Normalize>k__BackingField
    // Size: 0x1
    // Offset: 0x68
    bool Normalize;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Normalize and: NormalStart
    char __padding18[0x3] = {};
    // private System.Int32 <NormalStart>k__BackingField
    // Size: 0x4
    // Offset: 0x6C
    int NormalStart;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <NormalPartition>k__BackingField
    // Size: 0x4
    // Offset: 0x70
    int NormalPartition;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: NormalPartition and: NormalThreshold
    char __padding20[0x4] = {};
    // private System.Double <NormalThreshold>k__BackingField
    // Size: 0x8
    // Offset: 0x78
    double NormalThreshold;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // static field const value: static public System.Int32 Bands
    static constexpr const int Bands = 17;
    // Get static field: static public System.Int32 Bands
    static int _get_Bands();
    // Set static field: static public System.Int32 Bands
    static void _set_Bands(int value);
    // static field const value: static private System.Int32 NoiseCompandLevels
    static constexpr const int NoiseCompandLevels = 40;
    // Get static field: static private System.Int32 NoiseCompandLevels
    static int _get_NoiseCompandLevels();
    // Set static field: static private System.Int32 NoiseCompandLevels
    static void _set_NoiseCompandLevels(int value);
    // static field const value: static private System.Int32 NoiseCurves
    static constexpr const int NoiseCurves = 3;
    // Get static field: static private System.Int32 NoiseCurves
    static int _get_NoiseCurves();
    // Set static field: static private System.Int32 NoiseCurves
    static void _set_NoiseCurves(int value);
    // Get instance field reference: private System.Single[] _noiseCompand
    ::ArrayW<float>& dyn__noiseCompand();
    // Get instance field reference: private System.Single[][] _noiseOffset
    ::ArrayW<::ArrayW<float>>& dyn__noiseOffset();
    // Get instance field reference: private System.Single[] _toneAtt
    ::ArrayW<float>& dyn__toneAtt();
    // Get instance field reference: private System.Single[] _toneMasterAtt
    ::ArrayW<float>& dyn__toneMasterAtt();
    // Get instance field reference: private System.Int32 <BlockFlag>k__BackingField
    int& dyn_$BlockFlag$k__BackingField();
    // Get instance field reference: private System.Single <AthAdjAtt>k__BackingField
    float& dyn_$AthAdjAtt$k__BackingField();
    // Get instance field reference: private System.Single <AthMaxAtt>k__BackingField
    float& dyn_$AthMaxAtt$k__BackingField();
    // Get instance field reference: private System.Single <ToneCenterBoost>k__BackingField
    float& dyn_$ToneCenterBoost$k__BackingField();
    // Get instance field reference: private System.Single <ToneDecay>k__BackingField
    float& dyn_$ToneDecay$k__BackingField();
    // Get instance field reference: private System.Single <ToneAbsLimit>k__BackingField
    float& dyn_$ToneAbsLimit$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <NoiseMaskP>k__BackingField
    int& dyn_$NoiseMaskP$k__BackingField();
    // Get instance field reference: private System.Single <NoiseMaxSuppress>k__BackingField
    float& dyn_$NoiseMaxSuppress$k__BackingField();
    // Get instance field reference: private readonly System.Single <NoiseWindowLow>k__BackingField
    float& dyn_$NoiseWindowLow$k__BackingField();
    // Get instance field reference: private readonly System.Single <NoiseWindowHigh>k__BackingField
    float& dyn_$NoiseWindowHigh$k__BackingField();
    // Get instance field reference: private System.Int32 <NoiseWindowLowMin>k__BackingField
    int& dyn_$NoiseWindowLowMin$k__BackingField();
    // Get instance field reference: private System.Int32 <NoiseWindowHighMin>k__BackingField
    int& dyn_$NoiseWindowHighMin$k__BackingField();
    // Get instance field reference: private System.Int32 <NoiseWindowFixed>k__BackingField
    int& dyn_$NoiseWindowFixed$k__BackingField();
    // Get instance field reference: private System.Single <MaxCurveDecibel>k__BackingField
    float& dyn_$MaxCurveDecibel$k__BackingField();
    // Get instance field reference: private System.Boolean <Normalize>k__BackingField
    bool& dyn_$Normalize$k__BackingField();
    // Get instance field reference: private System.Int32 <NormalStart>k__BackingField
    int& dyn_$NormalStart$k__BackingField();
    // Get instance field reference: private System.Int32 <NormalPartition>k__BackingField
    int& dyn_$NormalPartition$k__BackingField();
    // Get instance field reference: private System.Double <NormalThreshold>k__BackingField
    double& dyn_$NormalThreshold$k__BackingField();
    // public System.Int32 get_BlockFlag()
    // Offset: 0x79C55C
    int get_BlockFlag();
    // public System.Void set_BlockFlag(System.Int32 value)
    // Offset: 0x79C564
    void set_BlockFlag(int value);
    // public System.Single get_AthAdjAtt()
    // Offset: 0x79C56C
    float get_AthAdjAtt();
    // public System.Void set_AthAdjAtt(System.Single value)
    // Offset: 0x79C574
    void set_AthAdjAtt(float value);
    // public System.Single get_AthMaxAtt()
    // Offset: 0x79C57C
    float get_AthMaxAtt();
    // public System.Void set_AthMaxAtt(System.Single value)
    // Offset: 0x79C584
    void set_AthMaxAtt(float value);
    // public System.Single[] get_ToneMasterAtt()
    // Offset: 0x79C58C
    ::ArrayW<float> get_ToneMasterAtt();
    // private System.Void set_ToneMasterAtt(System.Single[] value)
    // Offset: 0x79C2C8
    void set_ToneMasterAtt(::ArrayW<float> value);
    // public System.Single get_ToneCenterBoost()
    // Offset: 0x79C594
    float get_ToneCenterBoost();
    // public System.Void set_ToneCenterBoost(System.Single value)
    // Offset: 0x79C59C
    void set_ToneCenterBoost(float value);
    // public System.Single get_ToneDecay()
    // Offset: 0x79C5A4
    float get_ToneDecay();
    // public System.Void set_ToneDecay(System.Single value)
    // Offset: 0x79C5AC
    void set_ToneDecay(float value);
    // public System.Single get_ToneAbsLimit()
    // Offset: 0x79C5B4
    float get_ToneAbsLimit();
    // public System.Void set_ToneAbsLimit(System.Single value)
    // Offset: 0x79C5BC
    void set_ToneAbsLimit(float value);
    // public System.Single[] get_ToneAtt()
    // Offset: 0x79C5C4
    ::ArrayW<float> get_ToneAtt();
    // private System.Void set_ToneAtt(System.Single[] value)
    // Offset: 0x79C32C
    void set_ToneAtt(::ArrayW<float> value);
    // public System.Int32 get_NoiseMaskP()
    // Offset: 0x79C5CC
    int get_NoiseMaskP();
    // public System.Single get_NoiseMaxSuppress()
    // Offset: 0x79C5D4
    float get_NoiseMaxSuppress();
    // public System.Void set_NoiseMaxSuppress(System.Single value)
    // Offset: 0x79C5DC
    void set_NoiseMaxSuppress(float value);
    // public System.Single get_NoiseWindowLow()
    // Offset: 0x79C5E4
    float get_NoiseWindowLow();
    // public System.Single get_NoiseWindowHigh()
    // Offset: 0x79C5EC
    float get_NoiseWindowHigh();
    // public System.Int32 get_NoiseWindowLowMin()
    // Offset: 0x79C5F4
    int get_NoiseWindowLowMin();
    // public System.Void set_NoiseWindowLowMin(System.Int32 value)
    // Offset: 0x79C5FC
    void set_NoiseWindowLowMin(int value);
    // public System.Int32 get_NoiseWindowHighMin()
    // Offset: 0x79C604
    int get_NoiseWindowHighMin();
    // public System.Void set_NoiseWindowHighMin(System.Int32 value)
    // Offset: 0x79C60C
    void set_NoiseWindowHighMin(int value);
    // public System.Int32 get_NoiseWindowFixed()
    // Offset: 0x79C614
    int get_NoiseWindowFixed();
    // public System.Void set_NoiseWindowFixed(System.Int32 value)
    // Offset: 0x79C61C
    void set_NoiseWindowFixed(int value);
    // public System.Single[][] get_NoiseOffset()
    // Offset: 0x79C624
    ::ArrayW<::ArrayW<float>> get_NoiseOffset();
    // private System.Void set_NoiseOffset(System.Single[][] value)
    // Offset: 0x79C390
    void set_NoiseOffset(::ArrayW<::ArrayW<float>> value);
    // public System.Single[] get_NoiseCompand()
    // Offset: 0x79C62C
    ::ArrayW<float> get_NoiseCompand();
    // private System.Void set_NoiseCompand(System.Single[] value)
    // Offset: 0x79C4F8
    void set_NoiseCompand(::ArrayW<float> value);
    // public System.Single get_MaxCurveDecibel()
    // Offset: 0x79C634
    float get_MaxCurveDecibel();
    // public System.Void set_MaxCurveDecibel(System.Single value)
    // Offset: 0x79C63C
    void set_MaxCurveDecibel(float value);
    // public System.Boolean get_Normalize()
    // Offset: 0x79C644
    bool get_Normalize();
    // public System.Void set_Normalize(System.Boolean value)
    // Offset: 0x79C64C
    void set_Normalize(bool value);
    // public System.Int32 get_NormalStart()
    // Offset: 0x79C658
    int get_NormalStart();
    // public System.Void set_NormalStart(System.Int32 value)
    // Offset: 0x79C660
    void set_NormalStart(int value);
    // public System.Int32 get_NormalPartition()
    // Offset: 0x79C668
    int get_NormalPartition();
    // public System.Void set_NormalPartition(System.Int32 value)
    // Offset: 0x79C670
    void set_NormalPartition(int value);
    // public System.Double get_NormalThreshold()
    // Offset: 0x79C678
    double get_NormalThreshold();
    // public System.Void set_NormalThreshold(System.Double value)
    // Offset: 0x79C680
    void set_NormalThreshold(double value);
    // public System.Void .ctor(System.Int32 blockFlag, System.Single athAdjAtt, System.Single athMaxAtt, System.Single[] toneMasterAtt, System.Single toneCenterBoost, System.Single toneDecay, System.Single toneAbsLimit, System.Single[] toneAtt, System.Int32 noiseMaskP, System.Single noiseMaxSuppress, System.Single noiseWindowLow, System.Single noiseWindowHigh, System.Int32 noiseWindowLowMin, System.Int32 noiseWindowHighMin, System.Int32 noiseWindowFixed, System.Single[][] noiseOffset, System.Single[] noiseCompand, System.Single maxCurveDecibel, System.Boolean normalize, System.Int32 normalStart, System.Int32 normalPartition, System.Double normalThreshold)
    // Offset: 0x7996EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PsyInfo* New_ctor(int blockFlag, float athAdjAtt, float athMaxAtt, ::ArrayW<float> toneMasterAtt, float toneCenterBoost, float toneDecay, float toneAbsLimit, ::ArrayW<float> toneAtt, int noiseMaskP, float noiseMaxSuppress, float noiseWindowLow, float noiseWindowHigh, int noiseWindowLowMin, int noiseWindowHighMin, int noiseWindowFixed, ::ArrayW<::ArrayW<float>> noiseOffset, ::ArrayW<float> noiseCompand, float maxCurveDecibel, bool normalize, int normalStart, int normalPartition, double normalThreshold) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::Setup::PsyInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PsyInfo*, creationType>(blockFlag, athAdjAtt, athMaxAtt, toneMasterAtt, toneCenterBoost, toneDecay, toneAbsLimit, toneAtt, noiseMaskP, noiseMaxSuppress, noiseWindowLow, noiseWindowHigh, noiseWindowLowMin, noiseWindowHighMin, noiseWindowFixed, noiseOffset, noiseCompand, maxCurveDecibel, normalize, normalStart, normalPartition, normalThreshold)));
    }
    // public OggVorbisEncoder.Setup.PsyInfo Clone()
    // Offset: 0x79C688
    ::OggVorbisEncoder::Setup::PsyInfo* Clone();
  }; // OggVorbisEncoder.Setup.PsyInfo
  #pragma pack(pop)
  static check_size<sizeof(PsyInfo), 120 + sizeof(double)> __OggVorbisEncoder_Setup_PsyInfoSizeCheck;
  static_assert(sizeof(PsyInfo) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_BlockFlag
// Il2CppName: get_BlockFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_BlockFlag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_BlockFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_BlockFlag
// Il2CppName: set_BlockFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(int)>(&OggVorbisEncoder::Setup::PsyInfo::set_BlockFlag)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_BlockFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_AthAdjAtt
// Il2CppName: get_AthAdjAtt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_AthAdjAtt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_AthAdjAtt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_AthAdjAtt
// Il2CppName: set_AthAdjAtt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(float)>(&OggVorbisEncoder::Setup::PsyInfo::set_AthAdjAtt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_AthAdjAtt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_AthMaxAtt
// Il2CppName: get_AthMaxAtt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_AthMaxAtt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_AthMaxAtt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_AthMaxAtt
// Il2CppName: set_AthMaxAtt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(float)>(&OggVorbisEncoder::Setup::PsyInfo::set_AthMaxAtt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_AthMaxAtt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_ToneMasterAtt
// Il2CppName: get_ToneMasterAtt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_ToneMasterAtt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_ToneMasterAtt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_ToneMasterAtt
// Il2CppName: set_ToneMasterAtt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(::ArrayW<float>)>(&OggVorbisEncoder::Setup::PsyInfo::set_ToneMasterAtt)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_ToneMasterAtt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_ToneCenterBoost
// Il2CppName: get_ToneCenterBoost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_ToneCenterBoost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_ToneCenterBoost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_ToneCenterBoost
// Il2CppName: set_ToneCenterBoost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(float)>(&OggVorbisEncoder::Setup::PsyInfo::set_ToneCenterBoost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_ToneCenterBoost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_ToneDecay
// Il2CppName: get_ToneDecay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_ToneDecay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_ToneDecay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_ToneDecay
// Il2CppName: set_ToneDecay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(float)>(&OggVorbisEncoder::Setup::PsyInfo::set_ToneDecay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_ToneDecay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_ToneAbsLimit
// Il2CppName: get_ToneAbsLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_ToneAbsLimit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_ToneAbsLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_ToneAbsLimit
// Il2CppName: set_ToneAbsLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(float)>(&OggVorbisEncoder::Setup::PsyInfo::set_ToneAbsLimit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_ToneAbsLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_ToneAtt
// Il2CppName: get_ToneAtt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_ToneAtt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_ToneAtt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_ToneAtt
// Il2CppName: set_ToneAtt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(::ArrayW<float>)>(&OggVorbisEncoder::Setup::PsyInfo::set_ToneAtt)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_ToneAtt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_NoiseMaskP
// Il2CppName: get_NoiseMaskP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_NoiseMaskP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_NoiseMaskP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_NoiseMaxSuppress
// Il2CppName: get_NoiseMaxSuppress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_NoiseMaxSuppress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_NoiseMaxSuppress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_NoiseMaxSuppress
// Il2CppName: set_NoiseMaxSuppress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(float)>(&OggVorbisEncoder::Setup::PsyInfo::set_NoiseMaxSuppress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_NoiseMaxSuppress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_NoiseWindowLow
// Il2CppName: get_NoiseWindowLow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_NoiseWindowLow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_NoiseWindowLow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_NoiseWindowHigh
// Il2CppName: get_NoiseWindowHigh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_NoiseWindowHigh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_NoiseWindowHigh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_NoiseWindowLowMin
// Il2CppName: get_NoiseWindowLowMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_NoiseWindowLowMin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_NoiseWindowLowMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_NoiseWindowLowMin
// Il2CppName: set_NoiseWindowLowMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(int)>(&OggVorbisEncoder::Setup::PsyInfo::set_NoiseWindowLowMin)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_NoiseWindowLowMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_NoiseWindowHighMin
// Il2CppName: get_NoiseWindowHighMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_NoiseWindowHighMin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_NoiseWindowHighMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_NoiseWindowHighMin
// Il2CppName: set_NoiseWindowHighMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(int)>(&OggVorbisEncoder::Setup::PsyInfo::set_NoiseWindowHighMin)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_NoiseWindowHighMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_NoiseWindowFixed
// Il2CppName: get_NoiseWindowFixed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_NoiseWindowFixed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_NoiseWindowFixed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_NoiseWindowFixed
// Il2CppName: set_NoiseWindowFixed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(int)>(&OggVorbisEncoder::Setup::PsyInfo::set_NoiseWindowFixed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_NoiseWindowFixed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_NoiseOffset
// Il2CppName: get_NoiseOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::ArrayW<float>> (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_NoiseOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_NoiseOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_NoiseOffset
// Il2CppName: set_NoiseOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(::ArrayW<::ArrayW<float>>)>(&OggVorbisEncoder::Setup::PsyInfo::set_NoiseOffset)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_NoiseOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_NoiseCompand
// Il2CppName: get_NoiseCompand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_NoiseCompand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_NoiseCompand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_NoiseCompand
// Il2CppName: set_NoiseCompand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(::ArrayW<float>)>(&OggVorbisEncoder::Setup::PsyInfo::set_NoiseCompand)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_NoiseCompand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_MaxCurveDecibel
// Il2CppName: get_MaxCurveDecibel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_MaxCurveDecibel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_MaxCurveDecibel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_MaxCurveDecibel
// Il2CppName: set_MaxCurveDecibel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(float)>(&OggVorbisEncoder::Setup::PsyInfo::set_MaxCurveDecibel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_MaxCurveDecibel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_Normalize
// Il2CppName: get_Normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_Normalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_Normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_Normalize
// Il2CppName: set_Normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(bool)>(&OggVorbisEncoder::Setup::PsyInfo::set_Normalize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_Normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_NormalStart
// Il2CppName: get_NormalStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_NormalStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_NormalStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_NormalStart
// Il2CppName: set_NormalStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(int)>(&OggVorbisEncoder::Setup::PsyInfo::set_NormalStart)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_NormalStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_NormalPartition
// Il2CppName: get_NormalPartition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_NormalPartition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_NormalPartition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_NormalPartition
// Il2CppName: set_NormalPartition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(int)>(&OggVorbisEncoder::Setup::PsyInfo::set_NormalPartition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_NormalPartition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::get_NormalThreshold
// Il2CppName: get_NormalThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::get_NormalThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "get_NormalThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::set_NormalThreshold
// Il2CppName: set_NormalThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Setup::PsyInfo::*)(double)>(&OggVorbisEncoder::Setup::PsyInfo::set_NormalThreshold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "set_NormalThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OggVorbisEncoder::Setup::PsyInfo::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OggVorbisEncoder::Setup::PsyInfo* (OggVorbisEncoder::Setup::PsyInfo::*)()>(&OggVorbisEncoder::Setup::PsyInfo::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Setup::PsyInfo*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
