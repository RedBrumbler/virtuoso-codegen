// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OggVorbisEncoder
namespace OggVorbisEncoder {
  // Forward declaring type: LookupCollection
  class LookupCollection;
  // Forward declaring type: VorbisInfo
  class VorbisInfo;
  // Forward declaring type: OggPacket
  class OggPacket;
  // Forward declaring type: EncodeBuffer
  class EncodeBuffer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Forward declaring namespace: OggVorbisEncoder::Setup
namespace OggVorbisEncoder::Setup {
  // Forward declaring type: Mapping
  class Mapping;
}
// Forward declaring namespace: OggVorbisEncoder::Lookups
namespace OggVorbisEncoder::Lookups {
  // Forward declaring type: PsyLookup
  class PsyLookup;
}
// Completed forward declares
// Type namespace: OggVorbisEncoder
namespace OggVorbisEncoder {
  // Forward declaring type: ProcessingState
  class ProcessingState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::ProcessingState);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::ProcessingState*, "OggVorbisEncoder", "ProcessingState");
// Type namespace: OggVorbisEncoder
namespace OggVorbisEncoder {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.ProcessingState
  // [TokenAttribute] Offset: FFFFFFFF
  class ProcessingState : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly OggVorbisEncoder.LookupCollection _lookups
    // Size: 0x8
    // Offset: 0x10
    ::OggVorbisEncoder::LookupCollection* lookups;
    // Field size check
    static_assert(sizeof(::OggVorbisEncoder::LookupCollection*) == 0x8);
    // private readonly System.Single[][] _pcm
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::ArrayW<float>> pcm;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<float>>) == 0x8);
    // private readonly OggVorbisEncoder.VorbisInfo _vorbisInfo
    // Size: 0x8
    // Offset: 0x20
    ::OggVorbisEncoder::VorbisInfo* vorbisInfo;
    // Field size check
    static_assert(sizeof(::OggVorbisEncoder::VorbisInfo*) == 0x8);
    // private readonly System.Int32[] _window
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<int> window;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int32 _centerWindow
    // Size: 0x4
    // Offset: 0x30
    int centerWindow;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _currentWindow
    // Size: 0x4
    // Offset: 0x34
    int currentWindow;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _eofFlag
    // Size: 0x4
    // Offset: 0x38
    int eofFlag;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _granulePosition
    // Size: 0x4
    // Offset: 0x3C
    int granulePosition;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _lastWindow
    // Size: 0x4
    // Offset: 0x40
    int lastWindow;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _nextWindow
    // Size: 0x4
    // Offset: 0x44
    int nextWindow;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _pcmCurrent
    // Size: 0x4
    // Offset: 0x48
    int pcmCurrent;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _preExtrapolated
    // Size: 0x1
    // Offset: 0x4C
    bool preExtrapolated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: preExtrapolated and: sequence
    char __padding11[0x3] = {};
    // private System.Int32 _sequence
    // Size: 0x4
    // Offset: 0x50
    int sequence;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // static field const value: static private System.Single DecibelOffset
    static constexpr const float DecibelOffset = 0.345;
    // Get static field: static private System.Single DecibelOffset
    static float _get_DecibelOffset();
    // Set static field: static private System.Single DecibelOffset
    static void _set_DecibelOffset(float value);
    // Get instance field reference: private readonly OggVorbisEncoder.LookupCollection _lookups
    ::OggVorbisEncoder::LookupCollection*& dyn__lookups();
    // Get instance field reference: private readonly System.Single[][] _pcm
    ::ArrayW<::ArrayW<float>>& dyn__pcm();
    // Get instance field reference: private readonly OggVorbisEncoder.VorbisInfo _vorbisInfo
    ::OggVorbisEncoder::VorbisInfo*& dyn__vorbisInfo();
    // Get instance field reference: private readonly System.Int32[] _window
    ::ArrayW<int>& dyn__window();
    // Get instance field reference: private System.Int32 _centerWindow
    int& dyn__centerWindow();
    // Get instance field reference: private System.Int32 _currentWindow
    int& dyn__currentWindow();
    // Get instance field reference: private System.Int32 _eofFlag
    int& dyn__eofFlag();
    // Get instance field reference: private System.Int32 _granulePosition
    int& dyn__granulePosition();
    // Get instance field reference: private System.Int32 _lastWindow
    int& dyn__lastWindow();
    // Get instance field reference: private System.Int32 _nextWindow
    int& dyn__nextWindow();
    // Get instance field reference: private System.Int32 _pcmCurrent
    int& dyn__pcmCurrent();
    // Get instance field reference: private System.Boolean _preExtrapolated
    bool& dyn__preExtrapolated();
    // Get instance field reference: private System.Int32 _sequence
    int& dyn__sequence();
    // private System.Void .ctor(OggVorbisEncoder.VorbisInfo vorbisInfo, OggVorbisEncoder.LookupCollection lookups, System.Single[][] pcm, System.Int32[] window, System.Int32 centerWindow)
    // Offset: 0x82CBF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProcessingState* New_ctor(::OggVorbisEncoder::VorbisInfo* vorbisInfo, ::OggVorbisEncoder::LookupCollection* lookups, ::ArrayW<::ArrayW<float>> pcm, ::ArrayW<int> window, int centerWindow) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::ProcessingState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProcessingState*, creationType>(vorbisInfo, lookups, pcm, window, centerWindow)));
    }
    // public System.Void WriteData(System.Single[][] data, System.Int32 length)
    // Offset: 0x82CC4C
    void WriteData(::ArrayW<::ArrayW<float>> data, int length);
    // public System.Void WriteEndOfStream()
    // Offset: 0x82D088
    void WriteEndOfStream();
    // static private System.Void UpdatePcmFromLpcPredict(System.Single[] lpcCoeff, System.Collections.Generic.IList`1<System.Single> data, System.Int32 offset, System.Int32 m, System.Int32 n)
    // Offset: 0x82D6F8
    static void UpdatePcmFromLpcPredict(::ArrayW<float> lpcCoeff, ::System::Collections::Generic::IList_1<float>* data, int offset, int m, int n);
    // static private System.Void PopulateLpcFromPcm(System.Collections.Generic.IList`1<System.Single> lpci, System.Collections.Generic.IList`1<System.Single> data, System.Int32 offset, System.Int32 n, System.Int32 m)
    // Offset: 0x82D230
    static void PopulateLpcFromPcm(::System::Collections::Generic::IList_1<float>* lpci, ::System::Collections::Generic::IList_1<float>* data, int offset, int n, int m);
    // private System.Void PreExtrapolate()
    // Offset: 0x82CE94
    void PreExtrapolate();
    // public System.Void EnsureBufferSize(System.Int32 needed)
    // Offset: 0x82CD60
    void EnsureBufferSize(int needed);
    // public System.Boolean PacketOut(out OggVorbisEncoder.OggPacket packet)
    // Offset: 0x82D978
    bool PacketOut(ByRef<::OggVorbisEncoder::OggPacket*> packet);
    // private System.Void AdvanceStorageVectors(System.Int32 centerNext)
    // Offset: 0x82DFEC
    void AdvanceStorageVectors(int centerNext);
    // private System.Boolean MarkEnvelope()
    // Offset: 0x82E128
    bool MarkEnvelope();
    // static public OggVorbisEncoder.ProcessingState Create(OggVorbisEncoder.VorbisInfo info)
    // Offset: 0x82E214
    static ::OggVorbisEncoder::ProcessingState* Create(::OggVorbisEncoder::VorbisInfo* info);
    // private System.Byte[] PerformAnalysis(System.Single[][] pcm, System.Int32 pcmEnd)
    // Offset: 0x82DD34
    ::ArrayW<uint8_t> PerformAnalysis(::ArrayW<::ArrayW<float>> pcm, int pcmEnd);
    // private System.Void Encode(System.Single[][] pcm, System.Int32 pcmEnd, OggVorbisEncoder.EncodeBuffer buffer, OggVorbisEncoder.Setup.Mapping mapping, System.Int32[][] work, System.Int32[][][] floorPosts, OggVorbisEncoder.Lookups.PsyLookup psyLookup, System.Single[][] gmdct)
    // Offset: 0x82EFCC
    void Encode(::ArrayW<::ArrayW<float>> pcm, int pcmEnd, ::OggVorbisEncoder::EncodeBuffer* buffer, ::OggVorbisEncoder::Setup::Mapping* mapping, ::ArrayW<::ArrayW<int>> work, ::ArrayW<::ArrayW<::ArrayW<int>>> floorPosts, ::OggVorbisEncoder::Lookups::PsyLookup* psyLookup, ::ArrayW<::ArrayW<float>> gmdct);
    // private System.Void TransformPcm(System.Single[][] inputPcm, System.Int32 pcmEnd, System.Collections.Generic.IList`1<System.Int32[]> work, System.Collections.Generic.IList`1<System.Single[]> gmdct, System.Collections.Generic.IList`1<System.Single> localAmpMax)
    // Offset: 0x82E478
    void TransformPcm(::ArrayW<::ArrayW<float>> inputPcm, int pcmEnd, ::System::Collections::Generic::IList_1<::ArrayW<int>>* work, ::System::Collections::Generic::IList_1<::ArrayW<float>>* gmdct, ::System::Collections::Generic::IList_1<float>* localAmpMax);
    // private System.Void ApplyWindow(System.Collections.Generic.IList`1<System.Single> pcm, System.Int32 lastWindow, System.Int32 window, System.Int32 nextWindow)
    // Offset: 0x82F59C
    void ApplyWindow(::System::Collections::Generic::IList_1<float>* pcm, int lastWindow, int window, int nextWindow);
    // private System.Void ApplyMasks(System.Single[][] inputPcm, System.Int32 pcmEnd, OggVorbisEncoder.Setup.Mapping mapping, System.Collections.Generic.IList`1<System.Int32[][]> floorPosts, System.Single[][] gmdct, OggVorbisEncoder.Lookups.PsyLookup psyLookup, System.Single[] localAmpMax)
    // Offset: 0x82EAE0
    void ApplyMasks(::ArrayW<::ArrayW<float>> inputPcm, int pcmEnd, ::OggVorbisEncoder::Setup::Mapping* mapping, ::System::Collections::Generic::IList_1<::ArrayW<::ArrayW<int>>>* floorPosts, ::ArrayW<::ArrayW<float>> gmdct, ::OggVorbisEncoder::Lookups::PsyLookup* psyLookup, ::ArrayW<float> localAmpMax);
  }; // OggVorbisEncoder.ProcessingState
  #pragma pack(pop)
  static check_size<sizeof(ProcessingState), 80 + sizeof(int)> __OggVorbisEncoder_ProcessingStateSizeCheck;
  static_assert(sizeof(ProcessingState) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::ProcessingState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OggVorbisEncoder::ProcessingState::WriteData
// Il2CppName: WriteData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::ProcessingState::*)(::ArrayW<::ArrayW<float>>, int)>(&OggVorbisEncoder::ProcessingState::WriteData)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), 1)->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::ProcessingState*), "WriteData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, length});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::ProcessingState::WriteEndOfStream
// Il2CppName: WriteEndOfStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::ProcessingState::*)()>(&OggVorbisEncoder::ProcessingState::WriteEndOfStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::ProcessingState*), "WriteEndOfStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::ProcessingState::UpdatePcmFromLpcPredict
// Il2CppName: UpdatePcmFromLpcPredict
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<float>, ::System::Collections::Generic::IList_1<float>*, int, int, int)>(&OggVorbisEncoder::ProcessingState::UpdatePcmFromLpcPredict)> {
  static const MethodInfo* get() {
    static auto* lpcCoeff = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* m = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::ProcessingState*), "UpdatePcmFromLpcPredict", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lpcCoeff, data, offset, m, n});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::ProcessingState::PopulateLpcFromPcm
// Il2CppName: PopulateLpcFromPcm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::IList_1<float>*, ::System::Collections::Generic::IList_1<float>*, int, int, int)>(&OggVorbisEncoder::ProcessingState::PopulateLpcFromPcm)> {
  static const MethodInfo* get() {
    static auto* lpci = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* m = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::ProcessingState*), "PopulateLpcFromPcm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lpci, data, offset, n, m});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::ProcessingState::PreExtrapolate
// Il2CppName: PreExtrapolate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::ProcessingState::*)()>(&OggVorbisEncoder::ProcessingState::PreExtrapolate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::ProcessingState*), "PreExtrapolate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::ProcessingState::EnsureBufferSize
// Il2CppName: EnsureBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::ProcessingState::*)(int)>(&OggVorbisEncoder::ProcessingState::EnsureBufferSize)> {
  static const MethodInfo* get() {
    static auto* needed = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::ProcessingState*), "EnsureBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{needed});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::ProcessingState::PacketOut
// Il2CppName: PacketOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OggVorbisEncoder::ProcessingState::*)(ByRef<::OggVorbisEncoder::OggPacket*>)>(&OggVorbisEncoder::ProcessingState::PacketOut)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("OggVorbisEncoder", "OggPacket")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::ProcessingState*), "PacketOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::ProcessingState::AdvanceStorageVectors
// Il2CppName: AdvanceStorageVectors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::ProcessingState::*)(int)>(&OggVorbisEncoder::ProcessingState::AdvanceStorageVectors)> {
  static const MethodInfo* get() {
    static auto* centerNext = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::ProcessingState*), "AdvanceStorageVectors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{centerNext});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::ProcessingState::MarkEnvelope
// Il2CppName: MarkEnvelope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OggVorbisEncoder::ProcessingState::*)()>(&OggVorbisEncoder::ProcessingState::MarkEnvelope)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::ProcessingState*), "MarkEnvelope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::ProcessingState::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OggVorbisEncoder::ProcessingState* (*)(::OggVorbisEncoder::VorbisInfo*)>(&OggVorbisEncoder::ProcessingState::Create)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("OggVorbisEncoder", "VorbisInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::ProcessingState*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::ProcessingState::PerformAnalysis
// Il2CppName: PerformAnalysis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (OggVorbisEncoder::ProcessingState::*)(::ArrayW<::ArrayW<float>>, int)>(&OggVorbisEncoder::ProcessingState::PerformAnalysis)> {
  static const MethodInfo* get() {
    static auto* pcm = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), 1)->byval_arg;
    static auto* pcmEnd = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::ProcessingState*), "PerformAnalysis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcm, pcmEnd});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::ProcessingState::Encode
// Il2CppName: Encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::ProcessingState::*)(::ArrayW<::ArrayW<float>>, int, ::OggVorbisEncoder::EncodeBuffer*, ::OggVorbisEncoder::Setup::Mapping*, ::ArrayW<::ArrayW<int>>, ::ArrayW<::ArrayW<::ArrayW<int>>>, ::OggVorbisEncoder::Lookups::PsyLookup*, ::ArrayW<::ArrayW<float>>)>(&OggVorbisEncoder::ProcessingState::Encode)> {
  static const MethodInfo* get() {
    static auto* pcm = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), 1)->byval_arg;
    static auto* pcmEnd = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("OggVorbisEncoder", "EncodeBuffer")->byval_arg;
    static auto* mapping = &::il2cpp_utils::GetClassFromName("OggVorbisEncoder.Setup", "Mapping")->byval_arg;
    static auto* work = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1), 1)->byval_arg;
    static auto* floorPosts = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1), 1), 1)->byval_arg;
    static auto* psyLookup = &::il2cpp_utils::GetClassFromName("OggVorbisEncoder.Lookups", "PsyLookup")->byval_arg;
    static auto* gmdct = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::ProcessingState*), "Encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcm, pcmEnd, buffer, mapping, work, floorPosts, psyLookup, gmdct});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::ProcessingState::TransformPcm
// Il2CppName: TransformPcm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::ProcessingState::*)(::ArrayW<::ArrayW<float>>, int, ::System::Collections::Generic::IList_1<::ArrayW<int>>*, ::System::Collections::Generic::IList_1<::ArrayW<float>>*, ::System::Collections::Generic::IList_1<float>*)>(&OggVorbisEncoder::ProcessingState::TransformPcm)> {
  static const MethodInfo* get() {
    static auto* inputPcm = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), 1)->byval_arg;
    static auto* pcmEnd = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* work = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)})->byval_arg;
    static auto* gmdct = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)})->byval_arg;
    static auto* localAmpMax = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::ProcessingState*), "TransformPcm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputPcm, pcmEnd, work, gmdct, localAmpMax});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::ProcessingState::ApplyWindow
// Il2CppName: ApplyWindow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::ProcessingState::*)(::System::Collections::Generic::IList_1<float>*, int, int, int)>(&OggVorbisEncoder::ProcessingState::ApplyWindow)> {
  static const MethodInfo* get() {
    static auto* pcm = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* lastWindow = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* window = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nextWindow = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::ProcessingState*), "ApplyWindow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcm, lastWindow, window, nextWindow});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::ProcessingState::ApplyMasks
// Il2CppName: ApplyMasks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::ProcessingState::*)(::ArrayW<::ArrayW<float>>, int, ::OggVorbisEncoder::Setup::Mapping*, ::System::Collections::Generic::IList_1<::ArrayW<::ArrayW<int>>>*, ::ArrayW<::ArrayW<float>>, ::OggVorbisEncoder::Lookups::PsyLookup*, ::ArrayW<float>)>(&OggVorbisEncoder::ProcessingState::ApplyMasks)> {
  static const MethodInfo* get() {
    static auto* inputPcm = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), 1)->byval_arg;
    static auto* pcmEnd = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mapping = &::il2cpp_utils::GetClassFromName("OggVorbisEncoder.Setup", "Mapping")->byval_arg;
    static auto* floorPosts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1), 1)})->byval_arg;
    static auto* gmdct = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), 1)->byval_arg;
    static auto* psyLookup = &::il2cpp_utils::GetClassFromName("OggVorbisEncoder.Lookups", "PsyLookup")->byval_arg;
    static auto* localAmpMax = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::ProcessingState*), "ApplyMasks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputPcm, pcmEnd, mapping, floorPosts, gmdct, psyLookup, localAmpMax});
  }
};
