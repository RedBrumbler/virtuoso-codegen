// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: OggVorbisEncoder.Lookups
namespace OggVorbisEncoder::Lookups {
  // Forward declaring type: Delta
  struct Delta;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::Lookups::Delta, "OggVorbisEncoder.Lookups", "Delta");
// Type namespace: OggVorbisEncoder.Lookups
namespace OggVorbisEncoder::Lookups {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OggVorbisEncoder.Lookups.Delta
  // [TokenAttribute] Offset: FFFFFFFF
  struct Delta/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single Min
    // Size: 0x4
    // Offset: 0x0
    float Min;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Max
    // Size: 0x4
    // Offset: 0x4
    float Max;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: Delta
    constexpr Delta(float Min_ = {}, float Max_ = {}) noexcept : Min{Min_}, Max{Max_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single Min
    float& dyn_Min();
    // Get instance field reference: public System.Single Max
    float& dyn_Max();
    // public System.Void .ctor(System.Single min, System.Single max)
    // Offset: 0x7538B0
    // ABORTED: conflicts with another method.  Delta(float min, float max);
  }; // OggVorbisEncoder.Lookups.Delta
  #pragma pack(pop)
  static check_size<sizeof(Delta), 4 + sizeof(float)> __OggVorbisEncoder_Lookups_DeltaSizeCheck;
  static_assert(sizeof(Delta) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::Delta::Delta
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
