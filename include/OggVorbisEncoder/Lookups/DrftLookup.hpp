// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Completed forward declares
// Type namespace: OggVorbisEncoder.Lookups
namespace OggVorbisEncoder::Lookups {
  // Forward declaring type: DrftLookup
  class DrftLookup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::Lookups::DrftLookup);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::Lookups::DrftLookup*, "OggVorbisEncoder.Lookups", "DrftLookup");
// Type namespace: OggVorbisEncoder.Lookups
namespace OggVorbisEncoder::Lookups {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.Lookups.DrftLookup
  // [TokenAttribute] Offset: FFFFFFFF
  class DrftLookup : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.Collections.Generic.IList`1<System.Int32> _splitCache
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::IList_1<int>* splitCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IList_1<int>*) == 0x8);
    // private readonly System.Collections.Generic.IList`1<System.Single> _trigCache
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::IList_1<float>* trigCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IList_1<float>*) == 0x8);
    // private readonly System.Int32 <N>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    int N;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private readonly System.Collections.Generic.IList`1<System.Int32> _splitCache
    ::System::Collections::Generic::IList_1<int>*& dyn__splitCache();
    // Get instance field reference: private readonly System.Collections.Generic.IList`1<System.Single> _trigCache
    ::System::Collections::Generic::IList_1<float>*& dyn__trigCache();
    // Get instance field reference: private readonly System.Int32 <N>k__BackingField
    int& dyn_$N$k__BackingField();
    // public System.Int32 get_N()
    // Offset: 0x75397C
    int get_N();
    // public System.Void .ctor(System.Int32 n)
    // Offset: 0x7538B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DrftLookup* New_ctor(int n) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::Lookups::DrftLookup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DrftLookup*, creationType>(n)));
    }
    // private System.Void fdrffti(System.Int32 n)
    // Offset: 0x75396C
    void fdrffti(int n);
    // private System.Void drfti1(System.Int32 n)
    // Offset: 0x753984
    void drfti1(int n);
    // public System.Void Forward(System.Collections.Generic.IList`1<System.Single> data)
    // Offset: 0x754070
    void Forward(::System::Collections::Generic::IList_1<float>* data);
    // private System.Void dradf4(System.Int32 ido, System.Int32 l1, System.Collections.Generic.IList`1<System.Single> cc, System.Collections.Generic.IList`1<System.Single> ch, System.Int32 wa1, System.Int32 wa2, System.Int32 wa3)
    // Offset: 0x7588A4
    void dradf4(int ido, int l1, ::System::Collections::Generic::IList_1<float>* cc, ::System::Collections::Generic::IList_1<float>* ch, int wa1, int wa2, int wa3);
    // private System.Void dradf2(System.Int32 ido, System.Int32 l1, System.Collections.Generic.IList`1<System.Single> cc, System.Collections.Generic.IList`1<System.Single> ch, System.Int32 wa1)
    // Offset: 0x757B50
    void dradf2(int ido, int l1, ::System::Collections::Generic::IList_1<float>* cc, ::System::Collections::Generic::IList_1<float>* ch, int wa1);
    // private System.Void dradfg(System.Int32 ido, System.Int32 ip, System.Int32 l1, System.Int32 idl1, System.Collections.Generic.IList`1<System.Single> cc, System.Collections.Generic.IList`1<System.Single> c1, System.Collections.Generic.IList`1<System.Single> c2, System.Collections.Generic.IList`1<System.Single> ch, System.Collections.Generic.IList`1<System.Single> ch2, System.Int32 wa)
    // Offset: 0x754438
    void dradfg(int ido, int ip, int l1, int idl1, ::System::Collections::Generic::IList_1<float>* cc, ::System::Collections::Generic::IList_1<float>* c1, ::System::Collections::Generic::IList_1<float>* c2, ::System::Collections::Generic::IList_1<float>* ch, ::System::Collections::Generic::IList_1<float>* ch2, int wa);
  }; // OggVorbisEncoder.Lookups.DrftLookup
  #pragma pack(pop)
  static check_size<sizeof(DrftLookup), 32 + sizeof(int)> __OggVorbisEncoder_Lookups_DrftLookupSizeCheck;
  static_assert(sizeof(DrftLookup) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::DrftLookup::get_N
// Il2CppName: get_N
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Lookups::DrftLookup::*)()>(&OggVorbisEncoder::Lookups::DrftLookup::get_N)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::DrftLookup*), "get_N", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::DrftLookup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::DrftLookup::fdrffti
// Il2CppName: fdrffti
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::DrftLookup::*)(int)>(&OggVorbisEncoder::Lookups::DrftLookup::fdrffti)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::DrftLookup*), "fdrffti", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::DrftLookup::drfti1
// Il2CppName: drfti1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::DrftLookup::*)(int)>(&OggVorbisEncoder::Lookups::DrftLookup::drfti1)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::DrftLookup*), "drfti1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::DrftLookup::Forward
// Il2CppName: Forward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::DrftLookup::*)(::System::Collections::Generic::IList_1<float>*)>(&OggVorbisEncoder::Lookups::DrftLookup::Forward)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::DrftLookup*), "Forward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::DrftLookup::dradf4
// Il2CppName: dradf4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::DrftLookup::*)(int, int, ::System::Collections::Generic::IList_1<float>*, ::System::Collections::Generic::IList_1<float>*, int, int, int)>(&OggVorbisEncoder::Lookups::DrftLookup::dradf4)> {
  static const MethodInfo* get() {
    static auto* ido = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* l1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cc = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* ch = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* wa1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* wa2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* wa3 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::DrftLookup*), "dradf4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ido, l1, cc, ch, wa1, wa2, wa3});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::DrftLookup::dradf2
// Il2CppName: dradf2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::DrftLookup::*)(int, int, ::System::Collections::Generic::IList_1<float>*, ::System::Collections::Generic::IList_1<float>*, int)>(&OggVorbisEncoder::Lookups::DrftLookup::dradf2)> {
  static const MethodInfo* get() {
    static auto* ido = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* l1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cc = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* ch = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* wa1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::DrftLookup*), "dradf2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ido, l1, cc, ch, wa1});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::DrftLookup::dradfg
// Il2CppName: dradfg
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::DrftLookup::*)(int, int, int, int, ::System::Collections::Generic::IList_1<float>*, ::System::Collections::Generic::IList_1<float>*, ::System::Collections::Generic::IList_1<float>*, ::System::Collections::Generic::IList_1<float>*, ::System::Collections::Generic::IList_1<float>*, int)>(&OggVorbisEncoder::Lookups::DrftLookup::dradfg)> {
  static const MethodInfo* get() {
    static auto* ido = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ip = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* l1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* idl1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cc = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* c1 = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* c2 = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* ch = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* ch2 = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* wa = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::DrftLookup*), "dradfg", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ido, ip, l1, idl1, cc, c1, c2, ch, ch2, wa});
  }
};
