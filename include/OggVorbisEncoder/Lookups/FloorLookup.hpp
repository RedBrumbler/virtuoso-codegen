// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OggVorbisEncoder::Lookups
namespace OggVorbisEncoder::Lookups {
  // Skipping declaration: FitAccumulation because it is already included!
}
// Forward declaring namespace: OggVorbisEncoder::Setup
namespace OggVorbisEncoder::Setup {
  // Forward declaring type: Floor
  class Floor;
  // Forward declaring type: IStaticCodeBook
  class IStaticCodeBook;
  // Forward declaring type: CodeBook
  class CodeBook;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Forward declaring namespace: OggVorbisEncoder
namespace OggVorbisEncoder {
  // Forward declaring type: EncodeBuffer
  class EncodeBuffer;
}
// Completed forward declares
// Type namespace: OggVorbisEncoder.Lookups
namespace OggVorbisEncoder::Lookups {
  // Forward declaring type: FloorLookup
  class FloorLookup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::Lookups::FloorLookup);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::Lookups::FloorLookup*, "OggVorbisEncoder.Lookups", "FloorLookup");
// Type namespace: OggVorbisEncoder.Lookups
namespace OggVorbisEncoder::Lookups {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.Lookups.FloorLookup
  // [TokenAttribute] Offset: FFFFFFFF
  class FloorLookup : public ::Il2CppObject {
    public:
    // Nested type: ::OggVorbisEncoder::Lookups::FloorLookup::FitAccumulation
    struct FitAccumulation;
    // Nested type: ::OggVorbisEncoder::Lookups::FloorLookup::$$c
    class $$c;
    // Size: 0x30
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OggVorbisEncoder.Lookups.FloorLookup/OggVorbisEncoder.Lookups.FitAccumulation
    // [TokenAttribute] Offset: FFFFFFFF
    struct FitAccumulation/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 x0
      // Size: 0x4
      // Offset: 0x0
      int x0;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 x1
      // Size: 0x4
      // Offset: 0x4
      int x1;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 xa
      // Size: 0x4
      // Offset: 0x8
      int xa;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 ya
      // Size: 0x4
      // Offset: 0xC
      int ya;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 x2a
      // Size: 0x4
      // Offset: 0x10
      int x2a;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 xya
      // Size: 0x4
      // Offset: 0x14
      int xya;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 an
      // Size: 0x4
      // Offset: 0x18
      int an;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 xb
      // Size: 0x4
      // Offset: 0x1C
      int xb;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 yb
      // Size: 0x4
      // Offset: 0x20
      int yb;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 x2b
      // Size: 0x4
      // Offset: 0x24
      int x2b;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 xyb
      // Size: 0x4
      // Offset: 0x28
      int xyb;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 bn
      // Size: 0x4
      // Offset: 0x2C
      int bn;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: FitAccumulation
      constexpr FitAccumulation(int x0_ = {}, int x1_ = {}, int xa_ = {}, int ya_ = {}, int x2a_ = {}, int xya_ = {}, int an_ = {}, int xb_ = {}, int yb_ = {}, int x2b_ = {}, int xyb_ = {}, int bn_ = {}) noexcept : x0{x0_}, x1{x1_}, xa{xa_}, ya{ya_}, x2a{x2a_}, xya{xya_}, an{an_}, xb{xb_}, yb{yb_}, x2b{x2b_}, xyb{xyb_}, bn{bn_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 x0
      int& dyn_x0();
      // Get instance field reference: public System.Int32 x1
      int& dyn_x1();
      // Get instance field reference: public System.Int32 xa
      int& dyn_xa();
      // Get instance field reference: public System.Int32 ya
      int& dyn_ya();
      // Get instance field reference: public System.Int32 x2a
      int& dyn_x2a();
      // Get instance field reference: public System.Int32 xya
      int& dyn_xya();
      // Get instance field reference: public System.Int32 an
      int& dyn_an();
      // Get instance field reference: public System.Int32 xb
      int& dyn_xb();
      // Get instance field reference: public System.Int32 yb
      int& dyn_yb();
      // Get instance field reference: public System.Int32 x2b
      int& dyn_x2b();
      // Get instance field reference: public System.Int32 xyb
      int& dyn_xyb();
      // Get instance field reference: public System.Int32 bn
      int& dyn_bn();
    }; // OggVorbisEncoder.Lookups.FloorLookup/OggVorbisEncoder.Lookups.FitAccumulation
    #pragma pack(pop)
    static check_size<sizeof(FloorLookup::FitAccumulation), 44 + sizeof(int)> __OggVorbisEncoder_Lookups_FloorLookup_FitAccumulationSizeCheck;
    static_assert(sizeof(FloorLookup::FitAccumulation) == 0x30);
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly OggVorbisEncoder.Setup.Floor _floor
    // Size: 0x8
    // Offset: 0x10
    ::OggVorbisEncoder::Setup::Floor* floor;
    // Field size check
    static_assert(sizeof(::OggVorbisEncoder::Setup::Floor*) == 0x8);
    // private readonly System.Int32[] _forwardIndex
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> forwardIndex;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Int32[] _highNeighbor
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<int> highNeighbor;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Int32[] _lowNeighbor
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<int> lowNeighbor;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Int32 _n
    // Size: 0x4
    // Offset: 0x30
    int n;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _posts
    // Size: 0x4
    // Offset: 0x34
    int posts;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _quantQ
    // Size: 0x4
    // Offset: 0x38
    int quantQ;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: quantQ and: reverseIndex
    char __padding6[0x4] = {};
    // private readonly System.Int32[] _reverseIndex
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<int> reverseIndex;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Int32[] _sortedIndex
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<int> sortedIndex;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    public:
    // static field const value: static private System.Int32 Posit
    static constexpr const int Posit = 63;
    // Get static field: static private System.Int32 Posit
    static int _get_Posit();
    // Set static field: static private System.Int32 Posit
    static void _set_Posit(int value);
    // Get instance field reference: private readonly OggVorbisEncoder.Setup.Floor _floor
    ::OggVorbisEncoder::Setup::Floor*& dyn__floor();
    // Get instance field reference: private readonly System.Int32[] _forwardIndex
    ::ArrayW<int>& dyn__forwardIndex();
    // Get instance field reference: private readonly System.Int32[] _highNeighbor
    ::ArrayW<int>& dyn__highNeighbor();
    // Get instance field reference: private readonly System.Int32[] _lowNeighbor
    ::ArrayW<int>& dyn__lowNeighbor();
    // Get instance field reference: private readonly System.Int32 _n
    int& dyn__n();
    // Get instance field reference: private readonly System.Int32 _posts
    int& dyn__posts();
    // Get instance field reference: private readonly System.Int32 _quantQ
    int& dyn__quantQ();
    // Get instance field reference: private readonly System.Int32[] _reverseIndex
    ::ArrayW<int>& dyn__reverseIndex();
    // Get instance field reference: private readonly System.Int32[] _sortedIndex
    ::ArrayW<int>& dyn__sortedIndex();
    // public System.Void .ctor(OggVorbisEncoder.Setup.Floor floor)
    // Offset: 0x75CFB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FloorLookup* New_ctor(::OggVorbisEncoder::Setup::Floor* floor) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::Lookups::FloorLookup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FloorLookup*, creationType>(floor)));
    }
    // public System.Int32[] Fit(System.Collections.Generic.IList`1<System.Single> logmdct, System.Collections.Generic.IList`1<System.Single> logmask)
    // Offset: 0x75D51C
    ::ArrayW<int> Fit(::System::Collections::Generic::IList_1<float>* logmdct, ::System::Collections::Generic::IList_1<float>* logmask);
    // private System.Boolean InspectError(System.Int32 x0, System.Int32 x1, System.Int32 y0, System.Int32 y1, System.Collections.Generic.IList`1<System.Single> mask, System.Collections.Generic.IList`1<System.Single> mdct)
    // Offset: 0x75EC20
    bool InspectError(int x0, int x1, int y0, int y1, ::System::Collections::Generic::IList_1<float>* mask, ::System::Collections::Generic::IList_1<float>* mdct);
    // private System.Int32 FitLine(System.Collections.Generic.IList`1<OggVorbisEncoder.Lookups.FloorLookup/OggVorbisEncoder.Lookups.FitAccumulation> acc, System.Int32 offset, System.Int32 fits, out System.Int32 y0, out System.Int32 y1)
    // Offset: 0x75E110
    int FitLine(::System::Collections::Generic::IList_1<::OggVorbisEncoder::Lookups::FloorLookup::FitAccumulation>* acc, int offset, int fits, ByRef<int> y0, ByRef<int> y1);
    // static private System.Int32 RenderPoint(System.Int32 x0, System.Int32 x1, System.Int32 y0, System.Int32 y1, System.Int32 x)
    // Offset: 0x75F1C0
    static int RenderPoint(int x0, int x1, int y0, int y1, int x);
    // static private System.Int32 PostY(System.Int32[] a, System.Int32[] b, System.Int32 pos)
    // Offset: 0x75EBB4
    static int PostY(::ArrayW<int> a, ::ArrayW<int> b, int pos);
    // private System.Int32 AccumulateFit(System.Collections.Generic.IList`1<System.Single> flr, System.Collections.Generic.IList`1<System.Single> mdct, System.Int32 x0, System.Int32 x1, ref OggVorbisEncoder.Lookups.FloorLookup/OggVorbisEncoder.Lookups.FitAccumulation fits, System.Int32 n)
    // Offset: 0x75DDDC
    int AccumulateFit(::System::Collections::Generic::IList_1<float>* flr, ::System::Collections::Generic::IList_1<float>* mdct, int x0, int x1, ByRef<::OggVorbisEncoder::Lookups::FloorLookup::FitAccumulation> fits, int n);
    // static private System.Int32 DecibelQuant(System.Single x)
    // Offset: 0x75F268
    static int DecibelQuant(float x);
    // public System.Boolean Encode(OggVorbisEncoder.EncodeBuffer buffer, System.Collections.Generic.IList`1<OggVorbisEncoder.Setup.IStaticCodeBook> staticBooks, System.Collections.Generic.IList`1<OggVorbisEncoder.Setup.CodeBook> books, System.Int32[] post, System.Int32[] ilogmask, System.Int32 pcmEnd, System.Int32 n)
    // Offset: 0x75F2B4
    bool Encode(::OggVorbisEncoder::EncodeBuffer* buffer, ::System::Collections::Generic::IList_1<::OggVorbisEncoder::Setup::IStaticCodeBook*>* staticBooks, ::System::Collections::Generic::IList_1<::OggVorbisEncoder::Setup::CodeBook*>* books, ::ArrayW<int> post, ::ArrayW<int> ilogmask, int pcmEnd, int n);
    // private System.Void RenderLine0(System.Int32 n, System.Int32 x0, System.Int32 x1, System.Int32 y0, System.Int32 y1, System.Int32[] d)
    // Offset: 0x75FD40
    void RenderLine0(int n, int x0, int x1, int y0, int y1, ::ArrayW<int> d);
  }; // OggVorbisEncoder.Lookups.FloorLookup
  #pragma pack(pop)
  static check_size<sizeof(FloorLookup), 72 + sizeof(::ArrayW<int>)> __OggVorbisEncoder_Lookups_FloorLookupSizeCheck;
  static_assert(sizeof(FloorLookup) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::Lookups::FloorLookup::FitAccumulation, "OggVorbisEncoder.Lookups", "FloorLookup/FitAccumulation");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::FloorLookup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::FloorLookup::Fit
// Il2CppName: Fit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (OggVorbisEncoder::Lookups::FloorLookup::*)(::System::Collections::Generic::IList_1<float>*, ::System::Collections::Generic::IList_1<float>*)>(&OggVorbisEncoder::Lookups::FloorLookup::Fit)> {
  static const MethodInfo* get() {
    static auto* logmdct = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* logmask = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::FloorLookup*), "Fit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logmdct, logmask});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::FloorLookup::InspectError
// Il2CppName: InspectError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OggVorbisEncoder::Lookups::FloorLookup::*)(int, int, int, int, ::System::Collections::Generic::IList_1<float>*, ::System::Collections::Generic::IList_1<float>*)>(&OggVorbisEncoder::Lookups::FloorLookup::InspectError)> {
  static const MethodInfo* get() {
    static auto* x0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mask = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* mdct = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::FloorLookup*), "InspectError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x0, x1, y0, y1, mask, mdct});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::FloorLookup::FitLine
// Il2CppName: FitLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Lookups::FloorLookup::*)(::System::Collections::Generic::IList_1<::OggVorbisEncoder::Lookups::FloorLookup::FitAccumulation>*, int, int, ByRef<int>, ByRef<int>)>(&OggVorbisEncoder::Lookups::FloorLookup::FitLine)> {
  static const MethodInfo* get() {
    static auto* acc = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("OggVorbisEncoder.Lookups", "FloorLookup/FitAccumulation")})->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* y1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::FloorLookup*), "FitLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{acc, offset, fits, y0, y1});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::FloorLookup::RenderPoint
// Il2CppName: RenderPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int, int, int, int)>(&OggVorbisEncoder::Lookups::FloorLookup::RenderPoint)> {
  static const MethodInfo* get() {
    static auto* x0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::FloorLookup*), "RenderPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x0, x1, y0, y1, x});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::FloorLookup::PostY
// Il2CppName: PostY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<int>, ::ArrayW<int>, int)>(&OggVorbisEncoder::Lookups::FloorLookup::PostY)> {
  static const MethodInfo* get() {
    static auto* a = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* b = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::FloorLookup*), "PostY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, pos});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::FloorLookup::AccumulateFit
// Il2CppName: AccumulateFit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Lookups::FloorLookup::*)(::System::Collections::Generic::IList_1<float>*, ::System::Collections::Generic::IList_1<float>*, int, int, ByRef<::OggVorbisEncoder::Lookups::FloorLookup::FitAccumulation>, int)>(&OggVorbisEncoder::Lookups::FloorLookup::AccumulateFit)> {
  static const MethodInfo* get() {
    static auto* flr = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* mdct = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* x0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fits = &::il2cpp_utils::GetClassFromName("OggVorbisEncoder.Lookups", "FloorLookup/FitAccumulation")->this_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::FloorLookup*), "AccumulateFit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flr, mdct, x0, x1, fits, n});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::FloorLookup::DecibelQuant
// Il2CppName: DecibelQuant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&OggVorbisEncoder::Lookups::FloorLookup::DecibelQuant)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::FloorLookup*), "DecibelQuant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::FloorLookup::Encode
// Il2CppName: Encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OggVorbisEncoder::Lookups::FloorLookup::*)(::OggVorbisEncoder::EncodeBuffer*, ::System::Collections::Generic::IList_1<::OggVorbisEncoder::Setup::IStaticCodeBook*>*, ::System::Collections::Generic::IList_1<::OggVorbisEncoder::Setup::CodeBook*>*, ::ArrayW<int>, ::ArrayW<int>, int, int)>(&OggVorbisEncoder::Lookups::FloorLookup::Encode)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("OggVorbisEncoder", "EncodeBuffer")->byval_arg;
    static auto* staticBooks = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("OggVorbisEncoder.Setup", "IStaticCodeBook")})->byval_arg;
    static auto* books = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("OggVorbisEncoder.Setup", "CodeBook")})->byval_arg;
    static auto* post = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* ilogmask = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* pcmEnd = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::FloorLookup*), "Encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, staticBooks, books, post, ilogmask, pcmEnd, n});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::FloorLookup::RenderLine0
// Il2CppName: RenderLine0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::FloorLookup::*)(int, int, int, int, int, ::ArrayW<int>)>(&OggVorbisEncoder::Lookups::FloorLookup::RenderLine0)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* d = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::FloorLookup*), "RenderLine0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n, x0, x1, y0, y1, d});
  }
};
