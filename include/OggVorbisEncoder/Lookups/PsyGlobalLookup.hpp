// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OggVorbisEncoder::Setup
namespace OggVorbisEncoder::Setup {
  // Forward declaring type: PsyGlobal
  class PsyGlobal;
}
// Completed forward declares
// Type namespace: OggVorbisEncoder.Lookups
namespace OggVorbisEncoder::Lookups {
  // Forward declaring type: PsyGlobalLookup
  class PsyGlobalLookup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::Lookups::PsyGlobalLookup);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::Lookups::PsyGlobalLookup*, "OggVorbisEncoder.Lookups", "PsyGlobalLookup");
// Type namespace: OggVorbisEncoder.Lookups
namespace OggVorbisEncoder::Lookups {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.Lookups.PsyGlobalLookup
  // [TokenAttribute] Offset: FFFFFFFF
  class PsyGlobalLookup : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly OggVorbisEncoder.Setup.PsyGlobal _psyGlobal
    // Size: 0x8
    // Offset: 0x10
    ::OggVorbisEncoder::Setup::PsyGlobal* psyGlobal;
    // Field size check
    static_assert(sizeof(::OggVorbisEncoder::Setup::PsyGlobal*) == 0x8);
    // private System.Single _ampMax
    // Size: 0x4
    // Offset: 0x18
    float ampMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // static field const value: static private System.Int32 NegativeInfinite
    static constexpr const int NegativeInfinite = -9999;
    // Get static field: static private System.Int32 NegativeInfinite
    static int _get_NegativeInfinite();
    // Set static field: static private System.Int32 NegativeInfinite
    static void _set_NegativeInfinite(int value);
    // Get instance field reference: private readonly OggVorbisEncoder.Setup.PsyGlobal _psyGlobal
    ::OggVorbisEncoder::Setup::PsyGlobal*& dyn__psyGlobal();
    // Get instance field reference: private System.Single _ampMax
    float& dyn__ampMax();
    // public System.Single get_AmpMax()
    // Offset: 0x79C28C
    float get_AmpMax();
    // private System.Void set_AmpMax(System.Single value)
    // Offset: 0x79C20C
    void set_AmpMax(float value);
    // public System.Void .ctor(OggVorbisEncoder.Setup.PsyGlobal global)
    // Offset: 0x79C1D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PsyGlobalLookup* New_ctor(::OggVorbisEncoder::Setup::PsyGlobal* global) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::Lookups::PsyGlobalLookup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PsyGlobalLookup*, creationType>(global)));
    }
    // public System.Void DecayAmpMax(System.Int32 n, System.Int32 sampleRate)
    // Offset: 0x79C294
    void DecayAmpMax(int n, int sampleRate);
  }; // OggVorbisEncoder.Lookups.PsyGlobalLookup
  #pragma pack(pop)
  static check_size<sizeof(PsyGlobalLookup), 24 + sizeof(float)> __OggVorbisEncoder_Lookups_PsyGlobalLookupSizeCheck;
  static_assert(sizeof(PsyGlobalLookup) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyGlobalLookup::get_AmpMax
// Il2CppName: get_AmpMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OggVorbisEncoder::Lookups::PsyGlobalLookup::*)()>(&OggVorbisEncoder::Lookups::PsyGlobalLookup::get_AmpMax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyGlobalLookup*), "get_AmpMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyGlobalLookup::set_AmpMax
// Il2CppName: set_AmpMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::PsyGlobalLookup::*)(float)>(&OggVorbisEncoder::Lookups::PsyGlobalLookup::set_AmpMax)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyGlobalLookup*), "set_AmpMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyGlobalLookup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyGlobalLookup::DecayAmpMax
// Il2CppName: DecayAmpMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::PsyGlobalLookup::*)(int, int)>(&OggVorbisEncoder::Lookups::PsyGlobalLookup::DecayAmpMax)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sampleRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyGlobalLookup*), "DecayAmpMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n, sampleRate});
  }
};
