// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Completed forward declares
// Type namespace: OggVorbisEncoder.Lookups
namespace OggVorbisEncoder::Lookups {
  // Forward declaring type: MdctLookup
  class MdctLookup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::Lookups::MdctLookup);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::Lookups::MdctLookup*, "OggVorbisEncoder.Lookups", "MdctLookup");
// Type namespace: OggVorbisEncoder.Lookups
namespace OggVorbisEncoder::Lookups {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.Lookups.MdctLookup
  // [TokenAttribute] Offset: FFFFFFFF
  class MdctLookup : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.Int32[] _bitReverse
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<int> bitReverse;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Int32 _log2N
    // Size: 0x4
    // Offset: 0x18
    int log2N;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _n
    // Size: 0x4
    // Offset: 0x1C
    int n;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Single _scale
    // Size: 0x4
    // Offset: 0x20
    float scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: scale and: trig
    char __padding3[0x4] = {};
    // private readonly System.Single[] _trig
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<float> trig;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // static field const value: static private System.Single Pi3Eighths
    static constexpr const float Pi3Eighths = 0.38268343;
    // Get static field: static private System.Single Pi3Eighths
    static float _get_Pi3Eighths();
    // Set static field: static private System.Single Pi3Eighths
    static void _set_Pi3Eighths(float value);
    // static field const value: static private System.Single Pi2Eighths
    static constexpr const float Pi2Eighths = 0.70710677;
    // Get static field: static private System.Single Pi2Eighths
    static float _get_Pi2Eighths();
    // Set static field: static private System.Single Pi2Eighths
    static void _set_Pi2Eighths(float value);
    // static field const value: static private System.Single Pi1Eighth
    static constexpr const float Pi1Eighth = 0.9238795;
    // Get static field: static private System.Single Pi1Eighth
    static float _get_Pi1Eighth();
    // Set static field: static private System.Single Pi1Eighth
    static void _set_Pi1Eighth(float value);
    // Get instance field reference: private readonly System.Int32[] _bitReverse
    ::ArrayW<int>& dyn__bitReverse();
    // Get instance field reference: private readonly System.Int32 _log2N
    int& dyn__log2N();
    // Get instance field reference: private readonly System.Int32 _n
    int& dyn__n();
    // Get instance field reference: private readonly System.Single _scale
    float& dyn__scale();
    // Get instance field reference: private readonly System.Single[] _trig
    ::ArrayW<float>& dyn__trig();
    // public System.Void .ctor(System.Int32 n)
    // Offset: 0x7697A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MdctLookup* New_ctor(int n) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::Lookups::MdctLookup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MdctLookup*, creationType>(n)));
    }
    // public System.Void Forward(System.Collections.Generic.IList`1<System.Single> input, System.Single[] output)
    // Offset: 0x76B830
    void Forward(::System::Collections::Generic::IList_1<float>* input, ::ArrayW<float> output);
    // private System.Void Butterflies(System.Collections.Generic.IList`1<System.Single> data, System.Int32 points)
    // Offset: 0x76C29C
    void Butterflies(::System::Collections::Generic::IList_1<float>* data, int points);
    // static private System.Void Butterfly32(System.Collections.Generic.IList`1<System.Single> data, System.Int32 offset)
    // Offset: 0x76FD10
    static void Butterfly32(::System::Collections::Generic::IList_1<float>* data, int offset);
    // static private System.Void Butterfly16(System.Collections.Generic.IList`1<System.Single> data, System.Int32 offset)
    // Offset: 0x7726A8
    static void Butterfly16(::System::Collections::Generic::IList_1<float>* data, int offset);
    // static private System.Void Butterfly8(System.Collections.Generic.IList`1<System.Single> data, System.Int32 offset)
    // Offset: 0x773B80
    static void Butterfly8(::System::Collections::Generic::IList_1<float>* data, int offset);
    // private System.Void ButterflyGeneric(System.Collections.Generic.IList`1<System.Single> data, System.Int32 offset, System.Int32 points, System.Int32 trigIncrement)
    // Offset: 0x76E64C
    void ButterflyGeneric(::System::Collections::Generic::IList_1<float>* data, int offset, int points, int trigIncrement);
    // private System.Void ButterflyFirst(System.Collections.Generic.IList`1<System.Single> data, System.Int32 points)
    // Offset: 0x76CFCC
    void ButterflyFirst(::System::Collections::Generic::IList_1<float>* data, int points);
    // private System.Void ReverseBits(System.Collections.Generic.IList`1<System.Single> data)
    // Offset: 0x76C390
    void ReverseBits(::System::Collections::Generic::IList_1<float>* data);
  }; // OggVorbisEncoder.Lookups.MdctLookup
  #pragma pack(pop)
  static check_size<sizeof(MdctLookup), 40 + sizeof(::ArrayW<float>)> __OggVorbisEncoder_Lookups_MdctLookupSizeCheck;
  static_assert(sizeof(MdctLookup) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::MdctLookup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::MdctLookup::Forward
// Il2CppName: Forward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::MdctLookup::*)(::System::Collections::Generic::IList_1<float>*, ::ArrayW<float>)>(&OggVorbisEncoder::Lookups::MdctLookup::Forward)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* output = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::MdctLookup*), "Forward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, output});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::MdctLookup::Butterflies
// Il2CppName: Butterflies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::MdctLookup::*)(::System::Collections::Generic::IList_1<float>*, int)>(&OggVorbisEncoder::Lookups::MdctLookup::Butterflies)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* points = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::MdctLookup*), "Butterflies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, points});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::MdctLookup::Butterfly32
// Il2CppName: Butterfly32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::IList_1<float>*, int)>(&OggVorbisEncoder::Lookups::MdctLookup::Butterfly32)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::MdctLookup*), "Butterfly32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, offset});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::MdctLookup::Butterfly16
// Il2CppName: Butterfly16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::IList_1<float>*, int)>(&OggVorbisEncoder::Lookups::MdctLookup::Butterfly16)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::MdctLookup*), "Butterfly16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, offset});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::MdctLookup::Butterfly8
// Il2CppName: Butterfly8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::IList_1<float>*, int)>(&OggVorbisEncoder::Lookups::MdctLookup::Butterfly8)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::MdctLookup*), "Butterfly8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, offset});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::MdctLookup::ButterflyGeneric
// Il2CppName: ButterflyGeneric
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::MdctLookup::*)(::System::Collections::Generic::IList_1<float>*, int, int, int)>(&OggVorbisEncoder::Lookups::MdctLookup::ButterflyGeneric)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* points = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* trigIncrement = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::MdctLookup*), "ButterflyGeneric", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, offset, points, trigIncrement});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::MdctLookup::ButterflyFirst
// Il2CppName: ButterflyFirst
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::MdctLookup::*)(::System::Collections::Generic::IList_1<float>*, int)>(&OggVorbisEncoder::Lookups::MdctLookup::ButterflyFirst)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* points = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::MdctLookup*), "ButterflyFirst", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, points});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::MdctLookup::ReverseBits
// Il2CppName: ReverseBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::MdctLookup::*)(::System::Collections::Generic::IList_1<float>*)>(&OggVorbisEncoder::Lookups::MdctLookup::ReverseBits)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::MdctLookup*), "ReverseBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
