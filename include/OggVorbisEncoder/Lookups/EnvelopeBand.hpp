// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: OggVorbisEncoder.Lookups
namespace OggVorbisEncoder::Lookups {
  // Forward declaring type: EnvelopeBand
  class EnvelopeBand;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::Lookups::EnvelopeBand);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::Lookups::EnvelopeBand*, "OggVorbisEncoder.Lookups", "EnvelopeBand");
// Type namespace: OggVorbisEncoder.Lookups
namespace OggVorbisEncoder::Lookups {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.Lookups.EnvelopeBand
  // [TokenAttribute] Offset: FFFFFFFF
  class EnvelopeBand : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.Int32 <Begin>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int Begin;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Begin and: Window
    char __padding0[0x4] = {};
    // private readonly System.Single[] <Window>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<float> Window;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private readonly System.Single <Total>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    float Total;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private readonly System.Int32 <Begin>k__BackingField
    int& dyn_$Begin$k__BackingField();
    // Get instance field reference: private readonly System.Single[] <Window>k__BackingField
    ::ArrayW<float>& dyn_$Window$k__BackingField();
    // Get instance field reference: private readonly System.Single <Total>k__BackingField
    float& dyn_$Total$k__BackingField();
    // public System.Int32 get_Begin()
    // Offset: 0x75BB30
    int get_Begin();
    // public System.Single[] get_Window()
    // Offset: 0x75BB38
    ::ArrayW<float> get_Window();
    // public System.Single get_Total()
    // Offset: 0x75BB40
    float get_Total();
    // public System.Void .ctor(System.Int32 begin, System.Int32 windowLength)
    // Offset: 0x75B9C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EnvelopeBand* New_ctor(int begin, int windowLength) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::Lookups::EnvelopeBand::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EnvelopeBand*, creationType>(begin, windowLength)));
    }
  }; // OggVorbisEncoder.Lookups.EnvelopeBand
  #pragma pack(pop)
  static check_size<sizeof(EnvelopeBand), 32 + sizeof(float)> __OggVorbisEncoder_Lookups_EnvelopeBandSizeCheck;
  static_assert(sizeof(EnvelopeBand) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::EnvelopeBand::get_Begin
// Il2CppName: get_Begin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Lookups::EnvelopeBand::*)()>(&OggVorbisEncoder::Lookups::EnvelopeBand::get_Begin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::EnvelopeBand*), "get_Begin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::EnvelopeBand::get_Window
// Il2CppName: get_Window
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (OggVorbisEncoder::Lookups::EnvelopeBand::*)()>(&OggVorbisEncoder::Lookups::EnvelopeBand::get_Window)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::EnvelopeBand*), "get_Window", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::EnvelopeBand::get_Total
// Il2CppName: get_Total
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OggVorbisEncoder::Lookups::EnvelopeBand::*)()>(&OggVorbisEncoder::Lookups::EnvelopeBand::get_Total)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::EnvelopeBand*), "get_Total", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::EnvelopeBand::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
