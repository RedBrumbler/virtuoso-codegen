// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OggVorbisEncoder::Lookups
namespace OggVorbisEncoder::Lookups {
  // Forward declaring type: EnvelopeBand
  class EnvelopeBand;
  // Forward declaring type: EnvelopeFilterState
  class EnvelopeFilterState;
  // Forward declaring type: MdctLookup
  class MdctLookup;
}
// Forward declaring namespace: OggVorbisEncoder::Setup
namespace OggVorbisEncoder::Setup {
  // Forward declaring type: PsyGlobal
  class PsyGlobal;
}
// Forward declaring namespace: OggVorbisEncoder
namespace OggVorbisEncoder {
  // Forward declaring type: VorbisInfo
  class VorbisInfo;
}
// Completed forward declares
// Type namespace: OggVorbisEncoder.Lookups
namespace OggVorbisEncoder::Lookups {
  // Forward declaring type: EnvelopeLookup
  class EnvelopeLookup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::Lookups::EnvelopeLookup);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::Lookups::EnvelopeLookup*, "OggVorbisEncoder.Lookups", "EnvelopeLookup");
// Type namespace: OggVorbisEncoder.Lookups
namespace OggVorbisEncoder::Lookups {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.Lookups.EnvelopeLookup
  // [TokenAttribute] Offset: FFFFFFFF
  class EnvelopeLookup : public ::Il2CppObject {
    public:
    // Nested type: ::OggVorbisEncoder::Lookups::EnvelopeLookup::$$c
    class $$c;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly OggVorbisEncoder.Lookups.EnvelopeBand[] _bands
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::OggVorbisEncoder::Lookups::EnvelopeBand*> bands;
    // Field size check
    static_assert(sizeof(::ArrayW<::OggVorbisEncoder::Lookups::EnvelopeBand*>) == 0x8);
    // private readonly OggVorbisEncoder.Lookups.EnvelopeFilterState[] _filters
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::OggVorbisEncoder::Lookups::EnvelopeFilterState*> filters;
    // Field size check
    static_assert(sizeof(::ArrayW<::OggVorbisEncoder::Lookups::EnvelopeFilterState*>) == 0x8);
    // private readonly OggVorbisEncoder.Lookups.MdctLookup _mdctLookup
    // Size: 0x8
    // Offset: 0x20
    ::OggVorbisEncoder::Lookups::MdctLookup* mdctLookup;
    // Field size check
    static_assert(sizeof(::OggVorbisEncoder::Lookups::MdctLookup*) == 0x8);
    // private readonly System.Single[] _mdctWindow
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<float> mdctWindow;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private readonly System.Single _minEnergy
    // Size: 0x4
    // Offset: 0x30
    float minEnergy;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: minEnergy and: psyGlobal
    char __padding4[0x4] = {};
    // private readonly OggVorbisEncoder.Setup.PsyGlobal _psyGlobal
    // Size: 0x8
    // Offset: 0x38
    ::OggVorbisEncoder::Setup::PsyGlobal* psyGlobal;
    // Field size check
    static_assert(sizeof(::OggVorbisEncoder::Setup::PsyGlobal*) == 0x8);
    // private System.Int32 _current
    // Size: 0x4
    // Offset: 0x40
    int current;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _currentMark
    // Size: 0x4
    // Offset: 0x44
    int currentMark;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _cursor
    // Size: 0x4
    // Offset: 0x48
    int cursor;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: cursor and: mark
    char __padding8[0x4] = {};
    // private System.Int32[] _mark
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<int> mark;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int32 _stretch
    // Size: 0x4
    // Offset: 0x58
    int stretch;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // static field const value: static public System.Int32 EnvelopePost
    static constexpr const int EnvelopePost = 2;
    // Get static field: static public System.Int32 EnvelopePost
    static int _get_EnvelopePost();
    // Set static field: static public System.Int32 EnvelopePost
    static void _set_EnvelopePost(int value);
    // static field const value: static private System.Int32 SearchStep
    static constexpr const int SearchStep = 64;
    // Get static field: static private System.Int32 SearchStep
    static int _get_SearchStep();
    // Set static field: static private System.Int32 SearchStep
    static void _set_SearchStep(int value);
    // static field const value: static private System.Int32 WindowLength
    static constexpr const int WindowLength = 128;
    // Get static field: static private System.Int32 WindowLength
    static int _get_WindowLength();
    // Set static field: static private System.Int32 WindowLength
    static void _set_WindowLength(int value);
    // static field const value: static private System.Int32 EnvelopeWindow
    static constexpr const int EnvelopeWindow = 4;
    // Get static field: static private System.Int32 EnvelopeWindow
    static int _get_EnvelopeWindow();
    // Set static field: static private System.Int32 EnvelopeWindow
    static void _set_EnvelopeWindow(int value);
    // static field const value: static private System.Int32 EnvelopeMinStretch
    static constexpr const int EnvelopeMinStretch = 2;
    // Get static field: static private System.Int32 EnvelopeMinStretch
    static int _get_EnvelopeMinStretch();
    // Set static field: static private System.Int32 EnvelopeMinStretch
    static void _set_EnvelopeMinStretch(int value);
    // static field const value: static private System.Int32 EnvelopeMaxStretch
    static constexpr const int EnvelopeMaxStretch = 12;
    // Get static field: static private System.Int32 EnvelopeMaxStretch
    static int _get_EnvelopeMaxStretch();
    // Set static field: static private System.Int32 EnvelopeMaxStretch
    static void _set_EnvelopeMaxStretch(int value);
    // Get instance field reference: private readonly OggVorbisEncoder.Lookups.EnvelopeBand[] _bands
    ::ArrayW<::OggVorbisEncoder::Lookups::EnvelopeBand*>& dyn__bands();
    // Get instance field reference: private readonly OggVorbisEncoder.Lookups.EnvelopeFilterState[] _filters
    ::ArrayW<::OggVorbisEncoder::Lookups::EnvelopeFilterState*>& dyn__filters();
    // Get instance field reference: private readonly OggVorbisEncoder.Lookups.MdctLookup _mdctLookup
    ::OggVorbisEncoder::Lookups::MdctLookup*& dyn__mdctLookup();
    // Get instance field reference: private readonly System.Single[] _mdctWindow
    ::ArrayW<float>& dyn__mdctWindow();
    // Get instance field reference: private readonly System.Single _minEnergy
    float& dyn__minEnergy();
    // Get instance field reference: private readonly OggVorbisEncoder.Setup.PsyGlobal _psyGlobal
    ::OggVorbisEncoder::Setup::PsyGlobal*& dyn__psyGlobal();
    // Get instance field reference: private System.Int32 _current
    int& dyn__current();
    // Get instance field reference: private System.Int32 _currentMark
    int& dyn__currentMark();
    // Get instance field reference: private System.Int32 _cursor
    int& dyn__cursor();
    // Get instance field reference: private System.Int32[] _mark
    ::ArrayW<int>& dyn__mark();
    // Get instance field reference: private System.Int32 _stretch
    int& dyn__stretch();
    // public System.Void .ctor(OggVorbisEncoder.Setup.PsyGlobal psyGlobal, OggVorbisEncoder.VorbisInfo info)
    // Offset: 0x75BF4C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EnvelopeLookup* New_ctor(::OggVorbisEncoder::Setup::PsyGlobal* psyGlobal, ::OggVorbisEncoder::VorbisInfo* info) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::Lookups::EnvelopeLookup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EnvelopeLookup*, creationType>(psyGlobal, info)));
    }
    // public System.Void Shift(System.Int32 shift)
    // Offset: 0x75C484
    void Shift(int shift);
    // public System.Boolean Mark(System.Int32 beginWindow, System.Int32 endWindow)
    // Offset: 0x75C508
    bool Mark(int beginWindow, int endWindow);
    // public System.Int32 Search(System.Single[][] pcm, System.Int32 pcmCurrent, System.Int32 centerWindow, System.Int32 testWindow)
    // Offset: 0x75C5A4
    int Search(::ArrayW<::ArrayW<float>> pcm, int pcmCurrent, int centerWindow, int testWindow);
    // private System.Int32 AmpPcm(System.Single[] pcm, System.Int32 pcmOffset, System.Int32 filterOffset)
    // Offset: 0x75C864
    int AmpPcm(::ArrayW<float> pcm, int pcmOffset, int filterOffset);
  }; // OggVorbisEncoder.Lookups.EnvelopeLookup
  #pragma pack(pop)
  static check_size<sizeof(EnvelopeLookup), 88 + sizeof(int)> __OggVorbisEncoder_Lookups_EnvelopeLookupSizeCheck;
  static_assert(sizeof(EnvelopeLookup) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::EnvelopeLookup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::EnvelopeLookup::Shift
// Il2CppName: Shift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::EnvelopeLookup::*)(int)>(&OggVorbisEncoder::Lookups::EnvelopeLookup::Shift)> {
  static const MethodInfo* get() {
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::EnvelopeLookup*), "Shift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shift});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::EnvelopeLookup::Mark
// Il2CppName: Mark
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OggVorbisEncoder::Lookups::EnvelopeLookup::*)(int, int)>(&OggVorbisEncoder::Lookups::EnvelopeLookup::Mark)> {
  static const MethodInfo* get() {
    static auto* beginWindow = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endWindow = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::EnvelopeLookup*), "Mark", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beginWindow, endWindow});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::EnvelopeLookup::Search
// Il2CppName: Search
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Lookups::EnvelopeLookup::*)(::ArrayW<::ArrayW<float>>, int, int, int)>(&OggVorbisEncoder::Lookups::EnvelopeLookup::Search)> {
  static const MethodInfo* get() {
    static auto* pcm = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), 1)->byval_arg;
    static auto* pcmCurrent = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* centerWindow = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* testWindow = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::EnvelopeLookup*), "Search", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcm, pcmCurrent, centerWindow, testWindow});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::EnvelopeLookup::AmpPcm
// Il2CppName: AmpPcm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::Lookups::EnvelopeLookup::*)(::ArrayW<float>, int, int)>(&OggVorbisEncoder::Lookups::EnvelopeLookup::AmpPcm)> {
  static const MethodInfo* get() {
    static auto* pcm = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* pcmOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* filterOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::EnvelopeLookup*), "AmpPcm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcm, pcmOffset, filterOffset});
  }
};
