// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OggVorbisEncoder::Lookups
namespace OggVorbisEncoder::Lookups {
}
// Forward declaring namespace: OggVorbisEncoder::Setup
namespace OggVorbisEncoder::Setup {
  // Forward declaring type: PsyInfo
  class PsyInfo;
  // Forward declaring type: PsyGlobal
  class PsyGlobal;
  // Forward declaring type: Mapping
  class Mapping;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Completed forward declares
// Type namespace: OggVorbisEncoder.Lookups
namespace OggVorbisEncoder::Lookups {
  // Forward declaring type: PsyLookup
  class PsyLookup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::Lookups::PsyLookup);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::Lookups::PsyLookup*, "OggVorbisEncoder.Lookups", "PsyLookup");
// Type namespace: OggVorbisEncoder.Lookups
namespace OggVorbisEncoder::Lookups {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.Lookups.PsyLookup
  // [TokenAttribute] Offset: FFFFFFFF
  class PsyLookup : public ::Il2CppObject {
    public:
    // Nested type: ::OggVorbisEncoder::Lookups::PsyLookup::ApComparer
    class ApComparer;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.Single[] _ath
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<float> ath;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private readonly System.Int32[] _bark
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> bark;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly System.Int32 _eighthOctaveLines
    // Size: 0x4
    // Offset: 0x20
    int eighthOctaveLines;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _firstOctave
    // Size: 0x4
    // Offset: 0x24
    int firstOctave;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Single _mVal
    // Size: 0x4
    // Offset: 0x28
    float mVal;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Int32 _n
    // Size: 0x4
    // Offset: 0x2C
    int n;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Single[][] _noiseOffset
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::ArrayW<float>> noiseOffset;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<float>>) == 0x8);
    // private readonly System.Int32[] _octave
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<int> octave;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly OggVorbisEncoder.Setup.PsyInfo _psyInfo
    // Size: 0x8
    // Offset: 0x40
    ::OggVorbisEncoder::Setup::PsyInfo* psyInfo;
    // Field size check
    static_assert(sizeof(::OggVorbisEncoder::Setup::PsyInfo*) == 0x8);
    // private readonly System.Int32 _shiftOctave
    // Size: 0x4
    // Offset: 0x48
    int shiftOctave;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: shiftOctave and: toneCurves
    char __padding9[0x4] = {};
    // private readonly System.Single[][][] _toneCurves
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::ArrayW<::ArrayW<float>>> toneCurves;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<::ArrayW<float>>>) == 0x8);
    // private readonly System.Int32 _totalOctaveLines
    // Size: 0x4
    // Offset: 0x58
    int totalOctaveLines;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private readonly System.Single[] StereoThresholdsLimit
    static ::ArrayW<float> _get_StereoThresholdsLimit();
    // Set static field: static private readonly System.Single[] StereoThresholdsLimit
    static void _set_StereoThresholdsLimit(::ArrayW<float> value);
    // Get static field: static private readonly System.Single[] StereoThresholds
    static ::ArrayW<float> _get_StereoThresholds();
    // Set static field: static private readonly System.Single[] StereoThresholds
    static void _set_StereoThresholds(::ArrayW<float> value);
    // Get static field: static private readonly System.Single[] DecibelLookup
    static ::ArrayW<float> _get_DecibelLookup();
    // Set static field: static private readonly System.Single[] DecibelLookup
    static void _set_DecibelLookup(::ArrayW<float> value);
    // Get static field: static private readonly OggVorbisEncoder.Lookups.PsyLookup/OggVorbisEncoder.Lookups.ApComparer Comparer
    static ::OggVorbisEncoder::Lookups::PsyLookup::ApComparer* _get_Comparer();
    // Set static field: static private readonly OggVorbisEncoder.Lookups.PsyLookup/OggVorbisEncoder.Lookups.ApComparer Comparer
    static void _set_Comparer(::OggVorbisEncoder::Lookups::PsyLookup::ApComparer* value);
    // static field const value: static private System.Single NegativeInfinite
    static constexpr const float NegativeInfinite = -9999;
    // Get static field: static private System.Single NegativeInfinite
    static float _get_NegativeInfinite();
    // Set static field: static private System.Single NegativeInfinite
    static void _set_NegativeInfinite(float value);
    // static field const value: static private System.Int32 MaxAth
    static constexpr const int MaxAth = 88;
    // Get static field: static private System.Int32 MaxAth
    static int _get_MaxAth();
    // Set static field: static private System.Int32 MaxAth
    static void _set_MaxAth(int value);
    // static field const value: static private System.Int32 Levels
    static constexpr const int Levels = 8;
    // Get static field: static private System.Int32 Levels
    static int _get_Levels();
    // Set static field: static private System.Int32 Levels
    static void _set_Levels(int value);
    // static field const value: static private System.Int32 Level0
    static constexpr const int Level0 = 30;
    // Get static field: static private System.Int32 Level0
    static int _get_Level0();
    // Set static field: static private System.Int32 Level0
    static void _set_Level0(int value);
    // static field const value: static private System.Int32 EhmerMax
    static constexpr const int EhmerMax = 56;
    // Get static field: static private System.Int32 EhmerMax
    static int _get_EhmerMax();
    // Set static field: static private System.Int32 EhmerMax
    static void _set_EhmerMax(int value);
    // static field const value: static private System.Int32 EhmerOffset
    static constexpr const int EhmerOffset = 16;
    // Get static field: static private System.Int32 EhmerOffset
    static int _get_EhmerOffset();
    // Set static field: static private System.Int32 EhmerOffset
    static void _set_EhmerOffset(int value);
    // Get static field: static private readonly System.Single[] AthSource
    static ::ArrayW<float> _get_AthSource();
    // Set static field: static private readonly System.Single[] AthSource
    static void _set_AthSource(::ArrayW<float> value);
    // Get static field: static private readonly System.Single[][][] ToneMasks
    static ::ArrayW<::ArrayW<::ArrayW<float>>> _get_ToneMasks();
    // Set static field: static private readonly System.Single[][][] ToneMasks
    static void _set_ToneMasks(::ArrayW<::ArrayW<::ArrayW<float>>> value);
    // Get instance field reference: private readonly System.Single[] _ath
    ::ArrayW<float>& dyn__ath();
    // Get instance field reference: private readonly System.Int32[] _bark
    ::ArrayW<int>& dyn__bark();
    // Get instance field reference: private readonly System.Int32 _eighthOctaveLines
    int& dyn__eighthOctaveLines();
    // Get instance field reference: private readonly System.Int32 _firstOctave
    int& dyn__firstOctave();
    // Get instance field reference: private readonly System.Single _mVal
    float& dyn__mVal();
    // Get instance field reference: private readonly System.Int32 _n
    int& dyn__n();
    // Get instance field reference: private readonly System.Single[][] _noiseOffset
    ::ArrayW<::ArrayW<float>>& dyn__noiseOffset();
    // Get instance field reference: private readonly System.Int32[] _octave
    ::ArrayW<int>& dyn__octave();
    // Get instance field reference: private readonly OggVorbisEncoder.Setup.PsyInfo _psyInfo
    ::OggVorbisEncoder::Setup::PsyInfo*& dyn__psyInfo();
    // Get instance field reference: private readonly System.Int32 _shiftOctave
    int& dyn__shiftOctave();
    // Get instance field reference: private readonly System.Single[][][] _toneCurves
    ::ArrayW<::ArrayW<::ArrayW<float>>>& dyn__toneCurves();
    // Get instance field reference: private readonly System.Int32 _totalOctaveLines
    int& dyn__totalOctaveLines();
    // public System.Void .ctor(OggVorbisEncoder.Setup.PsyInfo psyInfo, OggVorbisEncoder.Setup.PsyGlobal globalParam, System.Int32 n, System.Int32 sampleRate)
    // Offset: 0x79C91C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PsyLookup* New_ctor(::OggVorbisEncoder::Setup::PsyInfo* psyInfo, ::OggVorbisEncoder::Setup::PsyGlobal* globalParam, int n, int sampleRate) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::Lookups::PsyLookup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PsyLookup*, creationType>(psyInfo, globalParam, n, sampleRate)));
    }
    // static private System.Void .cctor()
    // Offset: 0x7A2FB8
    static void _cctor();
    // static private System.Single[][][] SetupToneCurves(System.Single[] curveAttDecibels, System.Double binHertz, System.Int32 n, System.Single centerBoost, System.Single centerDecayRate)
    // Offset: 0x79D44C
    static ::ArrayW<::ArrayW<::ArrayW<float>>> SetupToneCurves(::ArrayW<float> curveAttDecibels, double binHertz, int n, float centerBoost, float centerDecayRate);
    // public System.Void ToneMask(System.Collections.Generic.IList`1<System.Single> pcm, System.Single[] logmask, System.Single globalSpecMax, System.Single localSpecMax)
    // Offset: 0x79E9B0
    void ToneMask(::System::Collections::Generic::IList_1<float>* pcm, ::ArrayW<float> logmask, float globalSpecMax, float localSpecMax);
    // public System.Void OffsetAndMix(System.Single[] noise, System.Single[] tone, System.Int32 offsetIndex, System.Collections.Generic.IList`1<System.Single> logmask, System.Collections.Generic.IList`1<System.Single> mdct, System.Collections.Generic.IList`1<System.Single> logmdct)
    // Offset: 0x79F21C
    void OffsetAndMix(::ArrayW<float> noise, ::ArrayW<float> tone, int offsetIndex, ::System::Collections::Generic::IList_1<float>* logmask, ::System::Collections::Generic::IList_1<float>* mdct, ::System::Collections::Generic::IList_1<float>* logmdct);
    // public System.Void NoiseMask(System.Collections.Generic.IList`1<System.Single> logmdct, System.Single[] logmask)
    // Offset: 0x79F60C
    void NoiseMask(::System::Collections::Generic::IList_1<float>* logmdct, ::ArrayW<float> logmask);
    // private System.Void BarkNoiseHybridMp(System.Collections.Generic.IList`1<System.Single> f, System.Collections.Generic.IList`1<System.Single> noise, System.Single offset, System.Int32 adjusted)
    // Offset: 0x79F8EC
    void BarkNoiseHybridMp(::System::Collections::Generic::IList_1<float>* f, ::System::Collections::Generic::IList_1<float>* noise, float offset, int adjusted);
    // public System.Void CoupleQuantizeNormalize(System.Int32 blobno, OggVorbisEncoder.Setup.PsyGlobal psyGlobal, OggVorbisEncoder.Setup.Mapping mapping, System.Single[][] mdct, System.Int32[][] iwork, System.Boolean[] nonzero, System.Int32 slidingLowpass, System.Int32 channels)
    // Offset: 0x7A0550
    void CoupleQuantizeNormalize(int blobno, ::OggVorbisEncoder::Setup::PsyGlobal* psyGlobal, ::OggVorbisEncoder::Setup::Mapping* mapping, ::ArrayW<::ArrayW<float>> mdct, ::ArrayW<::ArrayW<int>> iwork, ::ArrayW<bool> nonzero, int slidingLowpass, int channels);
    // private System.Single NoiseNormalize(System.Int32 limit, System.Collections.Generic.IList`1<System.Single> r, System.Collections.Generic.IList`1<System.Single> q, System.Collections.Generic.IList`1<System.Single> f, System.Collections.Generic.IList`1<System.Boolean> flags, System.Int32 offset, System.Int32 i, System.Int32 n, System.Collections.Generic.IList`1<System.Int32> output)
    // Offset: 0x7A1744
    float NoiseNormalize(int limit, ::System::Collections::Generic::IList_1<float>* r, ::System::Collections::Generic::IList_1<float>* q, ::System::Collections::Generic::IList_1<float>* f, ::System::Collections::Generic::IList_1<bool>* flags, int offset, int i, int n, ::System::Collections::Generic::IList_1<int>* output);
    // static private System.Void FlagLossless(System.Int32 limit, System.Single prePoint, System.Single postPoint, System.Collections.Generic.IList`1<System.Single> mdct, System.Collections.Generic.IList`1<System.Single> floor, System.Collections.Generic.IList`1<System.Boolean> flag, System.Int32 offset, System.Int32 i, System.Int32 jn)
    // Offset: 0x7A14F0
    static void FlagLossless(int limit, float prePoint, float postPoint, ::System::Collections::Generic::IList_1<float>* mdct, ::System::Collections::Generic::IList_1<float>* floor, ::System::Collections::Generic::IList_1<bool>* flag, int offset, int i, int jn);
    // static private System.Single UnitNorm(System.Single x)
    // Offset: 0x7A27A8
    static float UnitNorm(float x);
    // private System.Void MaxSeeds(System.Single[] seed, System.Collections.Generic.IList`1<System.Single> floor)
    // Offset: 0x79EE4C
    void MaxSeeds(::ArrayW<float> seed, ::System::Collections::Generic::IList_1<float>* floor);
    // private System.Void SeedChase(System.Collections.Generic.IList`1<System.Single> seeds)
    // Offset: 0x7A283C
    void SeedChase(::System::Collections::Generic::IList_1<float>* seeds);
    // private System.Void SeedLoop(System.Single[][][] curves, System.Collections.Generic.IList`1<System.Single> pcm, System.Single[] floor, System.Single[] seeds, System.Single specmax)
    // Offset: 0x79EB18
    void SeedLoop(::ArrayW<::ArrayW<::ArrayW<float>>> curves, ::System::Collections::Generic::IList_1<float>* pcm, ::ArrayW<float> floor, ::ArrayW<float> seeds, float specmax);
    // static private System.Void SeedCurve(System.Collections.Generic.IList`1<System.Single> seeds, System.Single[][] curves, System.Single amp, System.Int32 oc, System.Int32 n, System.Int32 linesper, System.Single dbOffset)
    // Offset: 0x7A2CFC
    static void SeedCurve(::System::Collections::Generic::IList_1<float>* seeds, ::ArrayW<::ArrayW<float>> curves, float amp, int oc, int n, int linesper, float dbOffset);
    // static private System.Void MinCurve(System.Collections.Generic.IList`1<System.Single> c1, System.Single[] c2)
    // Offset: 0x79E82C
    static void MinCurve(::System::Collections::Generic::IList_1<float>* c1, ::ArrayW<float> c2);
    // static private System.Void MaxCurve(System.Collections.Generic.IList`1<System.Single> c1, System.Single[] c2)
    // Offset: 0x79E6A8
    static void MaxCurve(::System::Collections::Generic::IList_1<float>* c1, ::ArrayW<float> c2);
    // static private System.Void AttenuateCurve(System.Collections.Generic.IList`1<System.Single> curve, System.Single att)
    // Offset: 0x79E564
    static void AttenuateCurve(::System::Collections::Generic::IList_1<float>* curve, float att);
    // static private System.Double ToOctave(System.Double n)
    // Offset: 0x79D294
    static double ToOctave(double n);
    // static private System.Double FromOctave(System.Double n)
    // Offset: 0x79D318
    static double FromOctave(double n);
    // static private System.Double ToBark(System.Double n)
    // Offset: 0x79D394
    static double ToBark(double n);
  }; // OggVorbisEncoder.Lookups.PsyLookup
  #pragma pack(pop)
  static check_size<sizeof(PsyLookup), 88 + sizeof(int)> __OggVorbisEncoder_Lookups_PsyLookupSizeCheck;
  static_assert(sizeof(PsyLookup) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OggVorbisEncoder::Lookups::PsyLookup::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::SetupToneCurves
// Il2CppName: SetupToneCurves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::ArrayW<::ArrayW<float>>> (*)(::ArrayW<float>, double, int, float, float)>(&OggVorbisEncoder::Lookups::PsyLookup::SetupToneCurves)> {
  static const MethodInfo* get() {
    static auto* curveAttDecibels = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* binHertz = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* centerBoost = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* centerDecayRate = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "SetupToneCurves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curveAttDecibels, binHertz, n, centerBoost, centerDecayRate});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::ToneMask
// Il2CppName: ToneMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::PsyLookup::*)(::System::Collections::Generic::IList_1<float>*, ::ArrayW<float>, float, float)>(&OggVorbisEncoder::Lookups::PsyLookup::ToneMask)> {
  static const MethodInfo* get() {
    static auto* pcm = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* logmask = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* globalSpecMax = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* localSpecMax = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "ToneMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcm, logmask, globalSpecMax, localSpecMax});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::OffsetAndMix
// Il2CppName: OffsetAndMix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::PsyLookup::*)(::ArrayW<float>, ::ArrayW<float>, int, ::System::Collections::Generic::IList_1<float>*, ::System::Collections::Generic::IList_1<float>*, ::System::Collections::Generic::IList_1<float>*)>(&OggVorbisEncoder::Lookups::PsyLookup::OffsetAndMix)> {
  static const MethodInfo* get() {
    static auto* noise = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* tone = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* offsetIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* logmask = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* mdct = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* logmdct = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "OffsetAndMix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noise, tone, offsetIndex, logmask, mdct, logmdct});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::NoiseMask
// Il2CppName: NoiseMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::PsyLookup::*)(::System::Collections::Generic::IList_1<float>*, ::ArrayW<float>)>(&OggVorbisEncoder::Lookups::PsyLookup::NoiseMask)> {
  static const MethodInfo* get() {
    static auto* logmdct = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* logmask = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "NoiseMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logmdct, logmask});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::BarkNoiseHybridMp
// Il2CppName: BarkNoiseHybridMp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::PsyLookup::*)(::System::Collections::Generic::IList_1<float>*, ::System::Collections::Generic::IList_1<float>*, float, int)>(&OggVorbisEncoder::Lookups::PsyLookup::BarkNoiseHybridMp)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* noise = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* adjusted = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "BarkNoiseHybridMp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f, noise, offset, adjusted});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::CoupleQuantizeNormalize
// Il2CppName: CoupleQuantizeNormalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::PsyLookup::*)(int, ::OggVorbisEncoder::Setup::PsyGlobal*, ::OggVorbisEncoder::Setup::Mapping*, ::ArrayW<::ArrayW<float>>, ::ArrayW<::ArrayW<int>>, ::ArrayW<bool>, int, int)>(&OggVorbisEncoder::Lookups::PsyLookup::CoupleQuantizeNormalize)> {
  static const MethodInfo* get() {
    static auto* blobno = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* psyGlobal = &::il2cpp_utils::GetClassFromName("OggVorbisEncoder.Setup", "PsyGlobal")->byval_arg;
    static auto* mapping = &::il2cpp_utils::GetClassFromName("OggVorbisEncoder.Setup", "Mapping")->byval_arg;
    static auto* mdct = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), 1)->byval_arg;
    static auto* iwork = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1), 1)->byval_arg;
    static auto* nonzero = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Boolean"), 1)->byval_arg;
    static auto* slidingLowpass = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "CoupleQuantizeNormalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blobno, psyGlobal, mapping, mdct, iwork, nonzero, slidingLowpass, channels});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::NoiseNormalize
// Il2CppName: NoiseNormalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OggVorbisEncoder::Lookups::PsyLookup::*)(int, ::System::Collections::Generic::IList_1<float>*, ::System::Collections::Generic::IList_1<float>*, ::System::Collections::Generic::IList_1<float>*, ::System::Collections::Generic::IList_1<bool>*, int, int, int, ::System::Collections::Generic::IList_1<int>*)>(&OggVorbisEncoder::Lookups::PsyLookup::NoiseNormalize)> {
  static const MethodInfo* get() {
    static auto* limit = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* r = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* q = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* f = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* flags = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* output = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "NoiseNormalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{limit, r, q, f, flags, offset, i, n, output});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::FlagLossless
// Il2CppName: FlagLossless
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, float, float, ::System::Collections::Generic::IList_1<float>*, ::System::Collections::Generic::IList_1<float>*, ::System::Collections::Generic::IList_1<bool>*, int, int, int)>(&OggVorbisEncoder::Lookups::PsyLookup::FlagLossless)> {
  static const MethodInfo* get() {
    static auto* limit = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* prePoint = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* postPoint = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mdct = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* floor = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* flag = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* jn = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "FlagLossless", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{limit, prePoint, postPoint, mdct, floor, flag, offset, i, jn});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::UnitNorm
// Il2CppName: UnitNorm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&OggVorbisEncoder::Lookups::PsyLookup::UnitNorm)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "UnitNorm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::MaxSeeds
// Il2CppName: MaxSeeds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::PsyLookup::*)(::ArrayW<float>, ::System::Collections::Generic::IList_1<float>*)>(&OggVorbisEncoder::Lookups::PsyLookup::MaxSeeds)> {
  static const MethodInfo* get() {
    static auto* seed = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* floor = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "MaxSeeds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seed, floor});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::SeedChase
// Il2CppName: SeedChase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::PsyLookup::*)(::System::Collections::Generic::IList_1<float>*)>(&OggVorbisEncoder::Lookups::PsyLookup::SeedChase)> {
  static const MethodInfo* get() {
    static auto* seeds = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "SeedChase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seeds});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::SeedLoop
// Il2CppName: SeedLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Lookups::PsyLookup::*)(::ArrayW<::ArrayW<::ArrayW<float>>>, ::System::Collections::Generic::IList_1<float>*, ::ArrayW<float>, ::ArrayW<float>, float)>(&OggVorbisEncoder::Lookups::PsyLookup::SeedLoop)> {
  static const MethodInfo* get() {
    static auto* curves = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), 1), 1)->byval_arg;
    static auto* pcm = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* floor = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* seeds = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* specmax = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "SeedLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curves, pcm, floor, seeds, specmax});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::SeedCurve
// Il2CppName: SeedCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::IList_1<float>*, ::ArrayW<::ArrayW<float>>, float, int, int, int, float)>(&OggVorbisEncoder::Lookups::PsyLookup::SeedCurve)> {
  static const MethodInfo* get() {
    static auto* seeds = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* curves = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), 1)->byval_arg;
    static auto* amp = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* oc = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* linesper = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dbOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "SeedCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seeds, curves, amp, oc, n, linesper, dbOffset});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::MinCurve
// Il2CppName: MinCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::IList_1<float>*, ::ArrayW<float>)>(&OggVorbisEncoder::Lookups::PsyLookup::MinCurve)> {
  static const MethodInfo* get() {
    static auto* c1 = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* c2 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "MinCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c1, c2});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::MaxCurve
// Il2CppName: MaxCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::IList_1<float>*, ::ArrayW<float>)>(&OggVorbisEncoder::Lookups::PsyLookup::MaxCurve)> {
  static const MethodInfo* get() {
    static auto* c1 = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* c2 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "MaxCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c1, c2});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::AttenuateCurve
// Il2CppName: AttenuateCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::IList_1<float>*, float)>(&OggVorbisEncoder::Lookups::PsyLookup::AttenuateCurve)> {
  static const MethodInfo* get() {
    static auto* curve = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* att = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "AttenuateCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curve, att});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::ToOctave
// Il2CppName: ToOctave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double)>(&OggVorbisEncoder::Lookups::PsyLookup::ToOctave)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "ToOctave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::FromOctave
// Il2CppName: FromOctave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double)>(&OggVorbisEncoder::Lookups::PsyLookup::FromOctave)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "FromOctave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Lookups::PsyLookup::ToBark
// Il2CppName: ToBark
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double)>(&OggVorbisEncoder::Lookups::PsyLookup::ToBark)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Lookups::PsyLookup*), "ToBark", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
