// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OggVorbisEncoder::Setup
namespace OggVorbisEncoder::Setup {
  // Forward declaring type: CodeBook
  class CodeBook;
}
// Completed forward declares
// Type namespace: OggVorbisEncoder
namespace OggVorbisEncoder {
  // Forward declaring type: EncodeBuffer
  class EncodeBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::EncodeBuffer);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::EncodeBuffer*, "OggVorbisEncoder", "EncodeBuffer");
// Type namespace: OggVorbisEncoder
namespace OggVorbisEncoder {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.EncodeBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  class EncodeBuffer : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Byte[] _buffer
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<uint8_t> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Int32 _endBit
    // Size: 0x4
    // Offset: 0x18
    int endBit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _endByte
    // Size: 0x4
    // Offset: 0x1C
    int endByte;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // static field const value: static private System.Int32 BufferIncrement
    static constexpr const int BufferIncrement = 256;
    // Get static field: static private System.Int32 BufferIncrement
    static int _get_BufferIncrement();
    // Set static field: static private System.Int32 BufferIncrement
    static void _set_BufferIncrement(int value);
    // Get static field: static private readonly System.UInt32[] Mask
    static ::ArrayW<uint> _get_Mask();
    // Set static field: static private readonly System.UInt32[] Mask
    static void _set_Mask(::ArrayW<uint> value);
    // Get instance field reference: private System.Byte[] _buffer
    ::ArrayW<uint8_t>& dyn__buffer();
    // Get instance field reference: private System.Int32 _endBit
    int& dyn__endBit();
    // Get instance field reference: private System.Int32 _endByte
    int& dyn__endByte();
    // private System.Int32 get_Bytes()
    // Offset: 0x75A660
    int get_Bytes();
    // public System.Void .ctor(System.Int32 initialBufferSize)
    // Offset: 0x75A5F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EncodeBuffer* New_ctor(int initialBufferSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::EncodeBuffer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EncodeBuffer*, creationType>(initialBufferSize)));
    }
    // static private System.Void .cctor()
    // Offset: 0x75AB74
    static void _cctor();
    // public System.Void WriteBook(OggVorbisEncoder.Setup.CodeBook book, System.Int32 a)
    // Offset: 0x75A67C
    void WriteBook(::OggVorbisEncoder::Setup::CodeBook* book, int a);
    // public System.Void WriteString(System.String str)
    // Offset: 0x75AA98
    void WriteString(::StringW str);
    // public System.Void Write(System.UInt32 value, System.Int32 bits)
    // Offset: 0x75A7BC
    void Write(uint value, int bits);
    // public System.Byte[] GetBytes()
    // Offset: 0x75AB08
    ::ArrayW<uint8_t> GetBytes();
    // public System.Void .ctor()
    // Offset: 0x75A5EC
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EncodeBuffer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::EncodeBuffer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EncodeBuffer*, creationType>()));
    }
  }; // OggVorbisEncoder.EncodeBuffer
  #pragma pack(pop)
  static check_size<sizeof(EncodeBuffer), 28 + sizeof(int)> __OggVorbisEncoder_EncodeBufferSizeCheck;
  static_assert(sizeof(EncodeBuffer) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::EncodeBuffer::get_Bytes
// Il2CppName: get_Bytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OggVorbisEncoder::EncodeBuffer::*)()>(&OggVorbisEncoder::EncodeBuffer::get_Bytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::EncodeBuffer*), "get_Bytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::EncodeBuffer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OggVorbisEncoder::EncodeBuffer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OggVorbisEncoder::EncodeBuffer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::EncodeBuffer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::EncodeBuffer::WriteBook
// Il2CppName: WriteBook
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::EncodeBuffer::*)(::OggVorbisEncoder::Setup::CodeBook*, int)>(&OggVorbisEncoder::EncodeBuffer::WriteBook)> {
  static const MethodInfo* get() {
    static auto* book = &::il2cpp_utils::GetClassFromName("OggVorbisEncoder.Setup", "CodeBook")->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::EncodeBuffer*), "WriteBook", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{book, a});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::EncodeBuffer::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::EncodeBuffer::*)(::StringW)>(&OggVorbisEncoder::EncodeBuffer::WriteString)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::EncodeBuffer*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::EncodeBuffer::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::EncodeBuffer::*)(uint, int)>(&OggVorbisEncoder::EncodeBuffer::Write)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::EncodeBuffer*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bits});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::EncodeBuffer::GetBytes
// Il2CppName: GetBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (OggVorbisEncoder::EncodeBuffer::*)()>(&OggVorbisEncoder::EncodeBuffer::GetBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::EncodeBuffer*), "GetBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::EncodeBuffer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
