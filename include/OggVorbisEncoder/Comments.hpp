// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: OggVorbisEncoder
namespace OggVorbisEncoder {
  // Forward declaring type: Comments
  class Comments;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::Comments);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::Comments*, "OggVorbisEncoder", "Comments");
// Type namespace: OggVorbisEncoder
namespace OggVorbisEncoder {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.Comments
  // [TokenAttribute] Offset: FFFFFFFF
  class Comments : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.Collections.Generic.List`1<System.String> _userComments
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::StringW>* userComments;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::List_1<::StringW>*
    constexpr operator ::System::Collections::Generic::List_1<::StringW>*() const noexcept {
      return userComments;
    }
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.String> _userComments
    ::System::Collections::Generic::List_1<::StringW>*& dyn__userComments();
    // public System.Collections.Generic.List`1<System.String> get_UserComments()
    // Offset: 0x74AA60
    ::System::Collections::Generic::List_1<::StringW>* get_UserComments();
    // public System.Void AddTag(System.String tag, System.String contents)
    // Offset: 0x74AA68
    void AddTag(::StringW tag, ::StringW contents);
    // public System.Void .ctor()
    // Offset: 0x74AB54
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Comments* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::Comments::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Comments*, creationType>()));
    }
  }; // OggVorbisEncoder.Comments
  #pragma pack(pop)
  static check_size<sizeof(Comments), 16 + sizeof(::System::Collections::Generic::List_1<::StringW>*)> __OggVorbisEncoder_CommentsSizeCheck;
  static_assert(sizeof(Comments) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::Comments::get_UserComments
// Il2CppName: get_UserComments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (OggVorbisEncoder::Comments::*)()>(&OggVorbisEncoder::Comments::get_UserComments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Comments*), "get_UserComments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Comments::AddTag
// Il2CppName: AddTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::Comments::*)(::StringW, ::StringW)>(&OggVorbisEncoder::Comments::AddTag)> {
  static const MethodInfo* get() {
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* contents = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::Comments*), "AddTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tag, contents});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::Comments::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
