// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: OggVorbisEncoder
namespace OggVorbisEncoder {
  // Forward declaring type: OggPage
  class OggPage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::OggPage);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::OggPage*, "OggVorbisEncoder", "OggPage");
// Type namespace: OggVorbisEncoder
namespace OggVorbisEncoder {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.OggPage
  // [TokenAttribute] Offset: FFFFFFFF
  class OggPage : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.Byte[] <Header>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<uint8_t> Header;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private readonly System.Byte[] <Body>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<uint8_t> Body;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Get instance field reference: private readonly System.Byte[] <Header>k__BackingField
    ::ArrayW<uint8_t>& dyn_$Header$k__BackingField();
    // Get instance field reference: private readonly System.Byte[] <Body>k__BackingField
    ::ArrayW<uint8_t>& dyn_$Body$k__BackingField();
    // public System.Byte[] get_Header()
    // Offset: 0x774730
    ::ArrayW<uint8_t> get_Header();
    // public System.Byte[] get_Body()
    // Offset: 0x774738
    ::ArrayW<uint8_t> get_Body();
    // public System.Void .ctor(System.Byte[] header, System.Byte[] body)
    // Offset: 0x7746F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OggPage* New_ctor(::ArrayW<uint8_t> header, ::ArrayW<uint8_t> body) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::OggPage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OggPage*, creationType>(header, body)));
    }
  }; // OggVorbisEncoder.OggPage
  #pragma pack(pop)
  static check_size<sizeof(OggPage), 24 + sizeof(::ArrayW<uint8_t>)> __OggVorbisEncoder_OggPageSizeCheck;
  static_assert(sizeof(OggPage) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::OggPage::get_Header
// Il2CppName: get_Header
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (OggVorbisEncoder::OggPage::*)()>(&OggVorbisEncoder::OggPage::get_Header)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::OggPage*), "get_Header", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::OggPage::get_Body
// Il2CppName: get_Body
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (OggVorbisEncoder::OggPage::*)()>(&OggVorbisEncoder::OggPage::get_Body)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::OggPage*), "get_Body", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::OggPage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
