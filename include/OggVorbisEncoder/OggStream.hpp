// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OggVorbisEncoder
namespace OggVorbisEncoder {
  // Forward declaring type: OggPacket
  class OggPacket;
  // Forward declaring type: OggPage
  class OggPage;
}
// Completed forward declares
// Type namespace: OggVorbisEncoder
namespace OggVorbisEncoder {
  // Forward declaring type: OggStream
  class OggStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OggVorbisEncoder::OggStream);
DEFINE_IL2CPP_ARG_TYPE(::OggVorbisEncoder::OggStream*, "OggVorbisEncoder", "OggStream");
// Type namespace: OggVorbisEncoder
namespace OggVorbisEncoder {
  // Size: 0x4E
  #pragma pack(push, 1)
  // Autogenerated type: OggVorbisEncoder.OggStream
  // [TokenAttribute] Offset: FFFFFFFF
  class OggStream : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.Int32 _serialNumber
    // Size: 0x4
    // Offset: 0x10
    int serialNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: serialNumber and: bodyData
    char __padding0[0x4] = {};
    // private System.Byte[] _bodyData
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<uint8_t> bodyData;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Int32 _bodyFill
    // Size: 0x4
    // Offset: 0x20
    int bodyFill;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _bodyReturned
    // Size: 0x4
    // Offset: 0x24
    int bodyReturned;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int64 _granulePosition
    // Size: 0x8
    // Offset: 0x28
    int64_t granulePosition;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64[] _granuleValues
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<int64_t> granuleValues;
    // Field size check
    static_assert(sizeof(::ArrayW<int64_t>) == 0x8);
    // private System.Int32 _lacingFill
    // Size: 0x4
    // Offset: 0x38
    int lacingFill;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: lacingFill and: lacingValues
    char __padding6[0x4] = {};
    // private System.Int32[] _lacingValues
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<int> lacingValues;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int32 _pageNumber
    // Size: 0x4
    // Offset: 0x48
    int pageNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _writesHaveStarted
    // Size: 0x1
    // Offset: 0x4C
    bool writesHaveStarted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <Finished>k__BackingField
    // Size: 0x1
    // Offset: 0x4D
    bool Finished;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static private System.Int32 LacingSize
    static constexpr const int LacingSize = 1024;
    // Get static field: static private System.Int32 LacingSize
    static int _get_LacingSize();
    // Set static field: static private System.Int32 LacingSize
    static void _set_LacingSize(int value);
    // Get static field: static private readonly System.UInt32[] Checksum
    static ::ArrayW<uint> _get_Checksum();
    // Set static field: static private readonly System.UInt32[] Checksum
    static void _set_Checksum(::ArrayW<uint> value);
    // Get instance field reference: private readonly System.Int32 _serialNumber
    int& dyn__serialNumber();
    // Get instance field reference: private System.Byte[] _bodyData
    ::ArrayW<uint8_t>& dyn__bodyData();
    // Get instance field reference: private System.Int32 _bodyFill
    int& dyn__bodyFill();
    // Get instance field reference: private System.Int32 _bodyReturned
    int& dyn__bodyReturned();
    // Get instance field reference: private System.Int64 _granulePosition
    int64_t& dyn__granulePosition();
    // Get instance field reference: private System.Int64[] _granuleValues
    ::ArrayW<int64_t>& dyn__granuleValues();
    // Get instance field reference: private System.Int32 _lacingFill
    int& dyn__lacingFill();
    // Get instance field reference: private System.Int32[] _lacingValues
    ::ArrayW<int>& dyn__lacingValues();
    // Get instance field reference: private System.Int32 _pageNumber
    int& dyn__pageNumber();
    // Get instance field reference: private System.Boolean _writesHaveStarted
    bool& dyn__writesHaveStarted();
    // Get instance field reference: private System.Boolean <Finished>k__BackingField
    bool& dyn_$Finished$k__BackingField();
    // public System.Boolean get_Finished()
    // Offset: 0x7747F8
    bool get_Finished();
    // private System.Void set_Finished(System.Boolean value)
    // Offset: 0x774800
    void set_Finished(bool value);
    // public System.Void .ctor(System.Int32 serialNumber)
    // Offset: 0x774740
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OggStream* New_ctor(int serialNumber) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OggVorbisEncoder::OggStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OggStream*, creationType>(serialNumber)));
    }
    // static private System.Void .cctor()
    // Offset: 0x775258
    static void _cctor();
    // public System.Void PacketIn(OggVorbisEncoder.OggPacket packet)
    // Offset: 0x77480C
    void PacketIn(::OggVorbisEncoder::OggPacket* packet);
    // private System.Void ClearReturnedBody()
    // Offset: 0x774A04
    void ClearReturnedBody();
    // private System.Void ExpandLacing(System.Int32 needed)
    // Offset: 0x774B4C
    void ExpandLacing(int needed);
    // private System.Void ExpandBody(System.Int32 needed)
    // Offset: 0x774A50
    void ExpandBody(int needed);
    // public System.Boolean PageOut(out OggVorbisEncoder.OggPage page, System.Boolean force)
    // Offset: 0x774C8C
    bool PageOut(ByRef<::OggVorbisEncoder::OggPage*> page, bool force);
  }; // OggVorbisEncoder.OggStream
  #pragma pack(pop)
  static check_size<sizeof(OggStream), 77 + sizeof(bool)> __OggVorbisEncoder_OggStreamSizeCheck;
  static_assert(sizeof(OggStream) == 0x4E);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OggVorbisEncoder::OggStream::get_Finished
// Il2CppName: get_Finished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OggVorbisEncoder::OggStream::*)()>(&OggVorbisEncoder::OggStream::get_Finished)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::OggStream*), "get_Finished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::OggStream::set_Finished
// Il2CppName: set_Finished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::OggStream::*)(bool)>(&OggVorbisEncoder::OggStream::set_Finished)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::OggStream*), "set_Finished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::OggStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OggVorbisEncoder::OggStream::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OggVorbisEncoder::OggStream::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::OggStream*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::OggStream::PacketIn
// Il2CppName: PacketIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::OggStream::*)(::OggVorbisEncoder::OggPacket*)>(&OggVorbisEncoder::OggStream::PacketIn)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("OggVorbisEncoder", "OggPacket")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::OggStream*), "PacketIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::OggStream::ClearReturnedBody
// Il2CppName: ClearReturnedBody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::OggStream::*)()>(&OggVorbisEncoder::OggStream::ClearReturnedBody)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::OggStream*), "ClearReturnedBody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::OggStream::ExpandLacing
// Il2CppName: ExpandLacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::OggStream::*)(int)>(&OggVorbisEncoder::OggStream::ExpandLacing)> {
  static const MethodInfo* get() {
    static auto* needed = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::OggStream*), "ExpandLacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{needed});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::OggStream::ExpandBody
// Il2CppName: ExpandBody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OggVorbisEncoder::OggStream::*)(int)>(&OggVorbisEncoder::OggStream::ExpandBody)> {
  static const MethodInfo* get() {
    static auto* needed = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::OggStream*), "ExpandBody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{needed});
  }
};
// Writing MetadataGetter for method: OggVorbisEncoder::OggStream::PageOut
// Il2CppName: PageOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OggVorbisEncoder::OggStream::*)(ByRef<::OggVorbisEncoder::OggPage*>, bool)>(&OggVorbisEncoder::OggStream::PageOut)> {
  static const MethodInfo* get() {
    static auto* page = &::il2cpp_utils::GetClassFromName("OggVorbisEncoder", "OggPage")->this_arg;
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OggVorbisEncoder::OggStream*), "PageOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{page, force});
  }
};
