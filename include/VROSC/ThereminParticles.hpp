// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: ParticleSystemForceField
  class ParticleSystemForceField;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: TransformMover
  class TransformMover;
  // Forward declaring type: InstrumentController
  class InstrumentController;
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: HandType
  struct HandType;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ThereminParticles
  class ThereminParticles;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ThereminParticles);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ThereminParticles*, "VROSC", "ThereminParticles");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x6C
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ThereminParticles
  // [TokenAttribute] Offset: FFFFFFFF
  class ThereminParticles : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private UnityEngine.ParticleSystem _particles
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::ParticleSystem* particles;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.ParticleSystemForceField _rightHandEffect
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::ParticleSystemForceField* rightHandEffect;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystemForceField*) == 0x8);
    // private UnityEngine.ParticleSystemForceField _leftHandEffect
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::ParticleSystemForceField* leftHandEffect;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystemForceField*) == 0x8);
    // private VROSC.TransformMover _scaling
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::TransformMover* scaling;
    // Field size check
    static_assert(sizeof(::VROSC::TransformMover*) == 0x8);
    // private VROSC.InstrumentController _wavemin
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::InstrumentController* wavemin;
    // Field size check
    static_assert(sizeof(::VROSC::InstrumentController*) == 0x8);
    // private VROSC.InputDevice _rightHand
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::InputDevice* rightHand;
    // Field size check
    static_assert(sizeof(::VROSC::InputDevice*) == 0x8);
    // private VROSC.InputDevice _leftHand
    // Size: 0x8
    // Offset: 0x48
    ::VROSC::InputDevice* leftHand;
    // Field size check
    static_assert(sizeof(::VROSC::InputDevice*) == 0x8);
    // private System.Single _leftHandPlaying
    // Size: 0x4
    // Offset: 0x50
    float leftHandPlaying;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rightHandPlaying
    // Size: 0x4
    // Offset: 0x54
    float rightHandPlaying;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _effectEndRange
    // Size: 0x4
    // Offset: 0x58
    float effectEndRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _visualDistance
    // Size: 0x4
    // Offset: 0x5C
    float visualDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Material _material
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Single _initialEndRange
    // Size: 0x4
    // Offset: 0x68
    float initialEndRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.ParticleSystem _particles
    ::UnityEngine::ParticleSystem*& dyn__particles();
    // Get instance field reference: private UnityEngine.ParticleSystemForceField _rightHandEffect
    ::UnityEngine::ParticleSystemForceField*& dyn__rightHandEffect();
    // Get instance field reference: private UnityEngine.ParticleSystemForceField _leftHandEffect
    ::UnityEngine::ParticleSystemForceField*& dyn__leftHandEffect();
    // Get instance field reference: private VROSC.TransformMover _scaling
    ::VROSC::TransformMover*& dyn__scaling();
    // Get instance field reference: private VROSC.InstrumentController _wavemin
    ::VROSC::InstrumentController*& dyn__wavemin();
    // Get instance field reference: private VROSC.InputDevice _rightHand
    ::VROSC::InputDevice*& dyn__rightHand();
    // Get instance field reference: private VROSC.InputDevice _leftHand
    ::VROSC::InputDevice*& dyn__leftHand();
    // Get instance field reference: private System.Single _leftHandPlaying
    float& dyn__leftHandPlaying();
    // Get instance field reference: private System.Single _rightHandPlaying
    float& dyn__rightHandPlaying();
    // Get instance field reference: private System.Single _effectEndRange
    float& dyn__effectEndRange();
    // Get instance field reference: private System.Single _visualDistance
    float& dyn__visualDistance();
    // Get instance field reference: private UnityEngine.Material _material
    ::UnityEngine::Material*& dyn__material();
    // Get instance field reference: private System.Single _initialEndRange
    float& dyn__initialEndRange();
    // protected System.Void Awake()
    // Offset: 0x13FDD50
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x13FDEC4
    void OnDestroy();
    // private System.Void OnEnable()
    // Offset: 0x13FDFFC
    void OnEnable();
    // private System.Void ScaleChanged(System.Single newScale)
    // Offset: 0x13FE2A0
    void ScaleChanged(float newScale);
    // private System.Void Update()
    // Offset: 0x13FE33C
    void Update();
    // private System.Void PlayStarted(VROSC.HandType handType)
    // Offset: 0x13FE538
    void PlayStarted(::VROSC::HandType handType);
    // private System.Void PlayStopped(VROSC.HandType handType)
    // Offset: 0x13FE590
    void PlayStopped(::VROSC::HandType handType);
    // public System.Void .ctor()
    // Offset: 0x13FE5E0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ThereminParticles* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ThereminParticles::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ThereminParticles*, creationType>()));
    }
  }; // VROSC.ThereminParticles
  #pragma pack(pop)
  static check_size<sizeof(ThereminParticles), 104 + sizeof(float)> __VROSC_ThereminParticlesSizeCheck;
  static_assert(sizeof(ThereminParticles) == 0x6C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ThereminParticles::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ThereminParticles::*)()>(&VROSC::ThereminParticles::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ThereminParticles*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ThereminParticles::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ThereminParticles::*)()>(&VROSC::ThereminParticles::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ThereminParticles*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ThereminParticles::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ThereminParticles::*)()>(&VROSC::ThereminParticles::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ThereminParticles*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ThereminParticles::ScaleChanged
// Il2CppName: ScaleChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ThereminParticles::*)(float)>(&VROSC::ThereminParticles::ScaleChanged)> {
  static const MethodInfo* get() {
    static auto* newScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ThereminParticles*), "ScaleChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newScale});
  }
};
// Writing MetadataGetter for method: VROSC::ThereminParticles::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ThereminParticles::*)()>(&VROSC::ThereminParticles::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ThereminParticles*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ThereminParticles::PlayStarted
// Il2CppName: PlayStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ThereminParticles::*)(::VROSC::HandType)>(&VROSC::ThereminParticles::PlayStarted)> {
  static const MethodInfo* get() {
    static auto* handType = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ThereminParticles*), "PlayStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handType});
  }
};
// Writing MetadataGetter for method: VROSC::ThereminParticles::PlayStopped
// Il2CppName: PlayStopped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ThereminParticles::*)(::VROSC::HandType)>(&VROSC::ThereminParticles::PlayStopped)> {
  static const MethodInfo* get() {
    static auto* handType = &::il2cpp_utils::GetClassFromName("VROSC", "HandType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ThereminParticles*), "PlayStopped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handType});
  }
};
// Writing MetadataGetter for method: VROSC::ThereminParticles::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
