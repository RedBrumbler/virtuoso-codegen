// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TransformData
  class TransformData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TransformData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TransformData*, "VROSC", "TransformData");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TransformData
  // [TokenAttribute] Offset: FFFFFFFF
  class TransformData : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public System.Single[] Position
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<float> Position;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Single[] Rotation
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<float> Rotation;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Single[] Scale
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<float> Scale;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Boolean IsOpen
    // Size: 0x1
    // Offset: 0x28
    bool IsOpen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Single[] Position
    ::ArrayW<float>& dyn_Position();
    // Get instance field reference: public System.Single[] Rotation
    ::ArrayW<float>& dyn_Rotation();
    // Get instance field reference: public System.Single[] Scale
    ::ArrayW<float>& dyn_Scale();
    // Get instance field reference: public System.Boolean IsOpen
    bool& dyn_IsOpen();
    // public System.Void .ctor(VROSC.TransformData other)
    // Offset: 0x14022F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransformData* New_ctor(::VROSC::TransformData* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransformData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransformData*, creationType>(other)));
    }
    // public UnityEngine.Vector3 GetPosition()
    // Offset: 0x13FAF48
    ::UnityEngine::Vector3 GetPosition();
    // public UnityEngine.Quaternion GetRotation()
    // Offset: 0x13FB0C0
    ::UnityEngine::Quaternion GetRotation();
    // public UnityEngine.Vector3 GetScale()
    // Offset: 0x13FB278
    ::UnityEngine::Vector3 GetScale();
    // public System.Void SetPosition(UnityEngine.Vector3 position)
    // Offset: 0x13FAFF4
    void SetPosition(::UnityEngine::Vector3 position);
    // public System.Void SetRotation(UnityEngine.Quaternion rotation)
    // Offset: 0x13FB19C
    void SetRotation(::UnityEngine::Quaternion rotation);
    // public System.Void SetScale(UnityEngine.Vector3 scale)
    // Offset: 0x13FB324
    void SetScale(::UnityEngine::Vector3 scale);
    // public System.Void .ctor()
    // Offset: 0x13FB4C4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransformData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TransformData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransformData*, creationType>()));
    }
  }; // VROSC.TransformData
  #pragma pack(pop)
  static check_size<sizeof(TransformData), 40 + sizeof(bool)> __VROSC_TransformDataSizeCheck;
  static_assert(sizeof(TransformData) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TransformData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::TransformData::GetPosition
// Il2CppName: GetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::TransformData::*)()>(&VROSC::TransformData::GetPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformData*), "GetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformData::GetRotation
// Il2CppName: GetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (VROSC::TransformData::*)()>(&VROSC::TransformData::GetRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformData*), "GetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformData::GetScale
// Il2CppName: GetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (VROSC::TransformData::*)()>(&VROSC::TransformData::GetScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformData*), "GetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TransformData::SetPosition
// Il2CppName: SetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformData::*)(::UnityEngine::Vector3)>(&VROSC::TransformData::SetPosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformData*), "SetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: VROSC::TransformData::SetRotation
// Il2CppName: SetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformData::*)(::UnityEngine::Quaternion)>(&VROSC::TransformData::SetRotation)> {
  static const MethodInfo* get() {
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformData*), "SetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rotation});
  }
};
// Writing MetadataGetter for method: VROSC::TransformData::SetScale
// Il2CppName: SetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TransformData::*)(::UnityEngine::Vector3)>(&VROSC::TransformData::SetScale)> {
  static const MethodInfo* get() {
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TransformData*), "SetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scale});
  }
};
// Writing MetadataGetter for method: VROSC::TransformData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
