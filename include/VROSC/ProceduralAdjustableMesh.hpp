// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.AdjustableMesh
#include "VROSC/AdjustableMesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC::UI::Meshes
namespace VROSC::UI::Meshes {
  // Forward declaring type: ProceduralMeshData
  class ProceduralMeshData;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ProceduralAdjustableMesh
  class ProceduralAdjustableMesh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ProceduralAdjustableMesh);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ProceduralAdjustableMesh*, "VROSC", "ProceduralAdjustableMesh");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xA4
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ProceduralAdjustableMesh
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 66A9B0
  // [ExecuteAlways] Offset: FFFFFFFF
  class ProceduralAdjustableMesh : public ::VROSC::AdjustableMesh {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private VROSC.UI.Meshes.ProceduralMeshData _data
    // Size: 0x8
    // Offset: 0x88
    ::VROSC::UI::Meshes::ProceduralMeshData* data;
    // Field size check
    static_assert(sizeof(::VROSC::UI::Meshes::ProceduralMeshData*) == 0x8);
    // protected System.Single _depth
    // Size: 0x4
    // Offset: 0x90
    float depth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single _border
    // Size: 0x4
    // Offset: 0x94
    float border;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _flatMapUv
    // Size: 0x1
    // Offset: 0x98
    bool flatMapUv;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _alwaysUpdate
    // Size: 0x1
    // Offset: 0x99
    bool alwaysUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: alwaysUpdate and: lastHeight
    char __padding4[0x2] = {};
    // private System.Single _lastHeight
    // Size: 0x4
    // Offset: 0x9C
    float lastHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _lastWidth
    // Size: 0x4
    // Offset: 0xA0
    float lastWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private VROSC.UI.Meshes.ProceduralMeshData _data
    ::VROSC::UI::Meshes::ProceduralMeshData*& dyn__data();
    // Get instance field reference: protected System.Single _depth
    float& dyn__depth();
    // Get instance field reference: protected System.Single _border
    float& dyn__border();
    // Get instance field reference: private System.Boolean _flatMapUv
    bool& dyn__flatMapUv();
    // Get instance field reference: private System.Boolean _alwaysUpdate
    bool& dyn__alwaysUpdate();
    // Get instance field reference: private System.Single _lastHeight
    float& dyn__lastHeight();
    // Get instance field reference: private System.Single _lastWidth
    float& dyn__lastWidth();
    // private System.Void GetRequiredCompontents()
    // Offset: 0x987F98
    void GetRequiredCompontents();
    // public System.Void UpdateMeshSize(System.Boolean force)
    // Offset: 0x98855C
    void UpdateMeshSize(bool force);
    // private System.Void Update()
    // Offset: 0x988820
    void Update();
    // private System.Void FlatMap()
    // Offset: 0x9889A8
    void FlatMap();
    // private System.Void OnDrawGizmos()
    // Offset: 0x988A04
    void OnDrawGizmos();
    // public System.Void .ctor()
    // Offset: 0x988B64
    // Implemented from: VROSC.AdjustableMesh
    // Base method: System.Void AdjustableMesh::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProceduralAdjustableMesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ProceduralAdjustableMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProceduralAdjustableMesh*, creationType>()));
    }
    // protected override System.Void OnEnable()
    // Offset: 0x987F68
    // Implemented from: VROSC.AdjustableMesh
    // Base method: System.Void AdjustableMesh::OnEnable()
    void OnEnable();
    // public override System.Void LoadMesh(System.Boolean force)
    // Offset: 0x98809C
    // Implemented from: VROSC.AdjustableMesh
    // Base method: System.Void AdjustableMesh::LoadMesh(System.Boolean force)
    void LoadMesh(bool force);
    // public override System.Void UpdateMeshAppearance(System.Single appearAmount, VROSC.AnimatedAppear/VROSC.Mode mode, System.Boolean useFlash)
    // Offset: 0x988768
    // Implemented from: VROSC.AdjustableMesh
    // Base method: System.Void AdjustableMesh::UpdateMeshAppearance(System.Single appearAmount, VROSC.AnimatedAppear/VROSC.Mode mode, System.Boolean useFlash)
    void UpdateMeshAppearance(float appearAmount, ::VROSC::AnimatedAppear::Mode mode, bool useFlash);
  }; // VROSC.ProceduralAdjustableMesh
  #pragma pack(pop)
  static check_size<sizeof(ProceduralAdjustableMesh), 160 + sizeof(float)> __VROSC_ProceduralAdjustableMeshSizeCheck;
  static_assert(sizeof(ProceduralAdjustableMesh) == 0xA4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ProceduralAdjustableMesh::GetRequiredCompontents
// Il2CppName: GetRequiredCompontents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ProceduralAdjustableMesh::*)()>(&VROSC::ProceduralAdjustableMesh::GetRequiredCompontents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ProceduralAdjustableMesh*), "GetRequiredCompontents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ProceduralAdjustableMesh::UpdateMeshSize
// Il2CppName: UpdateMeshSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ProceduralAdjustableMesh::*)(bool)>(&VROSC::ProceduralAdjustableMesh::UpdateMeshSize)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ProceduralAdjustableMesh*), "UpdateMeshSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: VROSC::ProceduralAdjustableMesh::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ProceduralAdjustableMesh::*)()>(&VROSC::ProceduralAdjustableMesh::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ProceduralAdjustableMesh*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ProceduralAdjustableMesh::FlatMap
// Il2CppName: FlatMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ProceduralAdjustableMesh::*)()>(&VROSC::ProceduralAdjustableMesh::FlatMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ProceduralAdjustableMesh*), "FlatMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ProceduralAdjustableMesh::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ProceduralAdjustableMesh::*)()>(&VROSC::ProceduralAdjustableMesh::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ProceduralAdjustableMesh*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ProceduralAdjustableMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VROSC::ProceduralAdjustableMesh::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ProceduralAdjustableMesh::*)()>(&VROSC::ProceduralAdjustableMesh::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ProceduralAdjustableMesh*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ProceduralAdjustableMesh::LoadMesh
// Il2CppName: LoadMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ProceduralAdjustableMesh::*)(bool)>(&VROSC::ProceduralAdjustableMesh::LoadMesh)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ProceduralAdjustableMesh*), "LoadMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: VROSC::ProceduralAdjustableMesh::UpdateMeshAppearance
// Il2CppName: UpdateMeshAppearance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::ProceduralAdjustableMesh::*)(float, ::VROSC::AnimatedAppear::Mode, bool)>(&VROSC::ProceduralAdjustableMesh::UpdateMeshAppearance)> {
  static const MethodInfo* get() {
    static auto* appearAmount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("VROSC", "AnimatedAppear/Mode")->byval_arg;
    static auto* useFlash = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::ProceduralAdjustableMesh*), "UpdateMeshAppearance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{appearAmount, mode, useFlash});
  }
};
