// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.InstrumentDataModel
#include "VROSC/InstrumentDataModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: EmpadData
  class EmpadData;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: ModularDrumsDataModel
  class ModularDrumsDataModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::ModularDrumsDataModel);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::ModularDrumsDataModel*, "VROSC", "ModularDrumsDataModel");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.ModularDrumsDataModel
  // [TokenAttribute] Offset: FFFFFFFF
  class ModularDrumsDataModel : public ::VROSC::InstrumentDataModel {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public System.Collections.Generic.List`1<VROSC.EmpadData> Empads
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::VROSC::EmpadData*>* Empads;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::EmpadData*>*) == 0x8);
    // public System.Boolean Quantize
    // Size: 0x1
    // Offset: 0x38
    bool Quantize;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Quantize and: QuantizeTolerance
    char __padding1[0x3] = {};
    // public System.Single QuantizeTolerance
    // Size: 0x4
    // Offset: 0x3C
    float QuantizeTolerance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 QuantizeBeatDivision
    // Size: 0x4
    // Offset: 0x40
    int QuantizeBeatDivision;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Collections.Generic.List`1<VROSC.EmpadData> Empads
    ::System::Collections::Generic::List_1<::VROSC::EmpadData*>*& dyn_Empads();
    // Get instance field reference: public System.Boolean Quantize
    bool& dyn_Quantize();
    // Get instance field reference: public System.Single QuantizeTolerance
    float& dyn_QuantizeTolerance();
    // Get instance field reference: public System.Int32 QuantizeBeatDivision
    int& dyn_QuantizeBeatDivision();
    // public override System.String get_Key()
    // Offset: 0xA07D3C
    // Implemented from: VROSC.BaseDataModel
    // Base method: System.String BaseDataModel::get_Key()
    ::StringW get_Key();
    // public override System.Int32 get_Version()
    // Offset: 0xA07D80
    // Implemented from: VROSC.BaseDataModel
    // Base method: System.Int32 BaseDataModel::get_Version()
    int get_Version();
    // public System.Void .ctor()
    // Offset: 0xA07D88
    // Implemented from: VROSC.InstrumentDataModel
    // Base method: System.Void InstrumentDataModel::.ctor()
    // Base method: System.Void BaseDataModel::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ModularDrumsDataModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::ModularDrumsDataModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ModularDrumsDataModel*, creationType>()));
    }
  }; // VROSC.ModularDrumsDataModel
  #pragma pack(pop)
  static check_size<sizeof(ModularDrumsDataModel), 64 + sizeof(int)> __VROSC_ModularDrumsDataModelSizeCheck;
  static_assert(sizeof(ModularDrumsDataModel) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::ModularDrumsDataModel::get_Key
// Il2CppName: get_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::ModularDrumsDataModel::*)()>(&VROSC::ModularDrumsDataModel::get_Key)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataModel*), "get_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataModel::get_Version
// Il2CppName: get_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::ModularDrumsDataModel::*)()>(&VROSC::ModularDrumsDataModel::get_Version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::ModularDrumsDataModel*), "get_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::ModularDrumsDataModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
