// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: NoteBoardNoteController
  class NoteBoardNoteController;
  // Forward declaring type: WidgetController
  class WidgetController;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableDirector
  class PlayableDirector;
  // Forward declaring type: PlayableAsset
  class PlayableAsset;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: TimelineInstrumentActivation
  class TimelineInstrumentActivation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::TimelineInstrumentActivation);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::TimelineInstrumentActivation*, "VROSC", "TimelineInstrumentActivation");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.TimelineInstrumentActivation
  // [TokenAttribute] Offset: FFFFFFFF
  class TimelineInstrumentActivation : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private VROSC.NoteBoardNoteController _noteboardControlller
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::NoteBoardNoteController* noteboardControlller;
    // Field size check
    static_assert(sizeof(::VROSC::NoteBoardNoteController*) == 0x8);
    // private UnityEngine.Playables.PlayableDirector _director
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Playables::PlayableDirector* director;
    // Field size check
    static_assert(sizeof(::UnityEngine::Playables::PlayableDirector*) == 0x8);
    // private VROSC.WidgetController _instrument
    // Size: 0x8
    // Offset: 0x28
    ::VROSC::WidgetController* instrument;
    // Field size check
    static_assert(sizeof(::VROSC::WidgetController*) == 0x8);
    // private UnityEngine.Playables.PlayableAsset _enterTimeline
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Playables::PlayableAsset* enterTimeline;
    // Field size check
    static_assert(sizeof(::UnityEngine::Playables::PlayableAsset*) == 0x8);
    // private UnityEngine.Playables.PlayableAsset _exitTimeline
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Playables::PlayableAsset* exitTimeline;
    // Field size check
    static_assert(sizeof(::UnityEngine::Playables::PlayableAsset*) == 0x8);
    // private System.Boolean _hideAllNotesAtStart
    // Size: 0x1
    // Offset: 0x40
    bool hideAllNotesAtStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VROSC.NoteBoardNoteController _noteboardControlller
    ::VROSC::NoteBoardNoteController*& dyn__noteboardControlller();
    // Get instance field reference: private UnityEngine.Playables.PlayableDirector _director
    ::UnityEngine::Playables::PlayableDirector*& dyn__director();
    // Get instance field reference: private VROSC.WidgetController _instrument
    ::VROSC::WidgetController*& dyn__instrument();
    // Get instance field reference: private UnityEngine.Playables.PlayableAsset _enterTimeline
    ::UnityEngine::Playables::PlayableAsset*& dyn__enterTimeline();
    // Get instance field reference: private UnityEngine.Playables.PlayableAsset _exitTimeline
    ::UnityEngine::Playables::PlayableAsset*& dyn__exitTimeline();
    // Get instance field reference: private System.Boolean _hideAllNotesAtStart
    bool& dyn__hideAllNotesAtStart();
    // public System.Void Setup(VROSC.WidgetController instrument)
    // Offset: 0x13FF2CC
    void Setup(::VROSC::WidgetController* instrument);
    // public System.Void Activate(System.Boolean shouldBeActive)
    // Offset: 0x13FF2D4
    void Activate(bool shouldBeActive);
    // private System.Void HideNotes()
    // Offset: 0x13FF3D8
    void HideNotes();
    // public System.Void EditorUnloadDirector()
    // Offset: 0x13FF558
    void EditorUnloadDirector();
    // public System.Void EditorLoadDirector(System.Boolean enter)
    // Offset: 0x13FF5E8
    void EditorLoadDirector(bool enter);
    // public System.Void .ctor()
    // Offset: 0x13FF698
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimelineInstrumentActivation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::TimelineInstrumentActivation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimelineInstrumentActivation*, creationType>()));
    }
  }; // VROSC.TimelineInstrumentActivation
  #pragma pack(pop)
  static check_size<sizeof(TimelineInstrumentActivation), 64 + sizeof(bool)> __VROSC_TimelineInstrumentActivationSizeCheck;
  static_assert(sizeof(TimelineInstrumentActivation) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::TimelineInstrumentActivation::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimelineInstrumentActivation::*)(::VROSC::WidgetController*)>(&VROSC::TimelineInstrumentActivation::Setup)> {
  static const MethodInfo* get() {
    static auto* instrument = &::il2cpp_utils::GetClassFromName("VROSC", "WidgetController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimelineInstrumentActivation*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instrument});
  }
};
// Writing MetadataGetter for method: VROSC::TimelineInstrumentActivation::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimelineInstrumentActivation::*)(bool)>(&VROSC::TimelineInstrumentActivation::Activate)> {
  static const MethodInfo* get() {
    static auto* shouldBeActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimelineInstrumentActivation*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shouldBeActive});
  }
};
// Writing MetadataGetter for method: VROSC::TimelineInstrumentActivation::HideNotes
// Il2CppName: HideNotes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimelineInstrumentActivation::*)()>(&VROSC::TimelineInstrumentActivation::HideNotes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimelineInstrumentActivation*), "HideNotes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TimelineInstrumentActivation::EditorUnloadDirector
// Il2CppName: EditorUnloadDirector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimelineInstrumentActivation::*)()>(&VROSC::TimelineInstrumentActivation::EditorUnloadDirector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimelineInstrumentActivation*), "EditorUnloadDirector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::TimelineInstrumentActivation::EditorLoadDirector
// Il2CppName: EditorLoadDirector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::TimelineInstrumentActivation::*)(bool)>(&VROSC::TimelineInstrumentActivation::EditorLoadDirector)> {
  static const MethodInfo* get() {
    static auto* enter = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::TimelineInstrumentActivation*), "EditorLoadDirector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enter});
  }
};
// Writing MetadataGetter for method: VROSC::TimelineInstrumentActivation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
