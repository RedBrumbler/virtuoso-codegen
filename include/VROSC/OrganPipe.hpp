// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VROSC.ProceduralAdjustableMesh
#include "VROSC/ProceduralAdjustableMesh.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: OrganPipe
  class OrganPipe;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::OrganPipe);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::OrganPipe*, "VROSC", "OrganPipe");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.OrganPipe
  // [TokenAttribute] Offset: FFFFFFFF
  class OrganPipe : public ::VROSC::ProceduralAdjustableMesh {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Single _lastSetDiameter
    // Size: 0x4
    // Offset: 0xA4
    float lastSetDiameter;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _lastSetHeight
    // Size: 0x4
    // Offset: 0xA8
    float lastSetHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _lastSetMountHeight
    // Size: 0x4
    // Offset: 0xAC
    float lastSetMountHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Renderer _renderer
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::Renderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.Color _color
    // Size: 0x10
    // Offset: 0xB8
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.MaterialPropertyBlock _propBlock
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::MaterialPropertyBlock* propBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    public:
    // Get instance field reference: private System.Single _lastSetDiameter
    float& dyn__lastSetDiameter();
    // Get instance field reference: private System.Single _lastSetHeight
    float& dyn__lastSetHeight();
    // Get instance field reference: private System.Single _lastSetMountHeight
    float& dyn__lastSetMountHeight();
    // Get instance field reference: private UnityEngine.Renderer _renderer
    ::UnityEngine::Renderer*& dyn__renderer();
    // Get instance field reference: private UnityEngine.Color _color
    ::UnityEngine::Color& dyn__color();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock _propBlock
    ::UnityEngine::MaterialPropertyBlock*& dyn__propBlock();
    // public System.Void SetColor(UnityEngine.Color color)
    // Offset: 0x91E25C
    void SetColor(::UnityEngine::Color color);
    // public System.Void UpdateSize(System.Single diameter, System.Single height, System.Single mouthHeight)
    // Offset: 0x91E3A0
    void UpdateSize(float diameter, float height, float mouthHeight);
    // public System.Void Animate(System.Single appear)
    // Offset: 0x91E504
    void Animate(float appear);
    // private System.Void CreateBlock()
    // Offset: 0x91E438
    void CreateBlock();
    // private System.Void SetPlayingColor(UnityEngine.Vector3 power)
    // Offset: 0x91E28C
    void SetPlayingColor(::UnityEngine::Vector3 power);
    // public System.Void .ctor()
    // Offset: 0x91E554
    // Implemented from: VROSC.ProceduralAdjustableMesh
    // Base method: System.Void ProceduralAdjustableMesh::.ctor()
    // Base method: System.Void AdjustableMesh::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OrganPipe* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OrganPipe::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OrganPipe*, creationType>()));
    }
  }; // VROSC.OrganPipe
  #pragma pack(pop)
  static check_size<sizeof(OrganPipe), 200 + sizeof(::UnityEngine::MaterialPropertyBlock*)> __VROSC_OrganPipeSizeCheck;
  static_assert(sizeof(OrganPipe) == 0xD0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::OrganPipe::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipe::*)(::UnityEngine::Color)>(&VROSC::OrganPipe::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipe*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipe::UpdateSize
// Il2CppName: UpdateSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipe::*)(float, float, float)>(&VROSC::OrganPipe::UpdateSize)> {
  static const MethodInfo* get() {
    static auto* diameter = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mouthHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipe*), "UpdateSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{diameter, height, mouthHeight});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipe::Animate
// Il2CppName: Animate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipe::*)(float)>(&VROSC::OrganPipe::Animate)> {
  static const MethodInfo* get() {
    static auto* appear = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipe*), "Animate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{appear});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipe::CreateBlock
// Il2CppName: CreateBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipe::*)()>(&VROSC::OrganPipe::CreateBlock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipe*), "CreateBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipe::SetPlayingColor
// Il2CppName: SetPlayingColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OrganPipe::*)(::UnityEngine::Vector3)>(&VROSC::OrganPipe::SetPlayingColor)> {
  static const MethodInfo* get() {
    static auto* power = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OrganPipe*), "SetPlayingColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{power});
  }
};
// Writing MetadataGetter for method: VROSC::OrganPipe::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
