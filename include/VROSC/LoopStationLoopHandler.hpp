// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopPlayer
  class LoopPlayer;
  // Forward declaring type: LoopStation
  class LoopStation;
  // Forward declaring type: LoopStationDataController
  class LoopStationDataController;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: LoopStationLoopHandler
  class LoopStationLoopHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::LoopStationLoopHandler);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::LoopStationLoopHandler*, "VROSC", "LoopStationLoopHandler");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.LoopStationLoopHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class LoopStationLoopHandler : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::VROSC::LoopStationLoopHandler::LooperState
    struct LooperState;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private VROSC.LoopPlayer _loopPrefab
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::LoopPlayer* loopPrefab;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlayer*) == 0x8);
    // private UnityEngine.Transform _loopLocation
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* loopLocation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Collections.Generic.List`1<VROSC.LoopPlayer> _activeLoops
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::VROSC::LoopPlayer*>* activeLoops;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VROSC::LoopPlayer*>*) == 0x8);
    // private VROSC.LoopPlayer _currentlyRecordingLoop
    // Size: 0x8
    // Offset: 0x30
    ::VROSC::LoopPlayer* currentlyRecordingLoop;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlayer*) == 0x8);
    // private VROSC.LoopPlayer _lastRecordedLoop
    // Size: 0x8
    // Offset: 0x38
    ::VROSC::LoopPlayer* lastRecordedLoop;
    // Field size check
    static_assert(sizeof(::VROSC::LoopPlayer*) == 0x8);
    // private VROSC.LoopStation _loopStation
    // Size: 0x8
    // Offset: 0x40
    ::VROSC::LoopStation* loopStation;
    // Field size check
    static_assert(sizeof(::VROSC::LoopStation*) == 0x8);
    // public System.Action`2<VROSC.LoopPlayer,System.Boolean> OnLoopDeleted
    // Size: 0x8
    // Offset: 0x48
    ::System::Action_2<::VROSC::LoopPlayer*, bool>* OnLoopDeleted;
    // Field size check
    static_assert(sizeof(::System::Action_2<::VROSC::LoopPlayer*, bool>*) == 0x8);
    // public System.Action`1<VROSC.LoopPlayer> OnLoopRecorded
    // Size: 0x8
    // Offset: 0x50
    ::System::Action_1<::VROSC::LoopPlayer*>* OnLoopRecorded;
    // Field size check
    static_assert(sizeof(::System::Action_1<::VROSC::LoopPlayer*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.Int32 MaxActiveLoops
    static constexpr const int MaxActiveLoops = 32;
    // Get static field: static public System.Int32 MaxActiveLoops
    static int _get_MaxActiveLoops();
    // Set static field: static public System.Int32 MaxActiveLoops
    static void _set_MaxActiveLoops(int value);
    // Get instance field reference: private VROSC.LoopPlayer _loopPrefab
    ::VROSC::LoopPlayer*& dyn__loopPrefab();
    // Get instance field reference: private UnityEngine.Transform _loopLocation
    ::UnityEngine::Transform*& dyn__loopLocation();
    // Get instance field reference: private System.Collections.Generic.List`1<VROSC.LoopPlayer> _activeLoops
    ::System::Collections::Generic::List_1<::VROSC::LoopPlayer*>*& dyn__activeLoops();
    // Get instance field reference: private VROSC.LoopPlayer _currentlyRecordingLoop
    ::VROSC::LoopPlayer*& dyn__currentlyRecordingLoop();
    // Get instance field reference: private VROSC.LoopPlayer _lastRecordedLoop
    ::VROSC::LoopPlayer*& dyn__lastRecordedLoop();
    // Get instance field reference: private VROSC.LoopStation _loopStation
    ::VROSC::LoopStation*& dyn__loopStation();
    // Get instance field reference: public System.Action`2<VROSC.LoopPlayer,System.Boolean> OnLoopDeleted
    ::System::Action_2<::VROSC::LoopPlayer*, bool>*& dyn_OnLoopDeleted();
    // Get instance field reference: public System.Action`1<VROSC.LoopPlayer> OnLoopRecorded
    ::System::Action_1<::VROSC::LoopPlayer*>*& dyn_OnLoopRecorded();
    // public System.Collections.Generic.List`1<VROSC.LoopPlayer> get_ActiveLoops()
    // Offset: 0x916BC4
    ::System::Collections::Generic::List_1<::VROSC::LoopPlayer*>* get_ActiveLoops();
    // public System.Int32 get_LoopCount()
    // Offset: 0x90E3C0
    int get_LoopCount();
    // public System.Boolean get_IsMaxLoopsReached()
    // Offset: 0x916BCC
    bool get_IsMaxLoopsReached();
    // public System.Void Setup(VROSC.LoopStation loopStation)
    // Offset: 0x916BE8
    void Setup(::VROSC::LoopStation* loopStation);
    // private System.Void OnEnable()
    // Offset: 0x916BF0
    void OnEnable();
    // public System.Void PlayAll()
    // Offset: 0x90B724
    void PlayAll();
    // public System.Void StopAll()
    // Offset: 0x90B9BC
    void StopAll();
    // public System.Boolean IsEmpty()
    // Offset: 0x916D1C
    bool IsEmpty();
    // public VROSC.LoopStationLoopHandler/VROSC.LooperState GetState()
    // Offset: 0x916E50
    ::VROSC::LoopStationLoopHandler::LooperState GetState();
    // public System.Boolean GetIsAnyLoopGrabbed()
    // Offset: 0x90F934
    bool GetIsAnyLoopGrabbed();
    // public VROSC.LoopPlayer CreateLoop(System.String trackId, System.Boolean byRecorder, System.Boolean overdub)
    // Offset: 0x90AA40
    ::VROSC::LoopPlayer* CreateLoop(::StringW trackId, bool byRecorder, bool overdub);
    // public System.Void RecordingOfLoopComplete()
    // Offset: 0x90ACC0
    void RecordingOfLoopComplete();
    // public System.Void AbortRecording()
    // Offset: 0x90AD34
    void AbortRecording();
    // public System.Void RemoveLastLoop()
    // Offset: 0x90AEA0
    void RemoveLastLoop();
    // public System.Void CreateLoops(VROSC.LoopStationDataController data)
    // Offset: 0x90CCD4
    void CreateLoops(::VROSC::LoopStationDataController* data);
    // private System.Void RemoveLoop(VROSC.LoopPlayer loopPlayer, System.Boolean fromReset)
    // Offset: 0x916EDC
    void RemoveLoop(::VROSC::LoopPlayer* loopPlayer, bool fromReset);
    // public System.Void RemoveAllLoops()
    // Offset: 0x90B4CC
    void RemoveAllLoops();
    // public System.Void SetRecordingText(System.String recordingText)
    // Offset: 0x90AC04
    void SetRecordingText(::StringW recordingText);
    // public VROSC.LoopPlayer GetLoopByID(System.String loopID)
    // Offset: 0x90DA28
    ::VROSC::LoopPlayer* GetLoopByID(::StringW loopID);
    // public System.Void .ctor()
    // Offset: 0x916F9C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoopStationLoopHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::LoopStationLoopHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoopStationLoopHandler*, creationType>()));
    }
  }; // VROSC.LoopStationLoopHandler
  #pragma pack(pop)
  static check_size<sizeof(LoopStationLoopHandler), 80 + sizeof(::System::Action_1<::VROSC::LoopPlayer*>*)> __VROSC_LoopStationLoopHandlerSizeCheck;
  static_assert(sizeof(LoopStationLoopHandler) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::get_ActiveLoops
// Il2CppName: get_ActiveLoops
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::VROSC::LoopPlayer*>* (VROSC::LoopStationLoopHandler::*)()>(&VROSC::LoopStationLoopHandler::get_ActiveLoops)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "get_ActiveLoops", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::get_LoopCount
// Il2CppName: get_LoopCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VROSC::LoopStationLoopHandler::*)()>(&VROSC::LoopStationLoopHandler::get_LoopCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "get_LoopCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::get_IsMaxLoopsReached
// Il2CppName: get_IsMaxLoopsReached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopStationLoopHandler::*)()>(&VROSC::LoopStationLoopHandler::get_IsMaxLoopsReached)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "get_IsMaxLoopsReached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationLoopHandler::*)(::VROSC::LoopStation*)>(&VROSC::LoopStationLoopHandler::Setup)> {
  static const MethodInfo* get() {
    static auto* loopStation = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopStation});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationLoopHandler::*)()>(&VROSC::LoopStationLoopHandler::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::PlayAll
// Il2CppName: PlayAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationLoopHandler::*)()>(&VROSC::LoopStationLoopHandler::PlayAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "PlayAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::StopAll
// Il2CppName: StopAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationLoopHandler::*)()>(&VROSC::LoopStationLoopHandler::StopAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "StopAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::IsEmpty
// Il2CppName: IsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopStationLoopHandler::*)()>(&VROSC::LoopStationLoopHandler::IsEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "IsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::GetState
// Il2CppName: GetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopStationLoopHandler::LooperState (VROSC::LoopStationLoopHandler::*)()>(&VROSC::LoopStationLoopHandler::GetState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "GetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::GetIsAnyLoopGrabbed
// Il2CppName: GetIsAnyLoopGrabbed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::LoopStationLoopHandler::*)()>(&VROSC::LoopStationLoopHandler::GetIsAnyLoopGrabbed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "GetIsAnyLoopGrabbed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::CreateLoop
// Il2CppName: CreateLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlayer* (VROSC::LoopStationLoopHandler::*)(::StringW, bool, bool)>(&VROSC::LoopStationLoopHandler::CreateLoop)> {
  static const MethodInfo* get() {
    static auto* trackId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* byRecorder = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* overdub = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "CreateLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackId, byRecorder, overdub});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::RecordingOfLoopComplete
// Il2CppName: RecordingOfLoopComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationLoopHandler::*)()>(&VROSC::LoopStationLoopHandler::RecordingOfLoopComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "RecordingOfLoopComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::AbortRecording
// Il2CppName: AbortRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationLoopHandler::*)()>(&VROSC::LoopStationLoopHandler::AbortRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "AbortRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::RemoveLastLoop
// Il2CppName: RemoveLastLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationLoopHandler::*)()>(&VROSC::LoopStationLoopHandler::RemoveLastLoop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "RemoveLastLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::CreateLoops
// Il2CppName: CreateLoops
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationLoopHandler::*)(::VROSC::LoopStationDataController*)>(&VROSC::LoopStationLoopHandler::CreateLoops)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("VROSC", "LoopStationDataController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "CreateLoops", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::RemoveLoop
// Il2CppName: RemoveLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationLoopHandler::*)(::VROSC::LoopPlayer*, bool)>(&VROSC::LoopStationLoopHandler::RemoveLoop)> {
  static const MethodInfo* get() {
    static auto* loopPlayer = &::il2cpp_utils::GetClassFromName("VROSC", "LoopPlayer")->byval_arg;
    static auto* fromReset = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "RemoveLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopPlayer, fromReset});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::RemoveAllLoops
// Il2CppName: RemoveAllLoops
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationLoopHandler::*)()>(&VROSC::LoopStationLoopHandler::RemoveAllLoops)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "RemoveAllLoops", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::SetRecordingText
// Il2CppName: SetRecordingText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::LoopStationLoopHandler::*)(::StringW)>(&VROSC::LoopStationLoopHandler::SetRecordingText)> {
  static const MethodInfo* get() {
    static auto* recordingText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "SetRecordingText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recordingText});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::GetLoopByID
// Il2CppName: GetLoopByID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::LoopPlayer* (VROSC::LoopStationLoopHandler::*)(::StringW)>(&VROSC::LoopStationLoopHandler::GetLoopByID)> {
  static const MethodInfo* get() {
    static auto* loopID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::LoopStationLoopHandler*), "GetLoopByID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopID});
  }
};
// Writing MetadataGetter for method: VROSC::LoopStationLoopHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
