// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: MinMaxFloat
  class MinMaxFloat;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: UISliderData
  class UISliderData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::UISliderData);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::UISliderData*, "VROSC", "UISliderData");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.UISliderData
  // [TokenAttribute] Offset: FFFFFFFF
  class UISliderData : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.String _valueName
    // Size: 0x8
    // Offset: 0x10
    ::StringW valueName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private VROSC.MinMaxFloat _valueRange
    // Size: 0x8
    // Offset: 0x18
    ::VROSC::MinMaxFloat* valueRange;
    // Field size check
    static_assert(sizeof(::VROSC::MinMaxFloat*) == 0x8);
    // [RangeAttribute] Offset: 0x673C68
    // private System.Int32 _precission
    // Size: 0x4
    // Offset: 0x20
    int precission;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.String _valueName
    ::StringW& dyn__valueName();
    // Get instance field reference: private VROSC.MinMaxFloat _valueRange
    ::VROSC::MinMaxFloat*& dyn__valueRange();
    // Get instance field reference: private System.Int32 _precission
    int& dyn__precission();
    // public System.String get_ValueName()
    // Offset: 0x13A3900
    ::StringW get_ValueName();
    // public VROSC.MinMaxFloat get_ValueRange()
    // Offset: 0x13A3908
    ::VROSC::MinMaxFloat* get_ValueRange();
    // public System.String get_Precission()
    // Offset: 0x13A3910
    ::StringW get_Precission();
    // public System.Void Set(System.String name, VROSC.MinMaxFloat range, System.Int32 precission)
    // Offset: 0x13A3998
    void Set(::StringW name, ::VROSC::MinMaxFloat* range, int precission);
    // public System.Void .ctor()
    // Offset: 0x13A39A4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UISliderData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::UISliderData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UISliderData*, creationType>()));
    }
  }; // VROSC.UISliderData
  #pragma pack(pop)
  static check_size<sizeof(UISliderData), 32 + sizeof(int)> __VROSC_UISliderDataSizeCheck;
  static_assert(sizeof(UISliderData) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::UISliderData::get_ValueName
// Il2CppName: get_ValueName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::UISliderData::*)()>(&VROSC::UISliderData::get_ValueName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISliderData*), "get_ValueName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UISliderData::get_ValueRange
// Il2CppName: get_ValueRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VROSC::MinMaxFloat* (VROSC::UISliderData::*)()>(&VROSC::UISliderData::get_ValueRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISliderData*), "get_ValueRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UISliderData::get_Precission
// Il2CppName: get_Precission
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::UISliderData::*)()>(&VROSC::UISliderData::get_Precission)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISliderData*), "get_Precission", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::UISliderData::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::UISliderData::*)(::StringW, ::VROSC::MinMaxFloat*, int)>(&VROSC::UISliderData::Set)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* range = &::il2cpp_utils::GetClassFromName("VROSC", "MinMaxFloat")->byval_arg;
    static auto* precission = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::UISliderData*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, range, precission});
  }
};
// Writing MetadataGetter for method: VROSC::UISliderData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
