// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VROSC
namespace VROSC {
  // Forward declaring type: OggFileWriter
  class OggFileWriter;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: String
  class String;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: OggFileWriterMonitor
  class OggFileWriterMonitor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::OggFileWriterMonitor);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::OggFileWriterMonitor*, "VROSC", "OggFileWriterMonitor");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.OggFileWriterMonitor
  // [TokenAttribute] Offset: FFFFFFFF
  class OggFileWriterMonitor : public ::Il2CppObject {
    public:
    // Nested type: ::VROSC::OggFileWriterMonitor::$GetAudioClip$d__6
    class $GetAudioClip$d__6;
    // Nested type: ::VROSC::OggFileWriterMonitor::$PoolOggFileWriters$d__11
    struct $PoolOggFileWriters$d__11;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Collections.Generic.Dictionary`2<System.String,VROSC.OggFileWriter> _oggFileWriters
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<::StringW, ::VROSC::OggFileWriter*>* oggFileWriters;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::VROSC::OggFileWriter*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,System.Action> _asyncCallbacks
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Action*>* asyncCallbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Action*>*) == 0x8);
    public:
    // static field const value: static private System.String OggFolderName
    static constexpr const char* OggFolderName = "Clips";
    // Get static field: static private System.String OggFolderName
    static ::StringW _get_OggFolderName();
    // Set static field: static private System.String OggFolderName
    static void _set_OggFolderName(::StringW value);
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,VROSC.OggFileWriter> _oggFileWriters
    ::System::Collections::Generic::Dictionary_2<::StringW, ::VROSC::OggFileWriter*>*& dyn__oggFileWriters();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.Action> _asyncCallbacks
    ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Action*>*& dyn__asyncCallbacks();
    // static public System.Void LoadAudioFile(System.String folderName, System.String fileName, System.Action`1<UnityEngine.AudioClip> callback)
    // Offset: 0x91BEB0
    static void LoadAudioFile(::StringW folderName, ::StringW fileName, ::System::Action_1<::UnityEngine::AudioClip*>* callback);
    // static public System.Void RemoveAllAudioFiles(System.String folderName, System.Action`1<System.Boolean> callback)
    // Offset: 0x91C0EC
    static void RemoveAllAudioFiles(::StringW folderName, ::System::Action_1<bool>* callback);
    // static private System.Collections.IEnumerator GetAudioClip(System.String filePath, System.Action`1<UnityEngine.AudioClip> callback)
    // Offset: 0x91C074
    static ::System::Collections::IEnumerator* GetAudioClip(::StringW filePath, ::System::Action_1<::UnityEngine::AudioClip*>* callback);
    // static public System.Void SaveAudioToFile(System.String id, System.String folderName, System.String fileName, System.Single[] audioData)
    // Offset: 0x91C1F8
    static void SaveAudioToFile(::StringW id, ::StringW folderName, ::StringW fileName, ::ArrayW<float> audioData);
    // public System.Void SaveAudioToFileAsync(System.String id, System.String folderName, System.String fileName, System.Action callback)
    // Offset: 0x91C2E8
    void SaveAudioToFileAsync(::StringW id, ::StringW folderName, ::StringW fileName, ::System::Action* callback);
    // public System.Void AddAudioDataToFile(System.String id, System.Single[] data, System.Int32 channels)
    // Offset: 0x91C4EC
    void AddAudioDataToFile(::StringW id, ::ArrayW<float> data, int channels);
    // public System.Void StopSavingAudio(System.String id)
    // Offset: 0x91C628
    void StopSavingAudio(::StringW id);
    // public System.Void PoolOggFileWriters()
    // Offset: 0x91BDEC
    void PoolOggFileWriters();
    // static private System.String GetPath(System.String folderName, System.String filename)
    // Offset: 0x91BF90
    static ::StringW GetPath(::StringW folderName, ::StringW filename);
    // public System.Void .ctor()
    // Offset: 0x91BD2C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OggFileWriterMonitor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OggFileWriterMonitor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OggFileWriterMonitor*, creationType>()));
    }
  }; // VROSC.OggFileWriterMonitor
  #pragma pack(pop)
  static check_size<sizeof(OggFileWriterMonitor), 24 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Action*>*)> __VROSC_OggFileWriterMonitorSizeCheck;
  static_assert(sizeof(OggFileWriterMonitor) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::OggFileWriterMonitor::LoadAudioFile
// Il2CppName: LoadAudioFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW, ::System::Action_1<::UnityEngine::AudioClip*>*)>(&VROSC::OggFileWriterMonitor::LoadAudioFile)> {
  static const MethodInfo* get() {
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriterMonitor*), "LoadAudioFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{folderName, fileName, callback});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriterMonitor::RemoveAllAudioFiles
// Il2CppName: RemoveAllAudioFiles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::System::Action_1<bool>*)>(&VROSC::OggFileWriterMonitor::RemoveAllAudioFiles)> {
  static const MethodInfo* get() {
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriterMonitor*), "RemoveAllAudioFiles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{folderName, callback});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriterMonitor::GetAudioClip
// Il2CppName: GetAudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (*)(::StringW, ::System::Action_1<::UnityEngine::AudioClip*>*)>(&VROSC::OggFileWriterMonitor::GetAudioClip)> {
  static const MethodInfo* get() {
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriterMonitor*), "GetAudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filePath, callback});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriterMonitor::SaveAudioToFile
// Il2CppName: SaveAudioToFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW, ::StringW, ::ArrayW<float>)>(&VROSC::OggFileWriterMonitor::SaveAudioToFile)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriterMonitor*), "SaveAudioToFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, folderName, fileName, audioData});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriterMonitor::SaveAudioToFileAsync
// Il2CppName: SaveAudioToFileAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OggFileWriterMonitor::*)(::StringW, ::StringW, ::StringW, ::System::Action*)>(&VROSC::OggFileWriterMonitor::SaveAudioToFileAsync)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriterMonitor*), "SaveAudioToFileAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, folderName, fileName, callback});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriterMonitor::AddAudioDataToFile
// Il2CppName: AddAudioDataToFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OggFileWriterMonitor::*)(::StringW, ::ArrayW<float>, int)>(&VROSC::OggFileWriterMonitor::AddAudioDataToFile)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriterMonitor*), "AddAudioDataToFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, data, channels});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriterMonitor::StopSavingAudio
// Il2CppName: StopSavingAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OggFileWriterMonitor::*)(::StringW)>(&VROSC::OggFileWriterMonitor::StopSavingAudio)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriterMonitor*), "StopSavingAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriterMonitor::PoolOggFileWriters
// Il2CppName: PoolOggFileWriters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OggFileWriterMonitor::*)()>(&VROSC::OggFileWriterMonitor::PoolOggFileWriters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriterMonitor*), "PoolOggFileWriters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriterMonitor::GetPath
// Il2CppName: GetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW)>(&VROSC::OggFileWriterMonitor::GetPath)> {
  static const MethodInfo* get() {
    static auto* folderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriterMonitor*), "GetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{folderName, filename});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriterMonitor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
