// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: IEnablable
  class IEnablable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::IEnablable);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::IEnablable*, "VROSC", "IEnablable");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.IEnablable
  // [TokenAttribute] Offset: FFFFFFFF
  class IEnablable {
    public:
    // public System.Boolean get_Enabled()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_Enabled();
  }; // VROSC.IEnablable
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::IEnablable::get_Enabled
// Il2CppName: get_Enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::IEnablable::*)()>(&VROSC::IEnablable::get_Enabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::IEnablable*), "get_Enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
