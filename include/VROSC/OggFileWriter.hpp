// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OggVorbisEncoder
namespace OggVorbisEncoder {
  // Forward declaring type: OggStream
  class OggStream;
  // Forward declaring type: ProcessingState
  class ProcessingState;
  // Forward declaring type: OggPage
  class OggPage;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: FileStream
  class FileStream;
}
// Forward declaring namespace: System::Collections::Concurrent
namespace System::Collections::Concurrent {
  // Forward declaring type: ConcurrentQueue`1<T>
  template<typename T>
  class ConcurrentQueue_1;
}
// Completed forward declares
// Type namespace: VROSC
namespace VROSC {
  // Forward declaring type: OggFileWriter
  class OggFileWriter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VROSC::OggFileWriter);
DEFINE_IL2CPP_ARG_TYPE(::VROSC::OggFileWriter*, "VROSC", "OggFileWriter");
// Type namespace: VROSC
namespace VROSC {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: VROSC.OggFileWriter
  // [TokenAttribute] Offset: FFFFFFFF
  class OggFileWriter : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private OggVorbisEncoder.OggStream _oggStream
    // Size: 0x8
    // Offset: 0x10
    ::OggVorbisEncoder::OggStream* oggStream;
    // Field size check
    static_assert(sizeof(::OggVorbisEncoder::OggStream*) == 0x8);
    // private System.IO.FileStream _fileStream
    // Size: 0x8
    // Offset: 0x18
    ::System::IO::FileStream* fileStream;
    // Field size check
    static_assert(sizeof(::System::IO::FileStream*) == 0x8);
    // private OggVorbisEncoder.ProcessingState _processingState
    // Size: 0x8
    // Offset: 0x20
    ::OggVorbisEncoder::ProcessingState* processingState;
    // Field size check
    static_assert(sizeof(::OggVorbisEncoder::ProcessingState*) == 0x8);
    // private OggVorbisEncoder.OggPage _oggPage
    // Size: 0x8
    // Offset: 0x28
    ::OggVorbisEncoder::OggPage* oggPage;
    // Field size check
    static_assert(sizeof(::OggVorbisEncoder::OggPage*) == 0x8);
    // private System.Collections.Concurrent.ConcurrentQueue`1<System.Single> _audioBuffer
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Concurrent::ConcurrentQueue_1<float>* audioBuffer;
    // Field size check
    static_assert(sizeof(::System::Collections::Concurrent::ConcurrentQueue_1<float>*) == 0x8);
    // private System.Boolean _closing
    // Size: 0x1
    // Offset: 0x38
    bool closing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: closing and: Id
    char __padding5[0x7] = {};
    // private System.String <Id>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::StringW Id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean <HasSaved>k__BackingField
    // Size: 0x1
    // Offset: 0x48
    bool HasSaved;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static private System.Int32 EncodeSize
    static constexpr const int EncodeSize = 1024;
    // Get static field: static private System.Int32 EncodeSize
    static int _get_EncodeSize();
    // Set static field: static private System.Int32 EncodeSize
    static void _set_EncodeSize(int value);
    // static field const value: static private System.Single BaseQuality
    static constexpr const float BaseQuality = 1;
    // Get static field: static private System.Single BaseQuality
    static float _get_BaseQuality();
    // Set static field: static private System.Single BaseQuality
    static void _set_BaseQuality(float value);
    // Get instance field reference: private OggVorbisEncoder.OggStream _oggStream
    ::OggVorbisEncoder::OggStream*& dyn__oggStream();
    // Get instance field reference: private System.IO.FileStream _fileStream
    ::System::IO::FileStream*& dyn__fileStream();
    // Get instance field reference: private OggVorbisEncoder.ProcessingState _processingState
    ::OggVorbisEncoder::ProcessingState*& dyn__processingState();
    // Get instance field reference: private OggVorbisEncoder.OggPage _oggPage
    ::OggVorbisEncoder::OggPage*& dyn__oggPage();
    // Get instance field reference: private System.Collections.Concurrent.ConcurrentQueue`1<System.Single> _audioBuffer
    ::System::Collections::Concurrent::ConcurrentQueue_1<float>*& dyn__audioBuffer();
    // Get instance field reference: private System.Boolean _closing
    bool& dyn__closing();
    // Get instance field reference: private System.String <Id>k__BackingField
    ::StringW& dyn_$Id$k__BackingField();
    // Get instance field reference: private System.Boolean <HasSaved>k__BackingField
    bool& dyn_$HasSaved$k__BackingField();
    // public System.String get_Id()
    // Offset: 0x91AFA4
    ::StringW get_Id();
    // private System.Void set_Id(System.String value)
    // Offset: 0x91AFAC
    void set_Id(::StringW value);
    // public System.Boolean get_HasSaved()
    // Offset: 0x91AFB4
    bool get_HasSaved();
    // private System.Void set_HasSaved(System.Boolean value)
    // Offset: 0x91AFBC
    void set_HasSaved(bool value);
    // public System.Void SaveToOgg(System.String id, System.String filePath, System.Single[] audioData)
    // Offset: 0x91AFC8
    void SaveToOgg(::StringW id, ::StringW filePath, ::ArrayW<float> audioData);
    // private System.Void InitOggFile(System.String id, System.String filePath, System.Single baseQuality)
    // Offset: 0x91B330
    void InitOggFile(::StringW id, ::StringW filePath, float baseQuality);
    // public System.Void StartAsyncRecording(System.String id, System.String filePath)
    // Offset: 0x91B628
    void StartAsyncRecording(::StringW id, ::StringW filePath);
    // public System.Void AddData(System.Single[] inputData, System.Int32 channels)
    // Offset: 0x91B74C
    void AddData(::ArrayW<float> inputData, int channels);
    // public System.Void StopAsyncRecording()
    // Offset: 0x91B7FC
    void StopAsyncRecording();
    // private System.Void EncodeOgg()
    // Offset: 0x91B8E4
    void EncodeOgg();
    // public System.Void .ctor()
    // Offset: 0x91BCD8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OggFileWriter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VROSC::OggFileWriter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OggFileWriter*, creationType>()));
    }
  }; // VROSC.OggFileWriter
  #pragma pack(pop)
  static check_size<sizeof(OggFileWriter), 72 + sizeof(bool)> __VROSC_OggFileWriterSizeCheck;
  static_assert(sizeof(OggFileWriter) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VROSC::OggFileWriter::get_Id
// Il2CppName: get_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VROSC::OggFileWriter::*)()>(&VROSC::OggFileWriter::get_Id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriter*), "get_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriter::set_Id
// Il2CppName: set_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OggFileWriter::*)(::StringW)>(&VROSC::OggFileWriter::set_Id)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriter*), "set_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriter::get_HasSaved
// Il2CppName: get_HasSaved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VROSC::OggFileWriter::*)()>(&VROSC::OggFileWriter::get_HasSaved)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriter*), "get_HasSaved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriter::set_HasSaved
// Il2CppName: set_HasSaved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OggFileWriter::*)(bool)>(&VROSC::OggFileWriter::set_HasSaved)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriter*), "set_HasSaved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriter::SaveToOgg
// Il2CppName: SaveToOgg
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OggFileWriter::*)(::StringW, ::StringW, ::ArrayW<float>)>(&VROSC::OggFileWriter::SaveToOgg)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* audioData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriter*), "SaveToOgg", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, filePath, audioData});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriter::InitOggFile
// Il2CppName: InitOggFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OggFileWriter::*)(::StringW, ::StringW, float)>(&VROSC::OggFileWriter::InitOggFile)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* baseQuality = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriter*), "InitOggFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, filePath, baseQuality});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriter::StartAsyncRecording
// Il2CppName: StartAsyncRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OggFileWriter::*)(::StringW, ::StringW)>(&VROSC::OggFileWriter::StartAsyncRecording)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriter*), "StartAsyncRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, filePath});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriter::AddData
// Il2CppName: AddData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OggFileWriter::*)(::ArrayW<float>, int)>(&VROSC::OggFileWriter::AddData)> {
  static const MethodInfo* get() {
    static auto* inputData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriter*), "AddData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputData, channels});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriter::StopAsyncRecording
// Il2CppName: StopAsyncRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OggFileWriter::*)()>(&VROSC::OggFileWriter::StopAsyncRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriter*), "StopAsyncRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriter::EncodeOgg
// Il2CppName: EncodeOgg
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VROSC::OggFileWriter::*)()>(&VROSC::OggFileWriter::EncodeOgg)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VROSC::OggFileWriter*), "EncodeOgg", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VROSC::OggFileWriter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
