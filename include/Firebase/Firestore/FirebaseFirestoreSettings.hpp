// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Firestore
namespace Firebase::Firestore {
  // Forward declaring type: SettingsProxy
  class SettingsProxy;
}
// Completed forward declares
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Forward declaring type: FirebaseFirestoreSettings
  class FirebaseFirestoreSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Firestore::FirebaseFirestoreSettings);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::FirebaseFirestoreSettings*, "Firebase.Firestore", "FirebaseFirestoreSettings");
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Firestore.FirebaseFirestoreSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class FirebaseFirestoreSettings : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.String _host
    // Size: 0x8
    // Offset: 0x10
    ::StringW host;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x5C78B4
    // private System.Boolean <SslEnabled>k__BackingField
    // Size: 0x1
    // Offset: 0x18
    bool SslEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [DebuggerBrowsableAttribute] Offset: 0x5C78F0
    // private System.Boolean <PersistenceEnabled>k__BackingField
    // Size: 0x1
    // Offset: 0x19
    bool PersistenceEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: PersistenceEnabled and: CacheSizeBytes
    char __padding2[0x6] = {};
    // [DebuggerBrowsableAttribute] Offset: 0x5C792C
    // private System.Int64 <CacheSizeBytes>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    int64_t CacheSizeBytes;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Get static field: static public readonly System.Int64 CacheSizeUnlimited
    static int64_t _get_CacheSizeUnlimited();
    // Set static field: static public readonly System.Int64 CacheSizeUnlimited
    static void _set_CacheSizeUnlimited(int64_t value);
    // Get static field: static private readonly System.Int64 defaultCacheSizeBytes
    static int64_t _get_defaultCacheSizeBytes();
    // Set static field: static private readonly System.Int64 defaultCacheSizeBytes
    static void _set_defaultCacheSizeBytes(int64_t value);
    // Get instance field reference: private System.String _host
    ::StringW& dyn__host();
    // Get instance field reference: private System.Boolean <SslEnabled>k__BackingField
    bool& dyn_$SslEnabled$k__BackingField();
    // Get instance field reference: private System.Boolean <PersistenceEnabled>k__BackingField
    bool& dyn_$PersistenceEnabled$k__BackingField();
    // Get instance field reference: private System.Int64 <CacheSizeBytes>k__BackingField
    int64_t& dyn_$CacheSizeBytes$k__BackingField();
    // Firebase.Firestore.SettingsProxy get_Proxy()
    // Offset: 0xC379BC
    ::Firebase::Firestore::SettingsProxy* get_Proxy();
    // public System.String get_Host()
    // Offset: 0xC386EC
    ::StringW get_Host();
    // public System.Boolean get_SslEnabled()
    // Offset: 0xC386F4
    bool get_SslEnabled();
    // public System.Boolean get_PersistenceEnabled()
    // Offset: 0xC386FC
    bool get_PersistenceEnabled();
    // public System.Int64 get_CacheSizeBytes()
    // Offset: 0xC38704
    int64_t get_CacheSizeBytes();
    // static private System.Void .cctor()
    // Offset: 0xC388E8
    static void _cctor();
    // public System.Boolean Equals(Firebase.Firestore.FirebaseFirestoreSettings other)
    // Offset: 0xC3878C
    bool Equals(::Firebase::Firestore::FirebaseFirestoreSettings* other);
    // public System.Void .ctor()
    // Offset: 0xC373B0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FirebaseFirestoreSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::FirebaseFirestoreSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FirebaseFirestoreSettings*, creationType>()));
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xC3870C
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xC3883C
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // Firebase.Firestore.FirebaseFirestoreSettings
  #pragma pack(pop)
  static check_size<sizeof(FirebaseFirestoreSettings), 32 + sizeof(int64_t)> __Firebase_Firestore_FirebaseFirestoreSettingsSizeCheck;
  static_assert(sizeof(FirebaseFirestoreSettings) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::get_Proxy
// Il2CppName: get_Proxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::SettingsProxy* (Firebase::Firestore::FirebaseFirestoreSettings::*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::get_Proxy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "get_Proxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::get_Host
// Il2CppName: get_Host
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Firebase::Firestore::FirebaseFirestoreSettings::*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::get_Host)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "get_Host", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::get_SslEnabled
// Il2CppName: get_SslEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::FirebaseFirestoreSettings::*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::get_SslEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "get_SslEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::get_PersistenceEnabled
// Il2CppName: get_PersistenceEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::FirebaseFirestoreSettings::*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::get_PersistenceEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "get_PersistenceEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::get_CacheSizeBytes
// Il2CppName: get_CacheSizeBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Firebase::Firestore::FirebaseFirestoreSettings::*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::get_CacheSizeBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "get_CacheSizeBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::FirebaseFirestoreSettings::*)(::Firebase::Firestore::FirebaseFirestoreSettings*)>(&Firebase::Firestore::FirebaseFirestoreSettings::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "FirebaseFirestoreSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::FirebaseFirestoreSettings::*)(::Il2CppObject*)>(&Firebase::Firestore::FirebaseFirestoreSettings::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Firebase::Firestore::FirebaseFirestoreSettings::*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
