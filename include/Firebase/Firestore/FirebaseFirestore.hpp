// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Firestore
namespace Firebase::Firestore {
  // Forward declaring type: FirestoreProxy
  class FirestoreProxy;
  // Forward declaring type: FirebaseFirestoreSettings
  class FirebaseFirestoreSettings;
  // Forward declaring type: TransactionManager
  class TransactionManager;
  // Forward declaring type: ListenerRegistrationMap`1<T>
  template<typename T>
  class ListenerRegistrationMap_1;
  // Forward declaring type: CollectionReference
  class CollectionReference;
  // Forward declaring type: WriteBatch
  class WriteBatch;
}
// Forward declaring namespace: Firebase
namespace Firebase {
  // Forward declaring type: FirebaseApp
  class FirebaseApp;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: EventArgs
  class EventArgs;
}
// Completed forward declares
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Forward declaring type: FirebaseFirestore
  class FirebaseFirestore;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Firestore::FirebaseFirestore);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::FirebaseFirestore*, "Firebase.Firestore", "FirebaseFirestore");
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Firestore.FirebaseFirestore
  // [TokenAttribute] Offset: FFFFFFFF
  class FirebaseFirestore : public ::Il2CppObject {
    public:
    // Nested type: ::Firebase::Firestore::FirebaseFirestore::SnapshotsInSyncDelegate
    class SnapshotsInSyncDelegate;
    // Nested type: ::Firebase::Firestore::FirebaseFirestore::$SnapshotsInSyncHandler$c__AnonStorey1
    class $SnapshotsInSyncHandler$c__AnonStorey1;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private Firebase.Firestore.FirestoreProxy _proxy
    // Size: 0x8
    // Offset: 0x10
    ::Firebase::Firestore::FirestoreProxy* proxy;
    // Field size check
    static_assert(sizeof(::Firebase::Firestore::FirestoreProxy*) == 0x8);
    // private Firebase.Firestore.FirebaseFirestoreSettings _settings
    // Size: 0x8
    // Offset: 0x18
    ::Firebase::Firestore::FirebaseFirestoreSettings* settings;
    // Field size check
    static_assert(sizeof(::Firebase::Firestore::FirebaseFirestoreSettings*) == 0x8);
    // private System.Boolean _settingsApplied
    // Size: 0x1
    // Offset: 0x20
    bool settingsApplied;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: settingsApplied and: transactionManager
    char __padding2[0x7] = {};
    // private readonly Firebase.Firestore.TransactionManager _transactionManager
    // Size: 0x8
    // Offset: 0x28
    ::Firebase::Firestore::TransactionManager* transactionManager;
    // Field size check
    static_assert(sizeof(::Firebase::Firestore::TransactionManager*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x5C7968
    // private Firebase.FirebaseApp <App>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::Firebase::FirebaseApp* App;
    // Field size check
    static_assert(sizeof(::Firebase::FirebaseApp*) == 0x8);
    public:
    // Get static field: static private System.Collections.Generic.IDictionary`2<Firebase.FirebaseApp,Firebase.Firestore.FirebaseFirestore> databases
    static ::System::Collections::Generic::IDictionary_2<::Firebase::FirebaseApp*, ::Firebase::Firestore::FirebaseFirestore*>* _get_databases();
    // Set static field: static private System.Collections.Generic.IDictionary`2<Firebase.FirebaseApp,Firebase.Firestore.FirebaseFirestore> databases
    static void _set_databases(::System::Collections::Generic::IDictionary_2<::Firebase::FirebaseApp*, ::Firebase::Firestore::FirebaseFirestore*>* value);
    // Get static field: static private Firebase.Firestore.ListenerRegistrationMap`1<System.Action> snapshotsInSyncCallbacks
    static ::Firebase::Firestore::ListenerRegistrationMap_1<::System::Action*>* _get_snapshotsInSyncCallbacks();
    // Set static field: static private Firebase.Firestore.ListenerRegistrationMap`1<System.Action> snapshotsInSyncCallbacks
    static void _set_snapshotsInSyncCallbacks(::Firebase::Firestore::ListenerRegistrationMap_1<::System::Action*>* value);
    // Get static field: static private Firebase.Firestore.FirebaseFirestore/Firebase.Firestore.SnapshotsInSyncDelegate snapshotsInSyncHandler
    static ::Firebase::Firestore::FirebaseFirestore::SnapshotsInSyncDelegate* _get_snapshotsInSyncHandler();
    // Set static field: static private Firebase.Firestore.FirebaseFirestore/Firebase.Firestore.SnapshotsInSyncDelegate snapshotsInSyncHandler
    static void _set_snapshotsInSyncHandler(::Firebase::Firestore::FirebaseFirestore::SnapshotsInSyncDelegate* value);
    // Get instance field reference: private Firebase.Firestore.FirestoreProxy _proxy
    ::Firebase::Firestore::FirestoreProxy*& dyn__proxy();
    // Get instance field reference: private Firebase.Firestore.FirebaseFirestoreSettings _settings
    ::Firebase::Firestore::FirebaseFirestoreSettings*& dyn__settings();
    // Get instance field reference: private System.Boolean _settingsApplied
    bool& dyn__settingsApplied();
    // Get instance field reference: private readonly Firebase.Firestore.TransactionManager _transactionManager
    ::Firebase::Firestore::TransactionManager*& dyn__transactionManager();
    // Get instance field reference: private Firebase.FirebaseApp <App>k__BackingField
    ::Firebase::FirebaseApp*& dyn_$App$k__BackingField();
    // public Firebase.FirebaseApp get_App()
    // Offset: 0xC37BA8
    ::Firebase::FirebaseApp* get_App();
    // private System.Void set_App(Firebase.FirebaseApp value)
    // Offset: 0xC37BB0
    void set_App(::Firebase::FirebaseApp* value);
    // static public Firebase.Firestore.FirebaseFirestore get_DefaultInstance()
    // Offset: 0xC37BB8
    static ::Firebase::Firestore::FirebaseFirestore* get_DefaultInstance();
    // public Firebase.Firestore.FirebaseFirestoreSettings get_Settings()
    // Offset: 0xC380DC
    ::Firebase::Firestore::FirebaseFirestoreSettings* get_Settings();
    // private System.Void .ctor(Firebase.Firestore.FirestoreProxy proxy, Firebase.FirebaseApp app)
    // Offset: 0xC37224
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FirebaseFirestore* New_ctor(::Firebase::Firestore::FirestoreProxy* proxy, ::Firebase::FirebaseApp* app) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::FirebaseFirestore::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FirebaseFirestore*, creationType>(proxy, app)));
    }
    // static private System.Void .cctor()
    // Offset: 0xC38270
    static void _cctor();
    // private System.Void OnAppDisposed(System.Object sender, System.EventArgs eventArgs)
    // Offset: 0xC3795C
    void OnAppDisposed(::Il2CppObject* sender, ::System::EventArgs* eventArgs);
    // private Firebase.Firestore.FirestoreProxy GetProxy()
    // Offset: 0xC37960
    ::Firebase::Firestore::FirestoreProxy* GetProxy();
    // private System.Void Dispose()
    // Offset: 0xC3757C
    void Dispose();
    // static public Firebase.Firestore.FirebaseFirestore GetInstance(Firebase.FirebaseApp app)
    // Offset: 0xC37C70
    static ::Firebase::Firestore::FirebaseFirestore* GetInstance(::Firebase::FirebaseApp* app);
    // public Firebase.Firestore.CollectionReference Collection(System.String path)
    // Offset: 0xC380E4
    ::Firebase::Firestore::CollectionReference* Collection(::StringW path);
    // public Firebase.Firestore.WriteBatch StartBatch()
    // Offset: 0xC38178
    ::Firebase::Firestore::WriteBatch* StartBatch();
    // static private System.Void SnapshotsInSyncHandler(System.Int32 callbackId)
    // Offset: 0xC370A8
    static void SnapshotsInSyncHandler(int callbackId);
    // protected override System.Void Finalize()
    // Offset: 0xC37514
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Firebase.Firestore.FirebaseFirestore
  #pragma pack(pop)
  static check_size<sizeof(FirebaseFirestore), 48 + sizeof(::Firebase::FirebaseApp*)> __Firebase_Firestore_FirebaseFirestoreSizeCheck;
  static_assert(sizeof(FirebaseFirestore) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestore::get_App
// Il2CppName: get_App
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::FirebaseApp* (Firebase::Firestore::FirebaseFirestore::*)()>(&Firebase::Firestore::FirebaseFirestore::get_App)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestore*), "get_App", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestore::set_App
// Il2CppName: set_App
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Firestore::FirebaseFirestore::*)(::Firebase::FirebaseApp*)>(&Firebase::Firestore::FirebaseFirestore::set_App)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Firebase", "FirebaseApp")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestore*), "set_App", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestore::get_DefaultInstance
// Il2CppName: get_DefaultInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::FirebaseFirestore* (*)()>(&Firebase::Firestore::FirebaseFirestore::get_DefaultInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestore*), "get_DefaultInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestore::get_Settings
// Il2CppName: get_Settings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::FirebaseFirestoreSettings* (Firebase::Firestore::FirebaseFirestore::*)()>(&Firebase::Firestore::FirebaseFirestore::get_Settings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestore*), "get_Settings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestore::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestore::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::Firestore::FirebaseFirestore::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestore*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestore::OnAppDisposed
// Il2CppName: OnAppDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Firestore::FirebaseFirestore::*)(::Il2CppObject*, ::System::EventArgs*)>(&Firebase::Firestore::FirebaseFirestore::OnAppDisposed)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* eventArgs = &::il2cpp_utils::GetClassFromName("System", "EventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestore*), "OnAppDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, eventArgs});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestore::GetProxy
// Il2CppName: GetProxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::FirestoreProxy* (Firebase::Firestore::FirebaseFirestore::*)()>(&Firebase::Firestore::FirebaseFirestore::GetProxy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestore*), "GetProxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestore::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Firestore::FirebaseFirestore::*)()>(&Firebase::Firestore::FirebaseFirestore::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestore*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestore::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::FirebaseFirestore* (*)(::Firebase::FirebaseApp*)>(&Firebase::Firestore::FirebaseFirestore::GetInstance)> {
  static const MethodInfo* get() {
    static auto* app = &::il2cpp_utils::GetClassFromName("Firebase", "FirebaseApp")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestore*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{app});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestore::Collection
// Il2CppName: Collection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::CollectionReference* (Firebase::Firestore::FirebaseFirestore::*)(::StringW)>(&Firebase::Firestore::FirebaseFirestore::Collection)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestore*), "Collection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestore::StartBatch
// Il2CppName: StartBatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::WriteBatch* (Firebase::Firestore::FirebaseFirestore::*)()>(&Firebase::Firestore::FirebaseFirestore::StartBatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestore*), "StartBatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestore::SnapshotsInSyncHandler
// Il2CppName: SnapshotsInSyncHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Firebase::Firestore::FirebaseFirestore::SnapshotsInSyncHandler)> {
  static const MethodInfo* get() {
    static auto* callbackId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestore*), "SnapshotsInSyncHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callbackId});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestore::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Firestore::FirebaseFirestore::*)()>(&Firebase::Firestore::FirebaseFirestore::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestore*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
