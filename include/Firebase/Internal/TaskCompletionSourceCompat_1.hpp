// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: TaskCompletionSource`1<TResult>
  template<typename TResult>
  class TaskCompletionSource_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: AggregateException
  class AggregateException;
}
// Completed forward declares
// Type namespace: Firebase.Internal
namespace Firebase::Internal {
  // Forward declaring type: TaskCompletionSourceCompat`1<T>
  template<typename T>
  class TaskCompletionSourceCompat_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Firebase::Internal::TaskCompletionSourceCompat_1, "Firebase.Internal", "TaskCompletionSourceCompat`1");
// Type namespace: Firebase.Internal
namespace Firebase::Internal {
  // WARNING Size may be invalid!
  // Autogenerated type: Firebase.Internal.TaskCompletionSourceCompat`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class TaskCompletionSourceCompat_1 : public ::Il2CppObject {
    public:
    // static private System.Void SetExceptionInternal(System.Threading.Tasks.TaskCompletionSource`1<T> tcs, System.AggregateException exception)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void SetExceptionInternal(::System::Threading::Tasks::TaskCompletionSource_1<T>* tcs, ::System::AggregateException* exception) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Internal::TaskCompletionSourceCompat_1::SetExceptionInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TaskCompletionSourceCompat_1<T>*>::get(), "SetExceptionInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcs), ::il2cpp_utils::ExtractType(exception)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcs, exception);
    }
    // static public System.Void SetException(System.Threading.Tasks.TaskCompletionSource`1<T> tcs, System.AggregateException exception)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void SetException(::System::Threading::Tasks::TaskCompletionSource_1<T>* tcs, ::System::AggregateException* exception) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Internal::TaskCompletionSourceCompat_1::SetException");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TaskCompletionSourceCompat_1<T>*>::get(), "SetException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcs), ::il2cpp_utils::ExtractType(exception)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcs, exception);
    }
  }; // Firebase.Internal.TaskCompletionSourceCompat`1
  // Could not write size check! Type: Firebase.Internal.TaskCompletionSourceCompat`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
